/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: admin_account.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./admin_menu";
import * as pb_1 from "google-protobuf";
export class AdminInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        adminId?: number;
        username?: string;
        nickname?: string;
        avatar?: string;
        email?: string;
        createTime?: string;
        modifyTime?: string;
        lastLoginTime?: string;
        lastLoginIp?: string;
        loginTotal?: number;
        enabled?: boolean;
        token?: string;
        expire?: number;
        menus?: Map<string, dependency_1.MenuItem>;
        permissions?: Map<string, string>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("adminId" in data && data.adminId != undefined) {
                this.adminId = data.adminId;
            }
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
            if ("nickname" in data && data.nickname != undefined) {
                this.nickname = data.nickname;
            }
            if ("avatar" in data && data.avatar != undefined) {
                this.avatar = data.avatar;
            }
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
            if ("createTime" in data && data.createTime != undefined) {
                this.createTime = data.createTime;
            }
            if ("modifyTime" in data && data.modifyTime != undefined) {
                this.modifyTime = data.modifyTime;
            }
            if ("lastLoginTime" in data && data.lastLoginTime != undefined) {
                this.lastLoginTime = data.lastLoginTime;
            }
            if ("lastLoginIp" in data && data.lastLoginIp != undefined) {
                this.lastLoginIp = data.lastLoginIp;
            }
            if ("loginTotal" in data && data.loginTotal != undefined) {
                this.loginTotal = data.loginTotal;
            }
            if ("enabled" in data && data.enabled != undefined) {
                this.enabled = data.enabled;
            }
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
            if ("expire" in data && data.expire != undefined) {
                this.expire = data.expire;
            }
            if ("menus" in data && data.menus != undefined) {
                this.menus = data.menus;
            }
            if ("permissions" in data && data.permissions != undefined) {
                this.permissions = data.permissions;
            }
        }
        if (!this.menus)
            this.menus = new Map();
        if (!this.permissions)
            this.permissions = new Map();
    }
    get adminId() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set adminId(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get username() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get nickname() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set nickname(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get avatar() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set avatar(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get createTime() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set createTime(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get modifyTime() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set modifyTime(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get lastLoginTime() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set lastLoginTime(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get lastLoginIp() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set lastLoginIp(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get loginTotal() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set loginTotal(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get enabled() {
        return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
    }
    set enabled(value: boolean) {
        pb_1.Message.setField(this, 11, value);
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 12, value);
    }
    get expire() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set expire(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get menus() {
        return pb_1.Message.getField(this, 14) as any as Map<string, dependency_1.MenuItem>;
    }
    set menus(value: Map<string, dependency_1.MenuItem>) {
        pb_1.Message.setField(this, 14, value as any);
    }
    get permissions() {
        return pb_1.Message.getField(this, 15) as any as Map<string, string>;
    }
    set permissions(value: Map<string, string>) {
        pb_1.Message.setField(this, 15, value as any);
    }
    static fromObject(data: {
        adminId?: number;
        username?: string;
        nickname?: string;
        avatar?: string;
        email?: string;
        createTime?: string;
        modifyTime?: string;
        lastLoginTime?: string;
        lastLoginIp?: string;
        loginTotal?: number;
        enabled?: boolean;
        token?: string;
        expire?: number;
        menus?: {
            [key: string]: ReturnType<typeof dependency_1.MenuItem.prototype.toObject>;
        };
        permissions?: {
            [key: string]: string;
        };
    }): AdminInfo {
        const message = new AdminInfo({});
        if (data.adminId != null) {
            message.adminId = data.adminId;
        }
        if (data.username != null) {
            message.username = data.username;
        }
        if (data.nickname != null) {
            message.nickname = data.nickname;
        }
        if (data.avatar != null) {
            message.avatar = data.avatar;
        }
        if (data.email != null) {
            message.email = data.email;
        }
        if (data.createTime != null) {
            message.createTime = data.createTime;
        }
        if (data.modifyTime != null) {
            message.modifyTime = data.modifyTime;
        }
        if (data.lastLoginTime != null) {
            message.lastLoginTime = data.lastLoginTime;
        }
        if (data.lastLoginIp != null) {
            message.lastLoginIp = data.lastLoginIp;
        }
        if (data.loginTotal != null) {
            message.loginTotal = data.loginTotal;
        }
        if (data.enabled != null) {
            message.enabled = data.enabled;
        }
        if (data.token != null) {
            message.token = data.token;
        }
        if (data.expire != null) {
            message.expire = data.expire;
        }
        if (typeof data.menus == "object") {
            message.menus = new Map(Object.entries(data.menus).map(([key, value]) => [key, dependency_1.MenuItem.fromObject(value)]));
        }
        if (typeof data.permissions == "object") {
            message.permissions = new Map(Object.entries(data.permissions));
        }
        return message;
    }
    toObject() {
        const data: {
            adminId?: number;
            username?: string;
            nickname?: string;
            avatar?: string;
            email?: string;
            createTime?: string;
            modifyTime?: string;
            lastLoginTime?: string;
            lastLoginIp?: string;
            loginTotal?: number;
            enabled?: boolean;
            token?: string;
            expire?: number;
            menus?: {
                [key: string]: ReturnType<typeof dependency_1.MenuItem.prototype.toObject>;
            };
            permissions?: {
                [key: string]: string;
            };
        } = {};
        if (this.adminId != null) {
            data.adminId = this.adminId;
        }
        if (this.username != null) {
            data.username = this.username;
        }
        if (this.nickname != null) {
            data.nickname = this.nickname;
        }
        if (this.avatar != null) {
            data.avatar = this.avatar;
        }
        if (this.email != null) {
            data.email = this.email;
        }
        if (this.createTime != null) {
            data.createTime = this.createTime;
        }
        if (this.modifyTime != null) {
            data.modifyTime = this.modifyTime;
        }
        if (this.lastLoginTime != null) {
            data.lastLoginTime = this.lastLoginTime;
        }
        if (this.lastLoginIp != null) {
            data.lastLoginIp = this.lastLoginIp;
        }
        if (this.loginTotal != null) {
            data.loginTotal = this.loginTotal;
        }
        if (this.enabled != null) {
            data.enabled = this.enabled;
        }
        if (this.token != null) {
            data.token = this.token;
        }
        if (this.expire != null) {
            data.expire = this.expire;
        }
        if (this.menus != null) {
            data.menus = (Object.fromEntries)((Array.from)(this.menus).map(([key, value]) => [key, value.toObject()]));
        }
        if (this.permissions != null) {
            data.permissions = (Object.fromEntries)(this.permissions);
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.adminId != 0)
            writer.writeInt32(1, this.adminId);
        if (this.username.length)
            writer.writeString(2, this.username);
        if (this.nickname.length)
            writer.writeString(3, this.nickname);
        if (this.avatar.length)
            writer.writeString(4, this.avatar);
        if (this.email.length)
            writer.writeString(5, this.email);
        if (this.createTime.length)
            writer.writeString(6, this.createTime);
        if (this.modifyTime.length)
            writer.writeString(7, this.modifyTime);
        if (this.lastLoginTime.length)
            writer.writeString(8, this.lastLoginTime);
        if (this.lastLoginIp.length)
            writer.writeString(9, this.lastLoginIp);
        if (this.loginTotal != 0)
            writer.writeInt32(10, this.loginTotal);
        if (this.enabled != false)
            writer.writeBool(11, this.enabled);
        if (this.token.length)
            writer.writeString(12, this.token);
        if (this.expire != 0)
            writer.writeInt32(13, this.expire);
        for (const [key, value] of this.menus) {
            writer.writeMessage(14, this.menus, () => {
                writer.writeString(1, key);
                writer.writeMessage(2, value, () => value.serialize(writer));
            });
        }
        for (const [key, value] of this.permissions) {
            writer.writeMessage(15, this.permissions, () => {
                writer.writeString(1, key);
                writer.writeString(2, value);
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdminInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdminInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.adminId = reader.readInt32();
                    break;
                case 2:
                    message.username = reader.readString();
                    break;
                case 3:
                    message.nickname = reader.readString();
                    break;
                case 4:
                    message.avatar = reader.readString();
                    break;
                case 5:
                    message.email = reader.readString();
                    break;
                case 6:
                    message.createTime = reader.readString();
                    break;
                case 7:
                    message.modifyTime = reader.readString();
                    break;
                case 8:
                    message.lastLoginTime = reader.readString();
                    break;
                case 9:
                    message.lastLoginIp = reader.readString();
                    break;
                case 10:
                    message.loginTotal = reader.readInt32();
                    break;
                case 11:
                    message.enabled = reader.readBool();
                    break;
                case 12:
                    message.token = reader.readString();
                    break;
                case 13:
                    message.expire = reader.readInt32();
                    break;
                case 14:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.menus as any, reader, reader.readString, () => {
                        let value;
                        reader.readMessage(message, () => value = dependency_1.MenuItem.deserialize(reader));
                        return value;
                    }));
                    break;
                case 15:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.permissions as any, reader, reader.readString, reader.readString));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AdminInfo {
        return AdminInfo.deserialize(bytes);
    }
}
export class LoginReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        username?: string;
        password?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
        }
    }
    get username() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get password() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set password(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        username?: string;
        password?: string;
    }): LoginReq {
        const message = new LoginReq({});
        if (data.username != null) {
            message.username = data.username;
        }
        if (data.password != null) {
            message.password = data.password;
        }
        return message;
    }
    toObject() {
        const data: {
            username?: string;
            password?: string;
        } = {};
        if (this.username != null) {
            data.username = this.username;
        }
        if (this.password != null) {
            data.password = this.password;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.username.length)
            writer.writeString(1, this.username);
        if (this.password.length)
            writer.writeString(2, this.password);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.username = reader.readString();
                    break;
                case 2:
                    message.password = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LoginReq {
        return LoginReq.deserialize(bytes);
    }
}
export class AccountDetailReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        refreshToken?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("refreshToken" in data && data.refreshToken != undefined) {
                this.refreshToken = data.refreshToken;
            }
        }
    }
    get refreshToken() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set refreshToken(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        refreshToken?: boolean;
    }): AccountDetailReq {
        const message = new AccountDetailReq({});
        if (data.refreshToken != null) {
            message.refreshToken = data.refreshToken;
        }
        return message;
    }
    toObject() {
        const data: {
            refreshToken?: boolean;
        } = {};
        if (this.refreshToken != null) {
            data.refreshToken = this.refreshToken;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.refreshToken != false)
            writer.writeBool(1, this.refreshToken);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountDetailReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountDetailReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.refreshToken = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AccountDetailReq {
        return AccountDetailReq.deserialize(bytes);
    }
}
export class AccountEditReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        nickname?: string;
        avatar?: string;
        email?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("nickname" in data && data.nickname != undefined) {
                this.nickname = data.nickname;
            }
            if ("avatar" in data && data.avatar != undefined) {
                this.avatar = data.avatar;
            }
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
        }
    }
    get nickname() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set nickname(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get avatar() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set avatar(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        nickname?: string;
        avatar?: string;
        email?: string;
    }): AccountEditReq {
        const message = new AccountEditReq({});
        if (data.nickname != null) {
            message.nickname = data.nickname;
        }
        if (data.avatar != null) {
            message.avatar = data.avatar;
        }
        if (data.email != null) {
            message.email = data.email;
        }
        return message;
    }
    toObject() {
        const data: {
            nickname?: string;
            avatar?: string;
            email?: string;
        } = {};
        if (this.nickname != null) {
            data.nickname = this.nickname;
        }
        if (this.avatar != null) {
            data.avatar = this.avatar;
        }
        if (this.email != null) {
            data.email = this.email;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.nickname.length)
            writer.writeString(1, this.nickname);
        if (this.avatar.length)
            writer.writeString(2, this.avatar);
        if (this.email.length)
            writer.writeString(3, this.email);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountEditReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountEditReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.nickname = reader.readString();
                    break;
                case 2:
                    message.avatar = reader.readString();
                    break;
                case 3:
                    message.email = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AccountEditReq {
        return AccountEditReq.deserialize(bytes);
    }
}
export class AccountEditResp extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): AccountEditResp {
        const message = new AccountEditResp({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountEditResp {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountEditResp();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AccountEditResp {
        return AccountEditResp.deserialize(bytes);
    }
}
export class AccountPasswordEditReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        oldPassword?: string;
        password?: string;
        confirmPassword?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("oldPassword" in data && data.oldPassword != undefined) {
                this.oldPassword = data.oldPassword;
            }
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
            if ("confirmPassword" in data && data.confirmPassword != undefined) {
                this.confirmPassword = data.confirmPassword;
            }
        }
    }
    get oldPassword() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set oldPassword(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get password() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set password(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get confirmPassword() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set confirmPassword(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        oldPassword?: string;
        password?: string;
        confirmPassword?: string;
    }): AccountPasswordEditReq {
        const message = new AccountPasswordEditReq({});
        if (data.oldPassword != null) {
            message.oldPassword = data.oldPassword;
        }
        if (data.password != null) {
            message.password = data.password;
        }
        if (data.confirmPassword != null) {
            message.confirmPassword = data.confirmPassword;
        }
        return message;
    }
    toObject() {
        const data: {
            oldPassword?: string;
            password?: string;
            confirmPassword?: string;
        } = {};
        if (this.oldPassword != null) {
            data.oldPassword = this.oldPassword;
        }
        if (this.password != null) {
            data.password = this.password;
        }
        if (this.confirmPassword != null) {
            data.confirmPassword = this.confirmPassword;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.oldPassword.length)
            writer.writeString(1, this.oldPassword);
        if (this.password.length)
            writer.writeString(2, this.password);
        if (this.confirmPassword.length)
            writer.writeString(3, this.confirmPassword);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountPasswordEditReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountPasswordEditReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.oldPassword = reader.readString();
                    break;
                case 2:
                    message.password = reader.readString();
                    break;
                case 3:
                    message.confirmPassword = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AccountPasswordEditReq {
        return AccountPasswordEditReq.deserialize(bytes);
    }
}
export class AccountPasswordEditResp extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): AccountPasswordEditResp {
        const message = new AccountPasswordEditResp({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountPasswordEditResp {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountPasswordEditResp();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AccountPasswordEditResp {
        return AccountPasswordEditResp.deserialize(bytes);
    }
}
export class AccountPermissionReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        menuId?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("menuId" in data && data.menuId != undefined) {
                this.menuId = data.menuId;
            }
        }
    }
    get menuId() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set menuId(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        menuId?: number;
    }): AccountPermissionReq {
        const message = new AccountPermissionReq({});
        if (data.menuId != null) {
            message.menuId = data.menuId;
        }
        return message;
    }
    toObject() {
        const data: {
            menuId?: number;
        } = {};
        if (this.menuId != null) {
            data.menuId = this.menuId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.menuId != 0)
            writer.writeInt32(1, this.menuId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountPermissionReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountPermissionReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.menuId = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AccountPermissionReq {
        return AccountPermissionReq.deserialize(bytes);
    }
}
export class AccountPermissionResp extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): AccountPermissionResp {
        const message = new AccountPermissionResp({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountPermissionResp {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountPermissionResp();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AccountPermissionResp {
        return AccountPermissionResp.deserialize(bytes);
    }
}
