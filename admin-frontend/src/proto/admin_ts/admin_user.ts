/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: admin_user.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./common";
import * as pb_1 from "google-protobuf";
export class AdminUserListReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        base?: dependency_1.ListBaseReq;
        username?: string;
        nickname?: string;
        email?: string;
        roleIds?: number[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("base" in data && data.base != undefined) {
                this.base = data.base;
            }
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
            if ("nickname" in data && data.nickname != undefined) {
                this.nickname = data.nickname;
            }
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
            if ("roleIds" in data && data.roleIds != undefined) {
                this.roleIds = data.roleIds;
            }
        }
    }
    get base() {
        return pb_1.Message.getWrapperField(this, dependency_1.ListBaseReq, 1) as dependency_1.ListBaseReq;
    }
    set base(value: dependency_1.ListBaseReq) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasBase() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get username() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get nickname() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set nickname(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get roleIds() {
        return pb_1.Message.getFieldWithDefault(this, 5, []) as number[];
    }
    set roleIds(value: number[]) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        base?: ReturnType<typeof dependency_1.ListBaseReq.prototype.toObject>;
        username?: string;
        nickname?: string;
        email?: string;
        roleIds?: number[];
    }): AdminUserListReq {
        const message = new AdminUserListReq({});
        if (data.base != null) {
            message.base = dependency_1.ListBaseReq.fromObject(data.base);
        }
        if (data.username != null) {
            message.username = data.username;
        }
        if (data.nickname != null) {
            message.nickname = data.nickname;
        }
        if (data.email != null) {
            message.email = data.email;
        }
        if (data.roleIds != null) {
            message.roleIds = data.roleIds;
        }
        return message;
    }
    toObject() {
        const data: {
            base?: ReturnType<typeof dependency_1.ListBaseReq.prototype.toObject>;
            username?: string;
            nickname?: string;
            email?: string;
            roleIds?: number[];
        } = {};
        if (this.base != null) {
            data.base = this.base.toObject();
        }
        if (this.username != null) {
            data.username = this.username;
        }
        if (this.nickname != null) {
            data.nickname = this.nickname;
        }
        if (this.email != null) {
            data.email = this.email;
        }
        if (this.roleIds != null) {
            data.roleIds = this.roleIds;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasBase)
            writer.writeMessage(1, this.base, () => this.base.serialize(writer));
        if (this.username.length)
            writer.writeString(2, this.username);
        if (this.nickname.length)
            writer.writeString(3, this.nickname);
        if (this.email.length)
            writer.writeString(4, this.email);
        if (this.roleIds.length)
            writer.writePackedInt32(5, this.roleIds);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdminUserListReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdminUserListReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.base, () => message.base = dependency_1.ListBaseReq.deserialize(reader));
                    break;
                case 2:
                    message.username = reader.readString();
                    break;
                case 3:
                    message.nickname = reader.readString();
                    break;
                case 4:
                    message.email = reader.readString();
                    break;
                case 5:
                    message.roleIds = reader.readPackedInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AdminUserListReq {
        return AdminUserListReq.deserialize(bytes);
    }
}
export class AdminUserListItem extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        adminId?: number;
        username?: string;
        email?: string;
        avatar?: string;
        enabled?: boolean;
        enabledText?: string;
        createdAt?: string;
        updatedAt?: string;
        loginTotal?: number;
        lastLoginIp?: string;
        lastLoginTime?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("adminId" in data && data.adminId != undefined) {
                this.adminId = data.adminId;
            }
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
            if ("avatar" in data && data.avatar != undefined) {
                this.avatar = data.avatar;
            }
            if ("enabled" in data && data.enabled != undefined) {
                this.enabled = data.enabled;
            }
            if ("enabledText" in data && data.enabledText != undefined) {
                this.enabledText = data.enabledText;
            }
            if ("createdAt" in data && data.createdAt != undefined) {
                this.createdAt = data.createdAt;
            }
            if ("updatedAt" in data && data.updatedAt != undefined) {
                this.updatedAt = data.updatedAt;
            }
            if ("loginTotal" in data && data.loginTotal != undefined) {
                this.loginTotal = data.loginTotal;
            }
            if ("lastLoginIp" in data && data.lastLoginIp != undefined) {
                this.lastLoginIp = data.lastLoginIp;
            }
            if ("lastLoginTime" in data && data.lastLoginTime != undefined) {
                this.lastLoginTime = data.lastLoginTime;
            }
        }
    }
    get adminId() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set adminId(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get username() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get avatar() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set avatar(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get enabled() {
        return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set enabled(value: boolean) {
        pb_1.Message.setField(this, 5, value);
    }
    get enabledText() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set enabledText(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get createdAt() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set createdAt(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get updatedAt() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set updatedAt(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get loginTotal() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set loginTotal(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get lastLoginIp() {
        return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
    }
    set lastLoginIp(value: string) {
        pb_1.Message.setField(this, 10, value);
    }
    get lastLoginTime() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set lastLoginTime(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    static fromObject(data: {
        adminId?: number;
        username?: string;
        email?: string;
        avatar?: string;
        enabled?: boolean;
        enabledText?: string;
        createdAt?: string;
        updatedAt?: string;
        loginTotal?: number;
        lastLoginIp?: string;
        lastLoginTime?: string;
    }): AdminUserListItem {
        const message = new AdminUserListItem({});
        if (data.adminId != null) {
            message.adminId = data.adminId;
        }
        if (data.username != null) {
            message.username = data.username;
        }
        if (data.email != null) {
            message.email = data.email;
        }
        if (data.avatar != null) {
            message.avatar = data.avatar;
        }
        if (data.enabled != null) {
            message.enabled = data.enabled;
        }
        if (data.enabledText != null) {
            message.enabledText = data.enabledText;
        }
        if (data.createdAt != null) {
            message.createdAt = data.createdAt;
        }
        if (data.updatedAt != null) {
            message.updatedAt = data.updatedAt;
        }
        if (data.loginTotal != null) {
            message.loginTotal = data.loginTotal;
        }
        if (data.lastLoginIp != null) {
            message.lastLoginIp = data.lastLoginIp;
        }
        if (data.lastLoginTime != null) {
            message.lastLoginTime = data.lastLoginTime;
        }
        return message;
    }
    toObject() {
        const data: {
            adminId?: number;
            username?: string;
            email?: string;
            avatar?: string;
            enabled?: boolean;
            enabledText?: string;
            createdAt?: string;
            updatedAt?: string;
            loginTotal?: number;
            lastLoginIp?: string;
            lastLoginTime?: string;
        } = {};
        if (this.adminId != null) {
            data.adminId = this.adminId;
        }
        if (this.username != null) {
            data.username = this.username;
        }
        if (this.email != null) {
            data.email = this.email;
        }
        if (this.avatar != null) {
            data.avatar = this.avatar;
        }
        if (this.enabled != null) {
            data.enabled = this.enabled;
        }
        if (this.enabledText != null) {
            data.enabledText = this.enabledText;
        }
        if (this.createdAt != null) {
            data.createdAt = this.createdAt;
        }
        if (this.updatedAt != null) {
            data.updatedAt = this.updatedAt;
        }
        if (this.loginTotal != null) {
            data.loginTotal = this.loginTotal;
        }
        if (this.lastLoginIp != null) {
            data.lastLoginIp = this.lastLoginIp;
        }
        if (this.lastLoginTime != null) {
            data.lastLoginTime = this.lastLoginTime;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.adminId != 0)
            writer.writeInt32(1, this.adminId);
        if (this.username.length)
            writer.writeString(2, this.username);
        if (this.email.length)
            writer.writeString(3, this.email);
        if (this.avatar.length)
            writer.writeString(4, this.avatar);
        if (this.enabled != false)
            writer.writeBool(5, this.enabled);
        if (this.enabledText.length)
            writer.writeString(6, this.enabledText);
        if (this.createdAt.length)
            writer.writeString(7, this.createdAt);
        if (this.updatedAt.length)
            writer.writeString(8, this.updatedAt);
        if (this.loginTotal != 0)
            writer.writeInt64(9, this.loginTotal);
        if (this.lastLoginIp.length)
            writer.writeString(10, this.lastLoginIp);
        if (this.lastLoginTime.length)
            writer.writeString(11, this.lastLoginTime);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdminUserListItem {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdminUserListItem();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.adminId = reader.readInt32();
                    break;
                case 2:
                    message.username = reader.readString();
                    break;
                case 3:
                    message.email = reader.readString();
                    break;
                case 4:
                    message.avatar = reader.readString();
                    break;
                case 5:
                    message.enabled = reader.readBool();
                    break;
                case 6:
                    message.enabledText = reader.readString();
                    break;
                case 7:
                    message.createdAt = reader.readString();
                    break;
                case 8:
                    message.updatedAt = reader.readString();
                    break;
                case 9:
                    message.loginTotal = reader.readInt64();
                    break;
                case 10:
                    message.lastLoginIp = reader.readString();
                    break;
                case 11:
                    message.lastLoginTime = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AdminUserListItem {
        return AdminUserListItem.deserialize(bytes);
    }
}
export class AdminUserListResp extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        total?: number;
        rows?: AdminUserListItem[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("total" in data && data.total != undefined) {
                this.total = data.total;
            }
            if ("rows" in data && data.rows != undefined) {
                this.rows = data.rows;
            }
        }
    }
    get total() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set total(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get rows() {
        return pb_1.Message.getRepeatedWrapperField(this, AdminUserListItem, 2) as AdminUserListItem[];
    }
    set rows(value: AdminUserListItem[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        total?: number;
        rows?: ReturnType<typeof AdminUserListItem.prototype.toObject>[];
    }): AdminUserListResp {
        const message = new AdminUserListResp({});
        if (data.total != null) {
            message.total = data.total;
        }
        if (data.rows != null) {
            message.rows = data.rows.map(item => AdminUserListItem.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            total?: number;
            rows?: ReturnType<typeof AdminUserListItem.prototype.toObject>[];
        } = {};
        if (this.total != null) {
            data.total = this.total;
        }
        if (this.rows != null) {
            data.rows = this.rows.map((item: AdminUserListItem) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.total != 0)
            writer.writeInt64(1, this.total);
        if (this.rows.length)
            writer.writeRepeatedMessage(2, this.rows, (item: AdminUserListItem) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdminUserListResp {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdminUserListResp();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.total = reader.readInt64();
                    break;
                case 2:
                    reader.readMessage(message.rows, () => pb_1.Message.addToRepeatedWrapperField(message, 2, AdminUserListItem.deserialize(reader), AdminUserListItem));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AdminUserListResp {
        return AdminUserListResp.deserialize(bytes);
    }
}
export class AdminUserInfoReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        adminId?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("adminId" in data && data.adminId != undefined) {
                this.adminId = data.adminId;
            }
        }
    }
    get adminId() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set adminId(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        adminId?: number;
    }): AdminUserInfoReq {
        const message = new AdminUserInfoReq({});
        if (data.adminId != null) {
            message.adminId = data.adminId;
        }
        return message;
    }
    toObject() {
        const data: {
            adminId?: number;
        } = {};
        if (this.adminId != null) {
            data.adminId = this.adminId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.adminId != 0)
            writer.writeInt32(1, this.adminId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdminUserInfoReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdminUserInfoReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.adminId = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AdminUserInfoReq {
        return AdminUserInfoReq.deserialize(bytes);
    }
}
export class AdminUserInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): AdminUserInfo {
        const message = new AdminUserInfo({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdminUserInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdminUserInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AdminUserInfo {
        return AdminUserInfo.deserialize(bytes);
    }
}
export class AdminUserAddReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        username?: string;
        nickname?: string;
        password?: string;
        confirmPassword?: string;
        enabled?: boolean;
        email?: string;
        avatar?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
            if ("nickname" in data && data.nickname != undefined) {
                this.nickname = data.nickname;
            }
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
            if ("confirmPassword" in data && data.confirmPassword != undefined) {
                this.confirmPassword = data.confirmPassword;
            }
            if ("enabled" in data && data.enabled != undefined) {
                this.enabled = data.enabled;
            }
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
            if ("avatar" in data && data.avatar != undefined) {
                this.avatar = data.avatar;
            }
        }
    }
    get username() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get nickname() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set nickname(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get password() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set password(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get confirmPassword() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set confirmPassword(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get enabled() {
        return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set enabled(value: boolean) {
        pb_1.Message.setField(this, 5, value);
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get avatar() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set avatar(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data: {
        username?: string;
        nickname?: string;
        password?: string;
        confirmPassword?: string;
        enabled?: boolean;
        email?: string;
        avatar?: string;
    }): AdminUserAddReq {
        const message = new AdminUserAddReq({});
        if (data.username != null) {
            message.username = data.username;
        }
        if (data.nickname != null) {
            message.nickname = data.nickname;
        }
        if (data.password != null) {
            message.password = data.password;
        }
        if (data.confirmPassword != null) {
            message.confirmPassword = data.confirmPassword;
        }
        if (data.enabled != null) {
            message.enabled = data.enabled;
        }
        if (data.email != null) {
            message.email = data.email;
        }
        if (data.avatar != null) {
            message.avatar = data.avatar;
        }
        return message;
    }
    toObject() {
        const data: {
            username?: string;
            nickname?: string;
            password?: string;
            confirmPassword?: string;
            enabled?: boolean;
            email?: string;
            avatar?: string;
        } = {};
        if (this.username != null) {
            data.username = this.username;
        }
        if (this.nickname != null) {
            data.nickname = this.nickname;
        }
        if (this.password != null) {
            data.password = this.password;
        }
        if (this.confirmPassword != null) {
            data.confirmPassword = this.confirmPassword;
        }
        if (this.enabled != null) {
            data.enabled = this.enabled;
        }
        if (this.email != null) {
            data.email = this.email;
        }
        if (this.avatar != null) {
            data.avatar = this.avatar;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.username.length)
            writer.writeString(1, this.username);
        if (this.nickname.length)
            writer.writeString(2, this.nickname);
        if (this.password.length)
            writer.writeString(3, this.password);
        if (this.confirmPassword.length)
            writer.writeString(4, this.confirmPassword);
        if (this.enabled != false)
            writer.writeBool(5, this.enabled);
        if (this.email.length)
            writer.writeString(6, this.email);
        if (this.avatar.length)
            writer.writeString(7, this.avatar);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdminUserAddReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdminUserAddReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.username = reader.readString();
                    break;
                case 2:
                    message.nickname = reader.readString();
                    break;
                case 3:
                    message.password = reader.readString();
                    break;
                case 4:
                    message.confirmPassword = reader.readString();
                    break;
                case 5:
                    message.enabled = reader.readBool();
                    break;
                case 6:
                    message.email = reader.readString();
                    break;
                case 7:
                    message.avatar = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AdminUserAddReq {
        return AdminUserAddReq.deserialize(bytes);
    }
}
export class AdminUserEditReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        username?: string;
        nickname?: string;
        password?: string;
        confirmPassword?: string;
        enabled?: boolean;
        email?: string;
        avatar?: string;
        adminId?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
            if ("nickname" in data && data.nickname != undefined) {
                this.nickname = data.nickname;
            }
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
            if ("confirmPassword" in data && data.confirmPassword != undefined) {
                this.confirmPassword = data.confirmPassword;
            }
            if ("enabled" in data && data.enabled != undefined) {
                this.enabled = data.enabled;
            }
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
            if ("avatar" in data && data.avatar != undefined) {
                this.avatar = data.avatar;
            }
            if ("adminId" in data && data.adminId != undefined) {
                this.adminId = data.adminId;
            }
        }
    }
    get username() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get nickname() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set nickname(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get password() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set password(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get confirmPassword() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set confirmPassword(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get enabled() {
        return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set enabled(value: boolean) {
        pb_1.Message.setField(this, 5, value);
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get avatar() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set avatar(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get adminId() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set adminId(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        username?: string;
        nickname?: string;
        password?: string;
        confirmPassword?: string;
        enabled?: boolean;
        email?: string;
        avatar?: string;
        adminId?: number;
    }): AdminUserEditReq {
        const message = new AdminUserEditReq({});
        if (data.username != null) {
            message.username = data.username;
        }
        if (data.nickname != null) {
            message.nickname = data.nickname;
        }
        if (data.password != null) {
            message.password = data.password;
        }
        if (data.confirmPassword != null) {
            message.confirmPassword = data.confirmPassword;
        }
        if (data.enabled != null) {
            message.enabled = data.enabled;
        }
        if (data.email != null) {
            message.email = data.email;
        }
        if (data.avatar != null) {
            message.avatar = data.avatar;
        }
        if (data.adminId != null) {
            message.adminId = data.adminId;
        }
        return message;
    }
    toObject() {
        const data: {
            username?: string;
            nickname?: string;
            password?: string;
            confirmPassword?: string;
            enabled?: boolean;
            email?: string;
            avatar?: string;
            adminId?: number;
        } = {};
        if (this.username != null) {
            data.username = this.username;
        }
        if (this.nickname != null) {
            data.nickname = this.nickname;
        }
        if (this.password != null) {
            data.password = this.password;
        }
        if (this.confirmPassword != null) {
            data.confirmPassword = this.confirmPassword;
        }
        if (this.enabled != null) {
            data.enabled = this.enabled;
        }
        if (this.email != null) {
            data.email = this.email;
        }
        if (this.avatar != null) {
            data.avatar = this.avatar;
        }
        if (this.adminId != null) {
            data.adminId = this.adminId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.username.length)
            writer.writeString(1, this.username);
        if (this.nickname.length)
            writer.writeString(2, this.nickname);
        if (this.password.length)
            writer.writeString(3, this.password);
        if (this.confirmPassword.length)
            writer.writeString(4, this.confirmPassword);
        if (this.enabled != false)
            writer.writeBool(5, this.enabled);
        if (this.email.length)
            writer.writeString(6, this.email);
        if (this.avatar.length)
            writer.writeString(7, this.avatar);
        if (this.adminId != 0)
            writer.writeInt32(8, this.adminId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdminUserEditReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdminUserEditReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.username = reader.readString();
                    break;
                case 2:
                    message.nickname = reader.readString();
                    break;
                case 3:
                    message.password = reader.readString();
                    break;
                case 4:
                    message.confirmPassword = reader.readString();
                    break;
                case 5:
                    message.enabled = reader.readBool();
                    break;
                case 6:
                    message.email = reader.readString();
                    break;
                case 7:
                    message.avatar = reader.readString();
                    break;
                case 8:
                    message.adminId = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AdminUserEditReq {
        return AdminUserEditReq.deserialize(bytes);
    }
}
export class AdminUserEnabledReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        adminId?: number;
        enabled?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("adminId" in data && data.adminId != undefined) {
                this.adminId = data.adminId;
            }
            if ("enabled" in data && data.enabled != undefined) {
                this.enabled = data.enabled;
            }
        }
    }
    get adminId() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set adminId(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get enabled() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set enabled(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        adminId?: number;
        enabled?: boolean;
    }): AdminUserEnabledReq {
        const message = new AdminUserEnabledReq({});
        if (data.adminId != null) {
            message.adminId = data.adminId;
        }
        if (data.enabled != null) {
            message.enabled = data.enabled;
        }
        return message;
    }
    toObject() {
        const data: {
            adminId?: number;
            enabled?: boolean;
        } = {};
        if (this.adminId != null) {
            data.adminId = this.adminId;
        }
        if (this.enabled != null) {
            data.enabled = this.enabled;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.adminId != 0)
            writer.writeInt32(1, this.adminId);
        if (this.enabled != false)
            writer.writeBool(2, this.enabled);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdminUserEnabledReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdminUserEnabledReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.adminId = reader.readInt32();
                    break;
                case 2:
                    message.enabled = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AdminUserEnabledReq {
        return AdminUserEnabledReq.deserialize(bytes);
    }
}
export class AdminUserDeleteReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        adminId?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("adminId" in data && data.adminId != undefined) {
                this.adminId = data.adminId;
            }
        }
    }
    get adminId() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set adminId(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        adminId?: number;
    }): AdminUserDeleteReq {
        const message = new AdminUserDeleteReq({});
        if (data.adminId != null) {
            message.adminId = data.adminId;
        }
        return message;
    }
    toObject() {
        const data: {
            adminId?: number;
        } = {};
        if (this.adminId != null) {
            data.adminId = this.adminId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.adminId != 0)
            writer.writeInt32(1, this.adminId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdminUserDeleteReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdminUserDeleteReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.adminId = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AdminUserDeleteReq {
        return AdminUserDeleteReq.deserialize(bytes);
    }
}
export class AdminUserBindRolesReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        adminId?: number;
        roleIds?: number[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("adminId" in data && data.adminId != undefined) {
                this.adminId = data.adminId;
            }
            if ("roleIds" in data && data.roleIds != undefined) {
                this.roleIds = data.roleIds;
            }
        }
    }
    get adminId() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set adminId(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get roleIds() {
        return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
    }
    set roleIds(value: number[]) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        adminId?: number;
        roleIds?: number[];
    }): AdminUserBindRolesReq {
        const message = new AdminUserBindRolesReq({});
        if (data.adminId != null) {
            message.adminId = data.adminId;
        }
        if (data.roleIds != null) {
            message.roleIds = data.roleIds;
        }
        return message;
    }
    toObject() {
        const data: {
            adminId?: number;
            roleIds?: number[];
        } = {};
        if (this.adminId != null) {
            data.adminId = this.adminId;
        }
        if (this.roleIds != null) {
            data.roleIds = this.roleIds;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.adminId != 0)
            writer.writeInt32(1, this.adminId);
        if (this.roleIds.length)
            writer.writePackedInt32(2, this.roleIds);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdminUserBindRolesReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdminUserBindRolesReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.adminId = reader.readInt32();
                    break;
                case 2:
                    message.roleIds = reader.readPackedInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AdminUserBindRolesReq {
        return AdminUserBindRolesReq.deserialize(bytes);
    }
}
