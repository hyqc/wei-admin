/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: admin_user.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./common";
import * as dependency_2 from "./admin_model";
import * as pb_1 from "google-protobuf";
export class ReqAdminUserList extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        base?: dependency_1.ReqListBase;
        username?: string;
        nickname?: string;
        email?: string;
        roleIds?: number[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("base" in data && data.base != undefined) {
                this.base = data.base;
            }
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
            if ("nickname" in data && data.nickname != undefined) {
                this.nickname = data.nickname;
            }
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
            if ("roleIds" in data && data.roleIds != undefined) {
                this.roleIds = data.roleIds;
            }
        }
    }
    get base() {
        return pb_1.Message.getWrapperField(this, dependency_1.ReqListBase, 1) as dependency_1.ReqListBase;
    }
    set base(value: dependency_1.ReqListBase) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasBase() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get username() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get nickname() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set nickname(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get roleIds() {
        return pb_1.Message.getFieldWithDefault(this, 5, []) as number[];
    }
    set roleIds(value: number[]) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        base?: ReturnType<typeof dependency_1.ReqListBase.prototype.toObject>;
        username?: string;
        nickname?: string;
        email?: string;
        roleIds?: number[];
    }): ReqAdminUserList {
        const message = new ReqAdminUserList({});
        if (data.base != null) {
            message.base = dependency_1.ReqListBase.fromObject(data.base);
        }
        if (data.username != null) {
            message.username = data.username;
        }
        if (data.nickname != null) {
            message.nickname = data.nickname;
        }
        if (data.email != null) {
            message.email = data.email;
        }
        if (data.roleIds != null) {
            message.roleIds = data.roleIds;
        }
        return message;
    }
    toObject() {
        const data: {
            base?: ReturnType<typeof dependency_1.ReqListBase.prototype.toObject>;
            username?: string;
            nickname?: string;
            email?: string;
            roleIds?: number[];
        } = {};
        if (this.base != null) {
            data.base = this.base.toObject();
        }
        if (this.username != null) {
            data.username = this.username;
        }
        if (this.nickname != null) {
            data.nickname = this.nickname;
        }
        if (this.email != null) {
            data.email = this.email;
        }
        if (this.roleIds != null) {
            data.roleIds = this.roleIds;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasBase)
            writer.writeMessage(1, this.base, () => this.base.serialize(writer));
        if (this.username.length)
            writer.writeString(2, this.username);
        if (this.nickname.length)
            writer.writeString(3, this.nickname);
        if (this.email.length)
            writer.writeString(4, this.email);
        if (this.roleIds.length)
            writer.writePackedInt32(5, this.roleIds);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqAdminUserList {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReqAdminUserList();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.base, () => message.base = dependency_1.ReqListBase.deserialize(reader));
                    break;
                case 2:
                    message.username = reader.readString();
                    break;
                case 3:
                    message.nickname = reader.readString();
                    break;
                case 4:
                    message.email = reader.readString();
                    break;
                case 5:
                    message.roleIds = reader.readPackedInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReqAdminUserList {
        return ReqAdminUserList.deserialize(bytes);
    }
}
export class RespAdminUserListData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        total?: number;
        list?: dependency_2.AdminUserModel[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("total" in data && data.total != undefined) {
                this.total = data.total;
            }
            if ("list" in data && data.list != undefined) {
                this.list = data.list;
            }
        }
    }
    get total() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set total(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.AdminUserModel, 2) as dependency_2.AdminUserModel[];
    }
    set list(value: dependency_2.AdminUserModel[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        total?: number;
        list?: ReturnType<typeof dependency_2.AdminUserModel.prototype.toObject>[];
    }): RespAdminUserListData {
        const message = new RespAdminUserListData({});
        if (data.total != null) {
            message.total = data.total;
        }
        if (data.list != null) {
            message.list = data.list.map(item => dependency_2.AdminUserModel.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            total?: number;
            list?: ReturnType<typeof dependency_2.AdminUserModel.prototype.toObject>[];
        } = {};
        if (this.total != null) {
            data.total = this.total;
        }
        if (this.list != null) {
            data.list = this.list.map((item: dependency_2.AdminUserModel) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.total != 0)
            writer.writeInt64(1, this.total);
        if (this.list.length)
            writer.writeRepeatedMessage(2, this.list, (item: dependency_2.AdminUserModel) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespAdminUserListData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RespAdminUserListData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.total = reader.readInt64();
                    break;
                case 2:
                    reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_2.AdminUserModel.deserialize(reader), dependency_2.AdminUserModel));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RespAdminUserListData {
        return RespAdminUserListData.deserialize(bytes);
    }
}
export class ReqAdminUserInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        adminId?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("adminId" in data && data.adminId != undefined) {
                this.adminId = data.adminId;
            }
        }
    }
    get adminId() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set adminId(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        adminId?: number;
    }): ReqAdminUserInfo {
        const message = new ReqAdminUserInfo({});
        if (data.adminId != null) {
            message.adminId = data.adminId;
        }
        return message;
    }
    toObject() {
        const data: {
            adminId?: number;
        } = {};
        if (this.adminId != null) {
            data.adminId = this.adminId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.adminId != 0)
            writer.writeInt32(1, this.adminId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqAdminUserInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReqAdminUserInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.adminId = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReqAdminUserInfo {
        return ReqAdminUserInfo.deserialize(bytes);
    }
}
export class RespAdminUserInfoData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        data?: dependency_2.AdminUserModel;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get data() {
        return pb_1.Message.getWrapperField(this, dependency_2.AdminUserModel, 1) as dependency_2.AdminUserModel;
    }
    set data(value: dependency_2.AdminUserModel) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasData() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        data?: ReturnType<typeof dependency_2.AdminUserModel.prototype.toObject>;
    }): RespAdminUserInfoData {
        const message = new RespAdminUserInfoData({});
        if (data.data != null) {
            message.data = dependency_2.AdminUserModel.fromObject(data.data);
        }
        return message;
    }
    toObject() {
        const data: {
            data?: ReturnType<typeof dependency_2.AdminUserModel.prototype.toObject>;
        } = {};
        if (this.data != null) {
            data.data = this.data.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasData)
            writer.writeMessage(1, this.data, () => this.data.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespAdminUserInfoData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RespAdminUserInfoData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.data, () => message.data = dependency_2.AdminUserModel.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RespAdminUserInfoData {
        return RespAdminUserInfoData.deserialize(bytes);
    }
}
export class ReqAdminUserAdd extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        username?: string;
        nickname?: string;
        password?: string;
        confirmPassword?: string;
        enabled?: boolean;
        email?: string;
        avatar?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
            if ("nickname" in data && data.nickname != undefined) {
                this.nickname = data.nickname;
            }
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
            if ("confirmPassword" in data && data.confirmPassword != undefined) {
                this.confirmPassword = data.confirmPassword;
            }
            if ("enabled" in data && data.enabled != undefined) {
                this.enabled = data.enabled;
            }
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
            if ("avatar" in data && data.avatar != undefined) {
                this.avatar = data.avatar;
            }
        }
    }
    get username() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get nickname() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set nickname(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get password() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set password(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get confirmPassword() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set confirmPassword(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get enabled() {
        return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set enabled(value: boolean) {
        pb_1.Message.setField(this, 5, value);
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get avatar() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set avatar(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data: {
        username?: string;
        nickname?: string;
        password?: string;
        confirmPassword?: string;
        enabled?: boolean;
        email?: string;
        avatar?: string;
    }): ReqAdminUserAdd {
        const message = new ReqAdminUserAdd({});
        if (data.username != null) {
            message.username = data.username;
        }
        if (data.nickname != null) {
            message.nickname = data.nickname;
        }
        if (data.password != null) {
            message.password = data.password;
        }
        if (data.confirmPassword != null) {
            message.confirmPassword = data.confirmPassword;
        }
        if (data.enabled != null) {
            message.enabled = data.enabled;
        }
        if (data.email != null) {
            message.email = data.email;
        }
        if (data.avatar != null) {
            message.avatar = data.avatar;
        }
        return message;
    }
    toObject() {
        const data: {
            username?: string;
            nickname?: string;
            password?: string;
            confirmPassword?: string;
            enabled?: boolean;
            email?: string;
            avatar?: string;
        } = {};
        if (this.username != null) {
            data.username = this.username;
        }
        if (this.nickname != null) {
            data.nickname = this.nickname;
        }
        if (this.password != null) {
            data.password = this.password;
        }
        if (this.confirmPassword != null) {
            data.confirmPassword = this.confirmPassword;
        }
        if (this.enabled != null) {
            data.enabled = this.enabled;
        }
        if (this.email != null) {
            data.email = this.email;
        }
        if (this.avatar != null) {
            data.avatar = this.avatar;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.username.length)
            writer.writeString(1, this.username);
        if (this.nickname.length)
            writer.writeString(2, this.nickname);
        if (this.password.length)
            writer.writeString(3, this.password);
        if (this.confirmPassword.length)
            writer.writeString(4, this.confirmPassword);
        if (this.enabled != false)
            writer.writeBool(5, this.enabled);
        if (this.email.length)
            writer.writeString(6, this.email);
        if (this.avatar.length)
            writer.writeString(7, this.avatar);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqAdminUserAdd {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReqAdminUserAdd();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.username = reader.readString();
                    break;
                case 2:
                    message.nickname = reader.readString();
                    break;
                case 3:
                    message.password = reader.readString();
                    break;
                case 4:
                    message.confirmPassword = reader.readString();
                    break;
                case 5:
                    message.enabled = reader.readBool();
                    break;
                case 6:
                    message.email = reader.readString();
                    break;
                case 7:
                    message.avatar = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReqAdminUserAdd {
        return ReqAdminUserAdd.deserialize(bytes);
    }
}
export class RespAdminUserAddData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): RespAdminUserAddData {
        const message = new RespAdminUserAddData({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespAdminUserAddData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RespAdminUserAddData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RespAdminUserAddData {
        return RespAdminUserAddData.deserialize(bytes);
    }
}
export class ReqAdminUserEdit extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        username?: string;
        nickname?: string;
        password?: string;
        confirmPassword?: string;
        enabled?: boolean;
        email?: string;
        avatar?: string;
        adminId?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
            if ("nickname" in data && data.nickname != undefined) {
                this.nickname = data.nickname;
            }
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
            if ("confirmPassword" in data && data.confirmPassword != undefined) {
                this.confirmPassword = data.confirmPassword;
            }
            if ("enabled" in data && data.enabled != undefined) {
                this.enabled = data.enabled;
            }
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
            if ("avatar" in data && data.avatar != undefined) {
                this.avatar = data.avatar;
            }
            if ("adminId" in data && data.adminId != undefined) {
                this.adminId = data.adminId;
            }
        }
    }
    get username() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get nickname() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set nickname(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get password() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set password(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get confirmPassword() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set confirmPassword(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get enabled() {
        return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set enabled(value: boolean) {
        pb_1.Message.setField(this, 5, value);
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get avatar() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set avatar(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get adminId() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set adminId(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        username?: string;
        nickname?: string;
        password?: string;
        confirmPassword?: string;
        enabled?: boolean;
        email?: string;
        avatar?: string;
        adminId?: number;
    }): ReqAdminUserEdit {
        const message = new ReqAdminUserEdit({});
        if (data.username != null) {
            message.username = data.username;
        }
        if (data.nickname != null) {
            message.nickname = data.nickname;
        }
        if (data.password != null) {
            message.password = data.password;
        }
        if (data.confirmPassword != null) {
            message.confirmPassword = data.confirmPassword;
        }
        if (data.enabled != null) {
            message.enabled = data.enabled;
        }
        if (data.email != null) {
            message.email = data.email;
        }
        if (data.avatar != null) {
            message.avatar = data.avatar;
        }
        if (data.adminId != null) {
            message.adminId = data.adminId;
        }
        return message;
    }
    toObject() {
        const data: {
            username?: string;
            nickname?: string;
            password?: string;
            confirmPassword?: string;
            enabled?: boolean;
            email?: string;
            avatar?: string;
            adminId?: number;
        } = {};
        if (this.username != null) {
            data.username = this.username;
        }
        if (this.nickname != null) {
            data.nickname = this.nickname;
        }
        if (this.password != null) {
            data.password = this.password;
        }
        if (this.confirmPassword != null) {
            data.confirmPassword = this.confirmPassword;
        }
        if (this.enabled != null) {
            data.enabled = this.enabled;
        }
        if (this.email != null) {
            data.email = this.email;
        }
        if (this.avatar != null) {
            data.avatar = this.avatar;
        }
        if (this.adminId != null) {
            data.adminId = this.adminId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.username.length)
            writer.writeString(1, this.username);
        if (this.nickname.length)
            writer.writeString(2, this.nickname);
        if (this.password.length)
            writer.writeString(3, this.password);
        if (this.confirmPassword.length)
            writer.writeString(4, this.confirmPassword);
        if (this.enabled != false)
            writer.writeBool(5, this.enabled);
        if (this.email.length)
            writer.writeString(6, this.email);
        if (this.avatar.length)
            writer.writeString(7, this.avatar);
        if (this.adminId != 0)
            writer.writeInt32(8, this.adminId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqAdminUserEdit {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReqAdminUserEdit();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.username = reader.readString();
                    break;
                case 2:
                    message.nickname = reader.readString();
                    break;
                case 3:
                    message.password = reader.readString();
                    break;
                case 4:
                    message.confirmPassword = reader.readString();
                    break;
                case 5:
                    message.enabled = reader.readBool();
                    break;
                case 6:
                    message.email = reader.readString();
                    break;
                case 7:
                    message.avatar = reader.readString();
                    break;
                case 8:
                    message.adminId = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReqAdminUserEdit {
        return ReqAdminUserEdit.deserialize(bytes);
    }
}
export class RespAdminUserEditData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): RespAdminUserEditData {
        const message = new RespAdminUserEditData({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespAdminUserEditData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RespAdminUserEditData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RespAdminUserEditData {
        return RespAdminUserEditData.deserialize(bytes);
    }
}
export class ReqAdminUserEnabled extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        adminId?: number;
        enabled?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("adminId" in data && data.adminId != undefined) {
                this.adminId = data.adminId;
            }
            if ("enabled" in data && data.enabled != undefined) {
                this.enabled = data.enabled;
            }
        }
    }
    get adminId() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set adminId(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get enabled() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set enabled(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        adminId?: number;
        enabled?: boolean;
    }): ReqAdminUserEnabled {
        const message = new ReqAdminUserEnabled({});
        if (data.adminId != null) {
            message.adminId = data.adminId;
        }
        if (data.enabled != null) {
            message.enabled = data.enabled;
        }
        return message;
    }
    toObject() {
        const data: {
            adminId?: number;
            enabled?: boolean;
        } = {};
        if (this.adminId != null) {
            data.adminId = this.adminId;
        }
        if (this.enabled != null) {
            data.enabled = this.enabled;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.adminId != 0)
            writer.writeInt32(1, this.adminId);
        if (this.enabled != false)
            writer.writeBool(2, this.enabled);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqAdminUserEnabled {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReqAdminUserEnabled();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.adminId = reader.readInt32();
                    break;
                case 2:
                    message.enabled = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReqAdminUserEnabled {
        return ReqAdminUserEnabled.deserialize(bytes);
    }
}
export class RespAdminUserEnabledData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): RespAdminUserEnabledData {
        const message = new RespAdminUserEnabledData({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespAdminUserEnabledData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RespAdminUserEnabledData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RespAdminUserEnabledData {
        return RespAdminUserEnabledData.deserialize(bytes);
    }
}
export class ReqAdminUserDelete extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        adminId?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("adminId" in data && data.adminId != undefined) {
                this.adminId = data.adminId;
            }
        }
    }
    get adminId() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set adminId(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        adminId?: number;
    }): ReqAdminUserDelete {
        const message = new ReqAdminUserDelete({});
        if (data.adminId != null) {
            message.adminId = data.adminId;
        }
        return message;
    }
    toObject() {
        const data: {
            adminId?: number;
        } = {};
        if (this.adminId != null) {
            data.adminId = this.adminId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.adminId != 0)
            writer.writeInt32(1, this.adminId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqAdminUserDelete {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReqAdminUserDelete();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.adminId = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReqAdminUserDelete {
        return ReqAdminUserDelete.deserialize(bytes);
    }
}
export class RespAdminUserDeleteData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): RespAdminUserDeleteData {
        const message = new RespAdminUserDeleteData({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespAdminUserDeleteData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RespAdminUserDeleteData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RespAdminUserDeleteData {
        return RespAdminUserDeleteData.deserialize(bytes);
    }
}
export class ReqAdminUserBindRoles extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        adminId?: number;
        roleIds?: number[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("adminId" in data && data.adminId != undefined) {
                this.adminId = data.adminId;
            }
            if ("roleIds" in data && data.roleIds != undefined) {
                this.roleIds = data.roleIds;
            }
        }
    }
    get adminId() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set adminId(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get roleIds() {
        return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
    }
    set roleIds(value: number[]) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        adminId?: number;
        roleIds?: number[];
    }): ReqAdminUserBindRoles {
        const message = new ReqAdminUserBindRoles({});
        if (data.adminId != null) {
            message.adminId = data.adminId;
        }
        if (data.roleIds != null) {
            message.roleIds = data.roleIds;
        }
        return message;
    }
    toObject() {
        const data: {
            adminId?: number;
            roleIds?: number[];
        } = {};
        if (this.adminId != null) {
            data.adminId = this.adminId;
        }
        if (this.roleIds != null) {
            data.roleIds = this.roleIds;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.adminId != 0)
            writer.writeInt32(1, this.adminId);
        if (this.roleIds.length)
            writer.writePackedInt32(2, this.roleIds);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqAdminUserBindRoles {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReqAdminUserBindRoles();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.adminId = reader.readInt32();
                    break;
                case 2:
                    message.roleIds = reader.readPackedInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReqAdminUserBindRoles {
        return ReqAdminUserBindRoles.deserialize(bytes);
    }
}
export class RespAdminUserBindRolesData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): RespAdminUserBindRolesData {
        const message = new RespAdminUserBindRolesData({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespAdminUserBindRolesData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RespAdminUserBindRolesData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RespAdminUserBindRolesData {
        return RespAdminUserBindRolesData.deserialize(bytes);
    }
}
