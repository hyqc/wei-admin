// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v3.21.12
// source: admin_user.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { AdminUserModel } from "./admin_model";
import { AdminUserListItem, ReqListBase } from "./common";

export const protobufPackage = "admin";

/** 账号列表请求参数 */
export interface ReqAdminUserList {
  base?:
    | ReqListBase
    | undefined;
  /** 账号 */
  username?:
    | string
    | undefined;
  /** 昵称 */
  nickname?:
    | string
    | undefined;
  /** 邮箱 */
  email?:
    | string
    | undefined;
  /** 0全部，1启用，2禁用 */
  enabled?:
    | number
    | undefined;
  /** 角色ID */
  roleIds?: number[] | undefined;
}

export interface RespAdminUserListData {
  total?: number | undefined;
  pageNum?: number | undefined;
  pageSize?: number | undefined;
  list?: AdminUserListItem[] | undefined;
}

/** 账号详情 */
export interface ReqAdminUserInfo {
  /** 管理员ID */
  adminId?: number | undefined;
}

export interface RespAdminUserInfoData {
  data?: AdminUserModel | undefined;
}

/** 添加账号 */
export interface ReqAdminUserAdd {
  /** 账号 */
  username?:
    | string
    | undefined;
  /** 昵称 */
  nickname?:
    | string
    | undefined;
  /** 密码 */
  password?:
    | string
    | undefined;
  /** 确认密码 */
  confirmPassword?:
    | string
    | undefined;
  /** 账号启用状态 */
  enabled?:
    | boolean
    | undefined;
  /** 邮箱 */
  email?:
    | string
    | undefined;
  /** 头像地址 */
  avatar?: string | undefined;
}

export interface RespAdminUserAddData {
}

/** 账号编辑 */
export interface ReqAdminUserEdit {
  /** 管理员ID */
  adminId?:
    | number
    | undefined;
  /** 账号 */
  username?:
    | string
    | undefined;
  /** 昵称 */
  nickname?:
    | string
    | undefined;
  /** 账号启用状态 */
  enabled?:
    | boolean
    | undefined;
  /** 邮箱 */
  email?:
    | string
    | undefined;
  /** 头像地址 */
  avatar?: string | undefined;
}

export interface RespAdminUserEditData {
}

/** 账号编辑 */
export interface ReqAdminUserEditPassword {
  /** 管理员ID */
  adminId?:
    | number
    | undefined;
  /** 密码 */
  password?:
    | string
    | undefined;
  /** 确认密码 */
  confirmPassword?: string | undefined;
}

export interface RespAdminUserEditPasswordData {
}

/** 账号状态更改 */
export interface ReqAdminUserEnabled {
  /** 管理员ID */
  adminId?:
    | number
    | undefined;
  /** 账号启用状态 */
  enabled?: boolean | undefined;
}

export interface RespAdminUserEnabledData {
}

/** 删除账号 */
export interface ReqAdminUserDelete {
  /** 管理员ID */
  adminId?: number | undefined;
}

export interface RespAdminUserDeleteData {
}

/** 账号绑定角色 */
export interface ReqAdminUserBindRoles {
  /** 管理员ID */
  adminId?:
    | number
    | undefined;
  /** 角色ID列表 */
  roleIds?: number[] | undefined;
}

export interface RespAdminUserBindRolesData {
}

function createBaseReqAdminUserList(): ReqAdminUserList {
  return { base: undefined, username: "", nickname: "", email: "", enabled: 0, roleIds: [] };
}

export const ReqAdminUserList: MessageFns<ReqAdminUserList> = {
  encode(message: ReqAdminUserList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.base !== undefined) {
      ReqListBase.encode(message.base, writer.uint32(10).fork()).join();
    }
    if (message.username !== undefined && message.username !== "") {
      writer.uint32(18).string(message.username);
    }
    if (message.nickname !== undefined && message.nickname !== "") {
      writer.uint32(26).string(message.nickname);
    }
    if (message.email !== undefined && message.email !== "") {
      writer.uint32(34).string(message.email);
    }
    if (message.enabled !== undefined && message.enabled !== 0) {
      writer.uint32(40).int32(message.enabled);
    }
    if (message.roleIds !== undefined && message.roleIds.length !== 0) {
      writer.uint32(50).fork();
      for (const v of message.roleIds) {
        writer.int32(v);
      }
      writer.join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqAdminUserList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqAdminUserList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.base = ReqListBase.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.nickname = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.enabled = reader.int32();
          continue;
        }
        case 6: {
          if (tag === 48) {
            message.roleIds!.push(reader.int32());

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.roleIds!.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqAdminUserList {
    return {
      base: isSet(object.base) ? ReqListBase.fromJSON(object.base) : undefined,
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      nickname: isSet(object.nickname) ? globalThis.String(object.nickname) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      enabled: isSet(object.enabled) ? globalThis.Number(object.enabled) : 0,
      roleIds: globalThis.Array.isArray(object?.roleIds) ? object.roleIds.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: ReqAdminUserList): unknown {
    const obj: any = {};
    if (message.base !== undefined) {
      obj.base = ReqListBase.toJSON(message.base);
    }
    if (message.username !== undefined && message.username !== "") {
      obj.username = message.username;
    }
    if (message.nickname !== undefined && message.nickname !== "") {
      obj.nickname = message.nickname;
    }
    if (message.email !== undefined && message.email !== "") {
      obj.email = message.email;
    }
    if (message.enabled !== undefined && message.enabled !== 0) {
      obj.enabled = Math.round(message.enabled);
    }
    if (message.roleIds?.length) {
      obj.roleIds = message.roleIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqAdminUserList>, I>>(base?: I): ReqAdminUserList {
    return ReqAdminUserList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqAdminUserList>, I>>(object: I): ReqAdminUserList {
    const message = createBaseReqAdminUserList();
    message.base = (object.base !== undefined && object.base !== null)
      ? ReqListBase.fromPartial(object.base)
      : undefined;
    message.username = object.username ?? "";
    message.nickname = object.nickname ?? "";
    message.email = object.email ?? "";
    message.enabled = object.enabled ?? 0;
    message.roleIds = object.roleIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseRespAdminUserListData(): RespAdminUserListData {
  return { total: 0, pageNum: 0, pageSize: 0, list: [] };
}

export const RespAdminUserListData: MessageFns<RespAdminUserListData> = {
  encode(message: RespAdminUserListData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.total !== undefined && message.total !== 0) {
      writer.uint32(8).int64(message.total);
    }
    if (message.pageNum !== undefined && message.pageNum !== 0) {
      writer.uint32(16).int32(message.pageNum);
    }
    if (message.pageSize !== undefined && message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.list !== undefined && message.list.length !== 0) {
      for (const v of message.list) {
        AdminUserListItem.encode(v!, writer.uint32(34).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespAdminUserListData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespAdminUserListData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.total = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pageNum = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          const el = AdminUserListItem.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.list!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RespAdminUserListData {
    return {
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      pageNum: isSet(object.pageNum) ? globalThis.Number(object.pageNum) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      list: globalThis.Array.isArray(object?.list) ? object.list.map((e: any) => AdminUserListItem.fromJSON(e)) : [],
    };
  },

  toJSON(message: RespAdminUserListData): unknown {
    const obj: any = {};
    if (message.total !== undefined && message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    if (message.pageNum !== undefined && message.pageNum !== 0) {
      obj.pageNum = Math.round(message.pageNum);
    }
    if (message.pageSize !== undefined && message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.list?.length) {
      obj.list = message.list.map((e) => AdminUserListItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RespAdminUserListData>, I>>(base?: I): RespAdminUserListData {
    return RespAdminUserListData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespAdminUserListData>, I>>(object: I): RespAdminUserListData {
    const message = createBaseRespAdminUserListData();
    message.total = object.total ?? 0;
    message.pageNum = object.pageNum ?? 0;
    message.pageSize = object.pageSize ?? 0;
    message.list = object.list?.map((e) => AdminUserListItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReqAdminUserInfo(): ReqAdminUserInfo {
  return { adminId: 0 };
}

export const ReqAdminUserInfo: MessageFns<ReqAdminUserInfo> = {
  encode(message: ReqAdminUserInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.adminId !== undefined && message.adminId !== 0) {
      writer.uint32(8).int32(message.adminId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqAdminUserInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqAdminUserInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.adminId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqAdminUserInfo {
    return { adminId: isSet(object.adminId) ? globalThis.Number(object.adminId) : 0 };
  },

  toJSON(message: ReqAdminUserInfo): unknown {
    const obj: any = {};
    if (message.adminId !== undefined && message.adminId !== 0) {
      obj.adminId = Math.round(message.adminId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqAdminUserInfo>, I>>(base?: I): ReqAdminUserInfo {
    return ReqAdminUserInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqAdminUserInfo>, I>>(object: I): ReqAdminUserInfo {
    const message = createBaseReqAdminUserInfo();
    message.adminId = object.adminId ?? 0;
    return message;
  },
};

function createBaseRespAdminUserInfoData(): RespAdminUserInfoData {
  return { data: undefined };
}

export const RespAdminUserInfoData: MessageFns<RespAdminUserInfoData> = {
  encode(message: RespAdminUserInfoData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      AdminUserModel.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespAdminUserInfoData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespAdminUserInfoData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = AdminUserModel.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RespAdminUserInfoData {
    return { data: isSet(object.data) ? AdminUserModel.fromJSON(object.data) : undefined };
  },

  toJSON(message: RespAdminUserInfoData): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = AdminUserModel.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RespAdminUserInfoData>, I>>(base?: I): RespAdminUserInfoData {
    return RespAdminUserInfoData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespAdminUserInfoData>, I>>(object: I): RespAdminUserInfoData {
    const message = createBaseRespAdminUserInfoData();
    message.data = (object.data !== undefined && object.data !== null)
      ? AdminUserModel.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseReqAdminUserAdd(): ReqAdminUserAdd {
  return { username: "", nickname: "", password: "", confirmPassword: "", enabled: false, email: "", avatar: "" };
}

export const ReqAdminUserAdd: MessageFns<ReqAdminUserAdd> = {
  encode(message: ReqAdminUserAdd, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.username !== undefined && message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    if (message.nickname !== undefined && message.nickname !== "") {
      writer.uint32(18).string(message.nickname);
    }
    if (message.password !== undefined && message.password !== "") {
      writer.uint32(26).string(message.password);
    }
    if (message.confirmPassword !== undefined && message.confirmPassword !== "") {
      writer.uint32(34).string(message.confirmPassword);
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      writer.uint32(40).bool(message.enabled);
    }
    if (message.email !== undefined && message.email !== "") {
      writer.uint32(50).string(message.email);
    }
    if (message.avatar !== undefined && message.avatar !== "") {
      writer.uint32(58).string(message.avatar);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqAdminUserAdd {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqAdminUserAdd();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nickname = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.confirmPassword = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.avatar = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqAdminUserAdd {
    return {
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      nickname: isSet(object.nickname) ? globalThis.String(object.nickname) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      confirmPassword: isSet(object.confirmPassword) ? globalThis.String(object.confirmPassword) : "",
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
    };
  },

  toJSON(message: ReqAdminUserAdd): unknown {
    const obj: any = {};
    if (message.username !== undefined && message.username !== "") {
      obj.username = message.username;
    }
    if (message.nickname !== undefined && message.nickname !== "") {
      obj.nickname = message.nickname;
    }
    if (message.password !== undefined && message.password !== "") {
      obj.password = message.password;
    }
    if (message.confirmPassword !== undefined && message.confirmPassword !== "") {
      obj.confirmPassword = message.confirmPassword;
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    if (message.email !== undefined && message.email !== "") {
      obj.email = message.email;
    }
    if (message.avatar !== undefined && message.avatar !== "") {
      obj.avatar = message.avatar;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqAdminUserAdd>, I>>(base?: I): ReqAdminUserAdd {
    return ReqAdminUserAdd.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqAdminUserAdd>, I>>(object: I): ReqAdminUserAdd {
    const message = createBaseReqAdminUserAdd();
    message.username = object.username ?? "";
    message.nickname = object.nickname ?? "";
    message.password = object.password ?? "";
    message.confirmPassword = object.confirmPassword ?? "";
    message.enabled = object.enabled ?? false;
    message.email = object.email ?? "";
    message.avatar = object.avatar ?? "";
    return message;
  },
};

function createBaseRespAdminUserAddData(): RespAdminUserAddData {
  return {};
}

export const RespAdminUserAddData: MessageFns<RespAdminUserAddData> = {
  encode(_: RespAdminUserAddData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespAdminUserAddData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespAdminUserAddData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespAdminUserAddData {
    return {};
  },

  toJSON(_: RespAdminUserAddData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespAdminUserAddData>, I>>(base?: I): RespAdminUserAddData {
    return RespAdminUserAddData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespAdminUserAddData>, I>>(_: I): RespAdminUserAddData {
    const message = createBaseRespAdminUserAddData();
    return message;
  },
};

function createBaseReqAdminUserEdit(): ReqAdminUserEdit {
  return { adminId: 0, username: "", nickname: "", enabled: false, email: "", avatar: "" };
}

export const ReqAdminUserEdit: MessageFns<ReqAdminUserEdit> = {
  encode(message: ReqAdminUserEdit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.adminId !== undefined && message.adminId !== 0) {
      writer.uint32(8).int32(message.adminId);
    }
    if (message.username !== undefined && message.username !== "") {
      writer.uint32(18).string(message.username);
    }
    if (message.nickname !== undefined && message.nickname !== "") {
      writer.uint32(26).string(message.nickname);
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      writer.uint32(32).bool(message.enabled);
    }
    if (message.email !== undefined && message.email !== "") {
      writer.uint32(42).string(message.email);
    }
    if (message.avatar !== undefined && message.avatar !== "") {
      writer.uint32(50).string(message.avatar);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqAdminUserEdit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqAdminUserEdit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.adminId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.nickname = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.avatar = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqAdminUserEdit {
    return {
      adminId: isSet(object.adminId) ? globalThis.Number(object.adminId) : 0,
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      nickname: isSet(object.nickname) ? globalThis.String(object.nickname) : "",
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
    };
  },

  toJSON(message: ReqAdminUserEdit): unknown {
    const obj: any = {};
    if (message.adminId !== undefined && message.adminId !== 0) {
      obj.adminId = Math.round(message.adminId);
    }
    if (message.username !== undefined && message.username !== "") {
      obj.username = message.username;
    }
    if (message.nickname !== undefined && message.nickname !== "") {
      obj.nickname = message.nickname;
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    if (message.email !== undefined && message.email !== "") {
      obj.email = message.email;
    }
    if (message.avatar !== undefined && message.avatar !== "") {
      obj.avatar = message.avatar;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqAdminUserEdit>, I>>(base?: I): ReqAdminUserEdit {
    return ReqAdminUserEdit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqAdminUserEdit>, I>>(object: I): ReqAdminUserEdit {
    const message = createBaseReqAdminUserEdit();
    message.adminId = object.adminId ?? 0;
    message.username = object.username ?? "";
    message.nickname = object.nickname ?? "";
    message.enabled = object.enabled ?? false;
    message.email = object.email ?? "";
    message.avatar = object.avatar ?? "";
    return message;
  },
};

function createBaseRespAdminUserEditData(): RespAdminUserEditData {
  return {};
}

export const RespAdminUserEditData: MessageFns<RespAdminUserEditData> = {
  encode(_: RespAdminUserEditData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespAdminUserEditData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespAdminUserEditData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespAdminUserEditData {
    return {};
  },

  toJSON(_: RespAdminUserEditData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespAdminUserEditData>, I>>(base?: I): RespAdminUserEditData {
    return RespAdminUserEditData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespAdminUserEditData>, I>>(_: I): RespAdminUserEditData {
    const message = createBaseRespAdminUserEditData();
    return message;
  },
};

function createBaseReqAdminUserEditPassword(): ReqAdminUserEditPassword {
  return { adminId: 0, password: "", confirmPassword: "" };
}

export const ReqAdminUserEditPassword: MessageFns<ReqAdminUserEditPassword> = {
  encode(message: ReqAdminUserEditPassword, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.adminId !== undefined && message.adminId !== 0) {
      writer.uint32(8).int32(message.adminId);
    }
    if (message.password !== undefined && message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    if (message.confirmPassword !== undefined && message.confirmPassword !== "") {
      writer.uint32(26).string(message.confirmPassword);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqAdminUserEditPassword {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqAdminUserEditPassword();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.adminId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.confirmPassword = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqAdminUserEditPassword {
    return {
      adminId: isSet(object.adminId) ? globalThis.Number(object.adminId) : 0,
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      confirmPassword: isSet(object.confirmPassword) ? globalThis.String(object.confirmPassword) : "",
    };
  },

  toJSON(message: ReqAdminUserEditPassword): unknown {
    const obj: any = {};
    if (message.adminId !== undefined && message.adminId !== 0) {
      obj.adminId = Math.round(message.adminId);
    }
    if (message.password !== undefined && message.password !== "") {
      obj.password = message.password;
    }
    if (message.confirmPassword !== undefined && message.confirmPassword !== "") {
      obj.confirmPassword = message.confirmPassword;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqAdminUserEditPassword>, I>>(base?: I): ReqAdminUserEditPassword {
    return ReqAdminUserEditPassword.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqAdminUserEditPassword>, I>>(object: I): ReqAdminUserEditPassword {
    const message = createBaseReqAdminUserEditPassword();
    message.adminId = object.adminId ?? 0;
    message.password = object.password ?? "";
    message.confirmPassword = object.confirmPassword ?? "";
    return message;
  },
};

function createBaseRespAdminUserEditPasswordData(): RespAdminUserEditPasswordData {
  return {};
}

export const RespAdminUserEditPasswordData: MessageFns<RespAdminUserEditPasswordData> = {
  encode(_: RespAdminUserEditPasswordData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespAdminUserEditPasswordData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespAdminUserEditPasswordData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespAdminUserEditPasswordData {
    return {};
  },

  toJSON(_: RespAdminUserEditPasswordData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespAdminUserEditPasswordData>, I>>(base?: I): RespAdminUserEditPasswordData {
    return RespAdminUserEditPasswordData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespAdminUserEditPasswordData>, I>>(_: I): RespAdminUserEditPasswordData {
    const message = createBaseRespAdminUserEditPasswordData();
    return message;
  },
};

function createBaseReqAdminUserEnabled(): ReqAdminUserEnabled {
  return { adminId: 0, enabled: false };
}

export const ReqAdminUserEnabled: MessageFns<ReqAdminUserEnabled> = {
  encode(message: ReqAdminUserEnabled, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.adminId !== undefined && message.adminId !== 0) {
      writer.uint32(8).int32(message.adminId);
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      writer.uint32(16).bool(message.enabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqAdminUserEnabled {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqAdminUserEnabled();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.adminId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqAdminUserEnabled {
    return {
      adminId: isSet(object.adminId) ? globalThis.Number(object.adminId) : 0,
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
    };
  },

  toJSON(message: ReqAdminUserEnabled): unknown {
    const obj: any = {};
    if (message.adminId !== undefined && message.adminId !== 0) {
      obj.adminId = Math.round(message.adminId);
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqAdminUserEnabled>, I>>(base?: I): ReqAdminUserEnabled {
    return ReqAdminUserEnabled.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqAdminUserEnabled>, I>>(object: I): ReqAdminUserEnabled {
    const message = createBaseReqAdminUserEnabled();
    message.adminId = object.adminId ?? 0;
    message.enabled = object.enabled ?? false;
    return message;
  },
};

function createBaseRespAdminUserEnabledData(): RespAdminUserEnabledData {
  return {};
}

export const RespAdminUserEnabledData: MessageFns<RespAdminUserEnabledData> = {
  encode(_: RespAdminUserEnabledData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespAdminUserEnabledData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespAdminUserEnabledData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespAdminUserEnabledData {
    return {};
  },

  toJSON(_: RespAdminUserEnabledData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespAdminUserEnabledData>, I>>(base?: I): RespAdminUserEnabledData {
    return RespAdminUserEnabledData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespAdminUserEnabledData>, I>>(_: I): RespAdminUserEnabledData {
    const message = createBaseRespAdminUserEnabledData();
    return message;
  },
};

function createBaseReqAdminUserDelete(): ReqAdminUserDelete {
  return { adminId: 0 };
}

export const ReqAdminUserDelete: MessageFns<ReqAdminUserDelete> = {
  encode(message: ReqAdminUserDelete, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.adminId !== undefined && message.adminId !== 0) {
      writer.uint32(8).int32(message.adminId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqAdminUserDelete {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqAdminUserDelete();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.adminId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqAdminUserDelete {
    return { adminId: isSet(object.adminId) ? globalThis.Number(object.adminId) : 0 };
  },

  toJSON(message: ReqAdminUserDelete): unknown {
    const obj: any = {};
    if (message.adminId !== undefined && message.adminId !== 0) {
      obj.adminId = Math.round(message.adminId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqAdminUserDelete>, I>>(base?: I): ReqAdminUserDelete {
    return ReqAdminUserDelete.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqAdminUserDelete>, I>>(object: I): ReqAdminUserDelete {
    const message = createBaseReqAdminUserDelete();
    message.adminId = object.adminId ?? 0;
    return message;
  },
};

function createBaseRespAdminUserDeleteData(): RespAdminUserDeleteData {
  return {};
}

export const RespAdminUserDeleteData: MessageFns<RespAdminUserDeleteData> = {
  encode(_: RespAdminUserDeleteData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespAdminUserDeleteData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespAdminUserDeleteData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespAdminUserDeleteData {
    return {};
  },

  toJSON(_: RespAdminUserDeleteData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespAdminUserDeleteData>, I>>(base?: I): RespAdminUserDeleteData {
    return RespAdminUserDeleteData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespAdminUserDeleteData>, I>>(_: I): RespAdminUserDeleteData {
    const message = createBaseRespAdminUserDeleteData();
    return message;
  },
};

function createBaseReqAdminUserBindRoles(): ReqAdminUserBindRoles {
  return { adminId: 0, roleIds: [] };
}

export const ReqAdminUserBindRoles: MessageFns<ReqAdminUserBindRoles> = {
  encode(message: ReqAdminUserBindRoles, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.adminId !== undefined && message.adminId !== 0) {
      writer.uint32(8).int32(message.adminId);
    }
    if (message.roleIds !== undefined && message.roleIds.length !== 0) {
      writer.uint32(18).fork();
      for (const v of message.roleIds) {
        writer.int32(v);
      }
      writer.join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqAdminUserBindRoles {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqAdminUserBindRoles();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.adminId = reader.int32();
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.roleIds!.push(reader.int32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.roleIds!.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqAdminUserBindRoles {
    return {
      adminId: isSet(object.adminId) ? globalThis.Number(object.adminId) : 0,
      roleIds: globalThis.Array.isArray(object?.roleIds) ? object.roleIds.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: ReqAdminUserBindRoles): unknown {
    const obj: any = {};
    if (message.adminId !== undefined && message.adminId !== 0) {
      obj.adminId = Math.round(message.adminId);
    }
    if (message.roleIds?.length) {
      obj.roleIds = message.roleIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqAdminUserBindRoles>, I>>(base?: I): ReqAdminUserBindRoles {
    return ReqAdminUserBindRoles.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqAdminUserBindRoles>, I>>(object: I): ReqAdminUserBindRoles {
    const message = createBaseReqAdminUserBindRoles();
    message.adminId = object.adminId ?? 0;
    message.roleIds = object.roleIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseRespAdminUserBindRolesData(): RespAdminUserBindRolesData {
  return {};
}

export const RespAdminUserBindRolesData: MessageFns<RespAdminUserBindRolesData> = {
  encode(_: RespAdminUserBindRolesData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespAdminUserBindRolesData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespAdminUserBindRolesData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespAdminUserBindRolesData {
    return {};
  },

  toJSON(_: RespAdminUserBindRolesData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespAdminUserBindRolesData>, I>>(base?: I): RespAdminUserBindRolesData {
    return RespAdminUserBindRolesData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespAdminUserBindRolesData>, I>>(_: I): RespAdminUserBindRolesData {
    const message = createBaseRespAdminUserBindRolesData();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
