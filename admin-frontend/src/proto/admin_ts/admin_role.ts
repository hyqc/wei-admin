/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: admin_role.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./common";
import * as pb_1 from "google-protobuf";
export class ReqRoleList extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        base?: dependency_1.ReqListBase;
        id?: number;
        name?: string;
        enabled?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("base" in data && data.base != undefined) {
                this.base = data.base;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("enabled" in data && data.enabled != undefined) {
                this.enabled = data.enabled;
            }
        }
    }
    get base() {
        return pb_1.Message.getWrapperField(this, dependency_1.ReqListBase, 1) as dependency_1.ReqListBase;
    }
    set base(value: dependency_1.ReqListBase) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasBase() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get enabled() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set enabled(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        base?: ReturnType<typeof dependency_1.ReqListBase.prototype.toObject>;
        id?: number;
        name?: string;
        enabled?: number;
    }): ReqRoleList {
        const message = new ReqRoleList({});
        if (data.base != null) {
            message.base = dependency_1.ReqListBase.fromObject(data.base);
        }
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.enabled != null) {
            message.enabled = data.enabled;
        }
        return message;
    }
    toObject() {
        const data: {
            base?: ReturnType<typeof dependency_1.ReqListBase.prototype.toObject>;
            id?: number;
            name?: string;
            enabled?: number;
        } = {};
        if (this.base != null) {
            data.base = this.base.toObject();
        }
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.enabled != null) {
            data.enabled = this.enabled;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasBase)
            writer.writeMessage(1, this.base, () => this.base.serialize(writer));
        if (this.id != 0)
            writer.writeInt32(2, this.id);
        if (this.name.length)
            writer.writeString(3, this.name);
        if (this.enabled != 0)
            writer.writeInt32(4, this.enabled);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqRoleList {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReqRoleList();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.base, () => message.base = dependency_1.ReqListBase.deserialize(reader));
                    break;
                case 2:
                    message.id = reader.readInt32();
                    break;
                case 3:
                    message.name = reader.readString();
                    break;
                case 4:
                    message.enabled = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReqRoleList {
        return ReqRoleList.deserialize(bytes);
    }
}
export class RespRoleListData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        total?: number;
        list?: RoleItem[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("total" in data && data.total != undefined) {
                this.total = data.total;
            }
            if ("list" in data && data.list != undefined) {
                this.list = data.list;
            }
        }
    }
    get total() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set total(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get list() {
        return pb_1.Message.getRepeatedWrapperField(this, RoleItem, 2) as RoleItem[];
    }
    set list(value: RoleItem[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        total?: number;
        list?: ReturnType<typeof RoleItem.prototype.toObject>[];
    }): RespRoleListData {
        const message = new RespRoleListData({});
        if (data.total != null) {
            message.total = data.total;
        }
        if (data.list != null) {
            message.list = data.list.map(item => RoleItem.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            total?: number;
            list?: ReturnType<typeof RoleItem.prototype.toObject>[];
        } = {};
        if (this.total != null) {
            data.total = this.total;
        }
        if (this.list != null) {
            data.list = this.list.map((item: RoleItem) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.total != 0)
            writer.writeInt64(1, this.total);
        if (this.list.length)
            writer.writeRepeatedMessage(2, this.list, (item: RoleItem) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespRoleListData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RespRoleListData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.total = reader.readInt64();
                    break;
                case 2:
                    reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 2, RoleItem.deserialize(reader), RoleItem));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RespRoleListData {
        return RespRoleListData.deserialize(bytes);
    }
}
export class ReqRoleAll extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        name?: string;
        enabled?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("enabled" in data && data.enabled != undefined) {
                this.enabled = data.enabled;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get enabled() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set enabled(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        id?: number;
        name?: string;
        enabled?: number;
    }): ReqRoleAll {
        const message = new ReqRoleAll({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.enabled != null) {
            message.enabled = data.enabled;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            name?: string;
            enabled?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.enabled != null) {
            data.enabled = this.enabled;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.enabled != 0)
            writer.writeInt32(3, this.enabled);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqRoleAll {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReqRoleAll();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.enabled = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReqRoleAll {
        return ReqRoleAll.deserialize(bytes);
    }
}
export class RespRoleAll extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): RespRoleAll {
        const message = new RespRoleAll({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespRoleAll {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RespRoleAll();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RespRoleAll {
        return RespRoleAll.deserialize(bytes);
    }
}
export class ReqRoleAdd extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
        describe?: string;
        enabled?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("describe" in data && data.describe != undefined) {
                this.describe = data.describe;
            }
            if ("enabled" in data && data.enabled != undefined) {
                this.enabled = data.enabled;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get describe() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set describe(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get enabled() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set enabled(value: boolean) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        name?: string;
        describe?: string;
        enabled?: boolean;
    }): ReqRoleAdd {
        const message = new ReqRoleAdd({});
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.describe != null) {
            message.describe = data.describe;
        }
        if (data.enabled != null) {
            message.enabled = data.enabled;
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
            describe?: string;
            enabled?: boolean;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.describe != null) {
            data.describe = this.describe;
        }
        if (this.enabled != null) {
            data.enabled = this.enabled;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (this.describe.length)
            writer.writeString(2, this.describe);
        if (this.enabled != false)
            writer.writeBool(3, this.enabled);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqRoleAdd {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReqRoleAdd();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.describe = reader.readString();
                    break;
                case 3:
                    message.enabled = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReqRoleAdd {
        return ReqRoleAdd.deserialize(bytes);
    }
}
export class RoleAddResp extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): RoleAddResp {
        const message = new RoleAddResp({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RoleAddResp {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RoleAddResp();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RoleAddResp {
        return RoleAddResp.deserialize(bytes);
    }
}
export class ReqRoleInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        id?: number;
    }): ReqRoleInfo {
        const message = new ReqRoleInfo({});
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqRoleInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReqRoleInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReqRoleInfo {
        return ReqRoleInfo.deserialize(bytes);
    }
}
export class RespRoleInfoData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        name?: string;
        describe?: string;
        enabled?: boolean;
        createAdminId?: number;
        createAdminName?: string;
        modifyAdminId?: number;
        modifyAdminName?: string;
        createdAt?: string;
        updatedAt?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("describe" in data && data.describe != undefined) {
                this.describe = data.describe;
            }
            if ("enabled" in data && data.enabled != undefined) {
                this.enabled = data.enabled;
            }
            if ("createAdminId" in data && data.createAdminId != undefined) {
                this.createAdminId = data.createAdminId;
            }
            if ("createAdminName" in data && data.createAdminName != undefined) {
                this.createAdminName = data.createAdminName;
            }
            if ("modifyAdminId" in data && data.modifyAdminId != undefined) {
                this.modifyAdminId = data.modifyAdminId;
            }
            if ("modifyAdminName" in data && data.modifyAdminName != undefined) {
                this.modifyAdminName = data.modifyAdminName;
            }
            if ("createdAt" in data && data.createdAt != undefined) {
                this.createdAt = data.createdAt;
            }
            if ("updatedAt" in data && data.updatedAt != undefined) {
                this.updatedAt = data.updatedAt;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get describe() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set describe(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get enabled() {
        return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set enabled(value: boolean) {
        pb_1.Message.setField(this, 4, value);
    }
    get createAdminId() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set createAdminId(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get createAdminName() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set createAdminName(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get modifyAdminId() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set modifyAdminId(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get modifyAdminName() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set modifyAdminName(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get createdAt() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set createdAt(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get updatedAt() {
        return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
    }
    set updatedAt(value: string) {
        pb_1.Message.setField(this, 10, value);
    }
    static fromObject(data: {
        id?: number;
        name?: string;
        describe?: string;
        enabled?: boolean;
        createAdminId?: number;
        createAdminName?: string;
        modifyAdminId?: number;
        modifyAdminName?: string;
        createdAt?: string;
        updatedAt?: string;
    }): RespRoleInfoData {
        const message = new RespRoleInfoData({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.describe != null) {
            message.describe = data.describe;
        }
        if (data.enabled != null) {
            message.enabled = data.enabled;
        }
        if (data.createAdminId != null) {
            message.createAdminId = data.createAdminId;
        }
        if (data.createAdminName != null) {
            message.createAdminName = data.createAdminName;
        }
        if (data.modifyAdminId != null) {
            message.modifyAdminId = data.modifyAdminId;
        }
        if (data.modifyAdminName != null) {
            message.modifyAdminName = data.modifyAdminName;
        }
        if (data.createdAt != null) {
            message.createdAt = data.createdAt;
        }
        if (data.updatedAt != null) {
            message.updatedAt = data.updatedAt;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            name?: string;
            describe?: string;
            enabled?: boolean;
            createAdminId?: number;
            createAdminName?: string;
            modifyAdminId?: number;
            modifyAdminName?: string;
            createdAt?: string;
            updatedAt?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.describe != null) {
            data.describe = this.describe;
        }
        if (this.enabled != null) {
            data.enabled = this.enabled;
        }
        if (this.createAdminId != null) {
            data.createAdminId = this.createAdminId;
        }
        if (this.createAdminName != null) {
            data.createAdminName = this.createAdminName;
        }
        if (this.modifyAdminId != null) {
            data.modifyAdminId = this.modifyAdminId;
        }
        if (this.modifyAdminName != null) {
            data.modifyAdminName = this.modifyAdminName;
        }
        if (this.createdAt != null) {
            data.createdAt = this.createdAt;
        }
        if (this.updatedAt != null) {
            data.updatedAt = this.updatedAt;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.describe.length)
            writer.writeString(3, this.describe);
        if (this.enabled != false)
            writer.writeBool(4, this.enabled);
        if (this.createAdminId != 0)
            writer.writeInt32(5, this.createAdminId);
        if (this.createAdminName.length)
            writer.writeString(6, this.createAdminName);
        if (this.modifyAdminId != 0)
            writer.writeInt32(7, this.modifyAdminId);
        if (this.modifyAdminName.length)
            writer.writeString(8, this.modifyAdminName);
        if (this.createdAt.length)
            writer.writeString(9, this.createdAt);
        if (this.updatedAt.length)
            writer.writeString(10, this.updatedAt);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespRoleInfoData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RespRoleInfoData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.describe = reader.readString();
                    break;
                case 4:
                    message.enabled = reader.readBool();
                    break;
                case 5:
                    message.createAdminId = reader.readInt32();
                    break;
                case 6:
                    message.createAdminName = reader.readString();
                    break;
                case 7:
                    message.modifyAdminId = reader.readInt32();
                    break;
                case 8:
                    message.modifyAdminName = reader.readString();
                    break;
                case 9:
                    message.createdAt = reader.readString();
                    break;
                case 10:
                    message.updatedAt = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RespRoleInfoData {
        return RespRoleInfoData.deserialize(bytes);
    }
}
export class ReqRoleEdit extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        name?: string;
        describe?: string;
        enabled?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("describe" in data && data.describe != undefined) {
                this.describe = data.describe;
            }
            if ("enabled" in data && data.enabled != undefined) {
                this.enabled = data.enabled;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get describe() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set describe(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get enabled() {
        return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set enabled(value: boolean) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        id?: number;
        name?: string;
        describe?: string;
        enabled?: boolean;
    }): ReqRoleEdit {
        const message = new ReqRoleEdit({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.describe != null) {
            message.describe = data.describe;
        }
        if (data.enabled != null) {
            message.enabled = data.enabled;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            name?: string;
            describe?: string;
            enabled?: boolean;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.describe != null) {
            data.describe = this.describe;
        }
        if (this.enabled != null) {
            data.enabled = this.enabled;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.describe.length)
            writer.writeString(3, this.describe);
        if (this.enabled != false)
            writer.writeBool(4, this.enabled);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqRoleEdit {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReqRoleEdit();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.describe = reader.readString();
                    break;
                case 4:
                    message.enabled = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReqRoleEdit {
        return ReqRoleEdit.deserialize(bytes);
    }
}
export class RespRoleEditData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): RespRoleEditData {
        const message = new RespRoleEditData({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespRoleEditData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RespRoleEditData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RespRoleEditData {
        return RespRoleEditData.deserialize(bytes);
    }
}
export class ReqRoleEnable extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        enabled?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("enabled" in data && data.enabled != undefined) {
                this.enabled = data.enabled;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get enabled() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set enabled(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        id?: number;
        enabled?: boolean;
    }): ReqRoleEnable {
        const message = new ReqRoleEnable({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.enabled != null) {
            message.enabled = data.enabled;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            enabled?: boolean;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.enabled != null) {
            data.enabled = this.enabled;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (this.enabled != false)
            writer.writeBool(2, this.enabled);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqRoleEnable {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReqRoleEnable();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                case 2:
                    message.enabled = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReqRoleEnable {
        return ReqRoleEnable.deserialize(bytes);
    }
}
export class RespRoleEnableData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): RespRoleEnableData {
        const message = new RespRoleEnableData({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespRoleEnableData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RespRoleEnableData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RespRoleEnableData {
        return RespRoleEnableData.deserialize(bytes);
    }
}
export class ReqRoleDelete extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        permissionIds?: number[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("permissionIds" in data && data.permissionIds != undefined) {
                this.permissionIds = data.permissionIds;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get permissionIds() {
        return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
    }
    set permissionIds(value: number[]) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        id?: number;
        permissionIds?: number[];
    }): ReqRoleDelete {
        const message = new ReqRoleDelete({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.permissionIds != null) {
            message.permissionIds = data.permissionIds;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            permissionIds?: number[];
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.permissionIds != null) {
            data.permissionIds = this.permissionIds;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (this.permissionIds.length)
            writer.writePackedInt32(2, this.permissionIds);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqRoleDelete {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReqRoleDelete();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                case 2:
                    message.permissionIds = reader.readPackedInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReqRoleDelete {
        return ReqRoleDelete.deserialize(bytes);
    }
}
export class RespRoleDeleteData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): RespRoleDeleteData {
        const message = new RespRoleDeleteData({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespRoleDeleteData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RespRoleDeleteData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RespRoleDeleteData {
        return RespRoleDeleteData.deserialize(bytes);
    }
}
export class ReqRoleBindPermissions extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        permissionIds?: number[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("permissionIds" in data && data.permissionIds != undefined) {
                this.permissionIds = data.permissionIds;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get permissionIds() {
        return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
    }
    set permissionIds(value: number[]) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        id?: number;
        permissionIds?: number[];
    }): ReqRoleBindPermissions {
        const message = new ReqRoleBindPermissions({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.permissionIds != null) {
            message.permissionIds = data.permissionIds;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            permissionIds?: number[];
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.permissionIds != null) {
            data.permissionIds = this.permissionIds;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (this.permissionIds.length)
            writer.writePackedInt32(2, this.permissionIds);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqRoleBindPermissions {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReqRoleBindPermissions();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                case 2:
                    message.permissionIds = reader.readPackedInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReqRoleBindPermissions {
        return ReqRoleBindPermissions.deserialize(bytes);
    }
}
export class RespRoleBindPermissionsData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): RespRoleBindPermissionsData {
        const message = new RespRoleBindPermissionsData({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespRoleBindPermissionsData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RespRoleBindPermissionsData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RespRoleBindPermissionsData {
        return RespRoleBindPermissionsData.deserialize(bytes);
    }
}
export class ReqRolePermissions extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        id?: number;
    }): ReqRolePermissions {
        const message = new ReqRolePermissions({});
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqRolePermissions {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReqRolePermissions();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReqRolePermissions {
        return ReqRolePermissions.deserialize(bytes);
    }
}
export class RespRolePermissionsData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        list?: RolePermissionItem[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("list" in data && data.list != undefined) {
                this.list = data.list;
            }
        }
    }
    get list() {
        return pb_1.Message.getRepeatedWrapperField(this, RolePermissionItem, 1) as RolePermissionItem[];
    }
    set list(value: RolePermissionItem[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        list?: ReturnType<typeof RolePermissionItem.prototype.toObject>[];
    }): RespRolePermissionsData {
        const message = new RespRolePermissionsData({});
        if (data.list != null) {
            message.list = data.list.map(item => RolePermissionItem.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            list?: ReturnType<typeof RolePermissionItem.prototype.toObject>[];
        } = {};
        if (this.list != null) {
            data.list = this.list.map((item: RolePermissionItem) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.list.length)
            writer.writeRepeatedMessage(1, this.list, (item: RolePermissionItem) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespRolePermissionsData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RespRolePermissionsData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 1, RolePermissionItem.deserialize(reader), RolePermissionItem));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RespRolePermissionsData {
        return RespRolePermissionsData.deserialize(bytes);
    }
}
export class RoleItem extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        name?: string;
        roleName?: string;
        createAdminId?: number;
        createAdminName?: string;
        enabled?: boolean;
        createdAt?: string;
        updatedAt?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("roleName" in data && data.roleName != undefined) {
                this.roleName = data.roleName;
            }
            if ("createAdminId" in data && data.createAdminId != undefined) {
                this.createAdminId = data.createAdminId;
            }
            if ("createAdminName" in data && data.createAdminName != undefined) {
                this.createAdminName = data.createAdminName;
            }
            if ("enabled" in data && data.enabled != undefined) {
                this.enabled = data.enabled;
            }
            if ("createdAt" in data && data.createdAt != undefined) {
                this.createdAt = data.createdAt;
            }
            if ("updatedAt" in data && data.updatedAt != undefined) {
                this.updatedAt = data.updatedAt;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get roleName() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set roleName(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get createAdminId() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set createAdminId(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get createAdminName() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set createAdminName(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get enabled() {
        return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
    }
    set enabled(value: boolean) {
        pb_1.Message.setField(this, 6, value);
    }
    get createdAt() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set createdAt(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get updatedAt() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set updatedAt(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        id?: number;
        name?: string;
        roleName?: string;
        createAdminId?: number;
        createAdminName?: string;
        enabled?: boolean;
        createdAt?: string;
        updatedAt?: string;
    }): RoleItem {
        const message = new RoleItem({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.roleName != null) {
            message.roleName = data.roleName;
        }
        if (data.createAdminId != null) {
            message.createAdminId = data.createAdminId;
        }
        if (data.createAdminName != null) {
            message.createAdminName = data.createAdminName;
        }
        if (data.enabled != null) {
            message.enabled = data.enabled;
        }
        if (data.createdAt != null) {
            message.createdAt = data.createdAt;
        }
        if (data.updatedAt != null) {
            message.updatedAt = data.updatedAt;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            name?: string;
            roleName?: string;
            createAdminId?: number;
            createAdminName?: string;
            enabled?: boolean;
            createdAt?: string;
            updatedAt?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.roleName != null) {
            data.roleName = this.roleName;
        }
        if (this.createAdminId != null) {
            data.createAdminId = this.createAdminId;
        }
        if (this.createAdminName != null) {
            data.createAdminName = this.createAdminName;
        }
        if (this.enabled != null) {
            data.enabled = this.enabled;
        }
        if (this.createdAt != null) {
            data.createdAt = this.createdAt;
        }
        if (this.updatedAt != null) {
            data.updatedAt = this.updatedAt;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.roleName.length)
            writer.writeString(3, this.roleName);
        if (this.createAdminId != 0)
            writer.writeInt32(4, this.createAdminId);
        if (this.createAdminName.length)
            writer.writeString(5, this.createAdminName);
        if (this.enabled != false)
            writer.writeBool(6, this.enabled);
        if (this.createdAt.length)
            writer.writeString(7, this.createdAt);
        if (this.updatedAt.length)
            writer.writeString(8, this.updatedAt);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RoleItem {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RoleItem();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.roleName = reader.readString();
                    break;
                case 4:
                    message.createAdminId = reader.readInt32();
                    break;
                case 5:
                    message.createAdminName = reader.readString();
                    break;
                case 6:
                    message.enabled = reader.readBool();
                    break;
                case 7:
                    message.createdAt = reader.readString();
                    break;
                case 8:
                    message.updatedAt = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RoleItem {
        return RoleItem.deserialize(bytes);
    }
}
export class RolePermissionItem extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        roleId?: number;
        permissionId?: number;
        permissionName?: string;
        permissionKey?: string;
        permissionType?: string;
        permissionTypeText?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("roleId" in data && data.roleId != undefined) {
                this.roleId = data.roleId;
            }
            if ("permissionId" in data && data.permissionId != undefined) {
                this.permissionId = data.permissionId;
            }
            if ("permissionName" in data && data.permissionName != undefined) {
                this.permissionName = data.permissionName;
            }
            if ("permissionKey" in data && data.permissionKey != undefined) {
                this.permissionKey = data.permissionKey;
            }
            if ("permissionType" in data && data.permissionType != undefined) {
                this.permissionType = data.permissionType;
            }
            if ("permissionTypeText" in data && data.permissionTypeText != undefined) {
                this.permissionTypeText = data.permissionTypeText;
            }
        }
    }
    get roleId() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set roleId(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get permissionId() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set permissionId(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get permissionName() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set permissionName(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get permissionKey() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set permissionKey(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get permissionType() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set permissionType(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get permissionTypeText() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set permissionTypeText(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    static fromObject(data: {
        roleId?: number;
        permissionId?: number;
        permissionName?: string;
        permissionKey?: string;
        permissionType?: string;
        permissionTypeText?: string;
    }): RolePermissionItem {
        const message = new RolePermissionItem({});
        if (data.roleId != null) {
            message.roleId = data.roleId;
        }
        if (data.permissionId != null) {
            message.permissionId = data.permissionId;
        }
        if (data.permissionName != null) {
            message.permissionName = data.permissionName;
        }
        if (data.permissionKey != null) {
            message.permissionKey = data.permissionKey;
        }
        if (data.permissionType != null) {
            message.permissionType = data.permissionType;
        }
        if (data.permissionTypeText != null) {
            message.permissionTypeText = data.permissionTypeText;
        }
        return message;
    }
    toObject() {
        const data: {
            roleId?: number;
            permissionId?: number;
            permissionName?: string;
            permissionKey?: string;
            permissionType?: string;
            permissionTypeText?: string;
        } = {};
        if (this.roleId != null) {
            data.roleId = this.roleId;
        }
        if (this.permissionId != null) {
            data.permissionId = this.permissionId;
        }
        if (this.permissionName != null) {
            data.permissionName = this.permissionName;
        }
        if (this.permissionKey != null) {
            data.permissionKey = this.permissionKey;
        }
        if (this.permissionType != null) {
            data.permissionType = this.permissionType;
        }
        if (this.permissionTypeText != null) {
            data.permissionTypeText = this.permissionTypeText;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.roleId != 0)
            writer.writeInt32(1, this.roleId);
        if (this.permissionId != 0)
            writer.writeInt32(2, this.permissionId);
        if (this.permissionName.length)
            writer.writeString(3, this.permissionName);
        if (this.permissionKey.length)
            writer.writeString(4, this.permissionKey);
        if (this.permissionType.length)
            writer.writeString(5, this.permissionType);
        if (this.permissionTypeText.length)
            writer.writeString(6, this.permissionTypeText);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RolePermissionItem {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RolePermissionItem();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.roleId = reader.readInt32();
                    break;
                case 2:
                    message.permissionId = reader.readInt32();
                    break;
                case 3:
                    message.permissionName = reader.readString();
                    break;
                case 4:
                    message.permissionKey = reader.readString();
                    break;
                case 5:
                    message.permissionType = reader.readString();
                    break;
                case 6:
                    message.permissionTypeText = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RolePermissionItem {
        return RolePermissionItem.deserialize(bytes);
    }
}
