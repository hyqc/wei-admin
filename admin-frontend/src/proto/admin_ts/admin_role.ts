// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v3.21.12
// source: admin_role.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ReqListBase } from "./common";

export const protobufPackage = "admin";

/** 角色列表 */
export interface ReqRoleList {
  base?:
    | ReqListBase
    | undefined;
  /** 角色ID */
  id?:
    | number
    | undefined;
  /** 角色名称 */
  name?:
    | string
    | undefined;
  /** 启用状态，0：全部，1：启用，2：禁用 */
  enabled?: number | undefined;
}

export interface RespRoleListData {
  total?: number | undefined;
  list?: RoleItem[] | undefined;
}

/** 有效角色列表 */
export interface ReqRoleAll {
  /** 角色ID */
  id?:
    | number
    | undefined;
  /** 角色名称 */
  name?:
    | string
    | undefined;
  /** 启用状态，0：全部，1：启用，2：禁用 */
  enabled?: number | undefined;
}

export interface RespRoleAll {
}

/** 创建角色 */
export interface ReqRoleAdd {
  /** 角色名称 */
  name?:
    | string
    | undefined;
  /** 角色描述 */
  describe?:
    | string
    | undefined;
  /** 启用状态 */
  enabled?: boolean | undefined;
}

export interface RoleAddResp {
}

/** 角色详情 */
export interface ReqRoleInfo {
  /** 角色ID */
  id?: number | undefined;
}

export interface RespRoleInfoData {
  /** 角色ID */
  id?:
    | number
    | undefined;
  /** 角色名称 */
  name?:
    | string
    | undefined;
  /** 角色描述 */
  describe?:
    | string
    | undefined;
  /** 启用状态 */
  enabled?:
    | boolean
    | undefined;
  /** 创建人ID */
  createAdminId?:
    | number
    | undefined;
  /** 创建人名称 */
  createAdminName?:
    | string
    | undefined;
  /** 修改人ID */
  modifyAdminId?:
    | number
    | undefined;
  /** 修改人名称 */
  modifyAdminName?:
    | string
    | undefined;
  /** 创建时间 */
  createdAt?:
    | string
    | undefined;
  /** 更新时间 */
  updatedAt?: string | undefined;
}

/** 编辑角色 */
export interface ReqRoleEdit {
  /** 角色ID */
  id?:
    | number
    | undefined;
  /** 角色名称 */
  name?:
    | string
    | undefined;
  /** 角色描述 */
  describe?:
    | string
    | undefined;
  /** 启用状态 */
  enabled?: boolean | undefined;
}

export interface RespRoleEditData {
}

/** 启用禁用角色 */
export interface ReqRoleEnable {
  /** 角色ID */
  id?:
    | number
    | undefined;
  /** 启用状态 */
  enabled?: boolean | undefined;
}

export interface RespRoleEnableData {
}

/** 删除角色 */
export interface ReqRoleDelete {
  /** 角色ID */
  id?:
    | number
    | undefined;
  /** 权限ID集合 */
  permissionIds?: number[] | undefined;
}

export interface RespRoleDeleteData {
}

/** 角色绑定权限 */
export interface ReqRoleBindPermissions {
  /** 角色ID */
  id?:
    | number
    | undefined;
  /** 权限ID集合 */
  permissionIds?: number[] | undefined;
}

export interface RespRoleBindPermissionsData {
}

/** 角色权限列表 */
export interface ReqRolePermissions {
  /** 角色ID */
  id?: number | undefined;
}

export interface RespRolePermissionsData {
  list?: RolePermissionItem[] | undefined;
}

/**
 * /////////////////////////////////////////
 * 角色
 */
export interface RoleItem {
  /** 角色ID */
  id?:
    | number
    | undefined;
  /** 角色名称 */
  name?:
    | string
    | undefined;
  /** 角色名称 */
  roleName?:
    | string
    | undefined;
  /** 创建人ID */
  createAdminId?:
    | number
    | undefined;
  /** 创建人名称 */
  createAdminName?:
    | string
    | undefined;
  /** 是否启用 */
  enabled?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
}

/** 角色权限 */
export interface RolePermissionItem {
  /** 权限ID */
  roleId?:
    | number
    | undefined;
  /** 权限ID */
  permissionId?:
    | number
    | undefined;
  /** 权限名称 */
  permissionName?:
    | string
    | undefined;
  /** 权限键名 */
  permissionKey?:
    | string
    | undefined;
  /** 权限类型 */
  permissionType?:
    | string
    | undefined;
  /** 权限类型 */
  permissionTypeText?: string | undefined;
}

function createBaseReqRoleList(): ReqRoleList {
  return { base: undefined, id: 0, name: "", enabled: 0 };
}

export const ReqRoleList: MessageFns<ReqRoleList> = {
  encode(message: ReqRoleList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.base !== undefined) {
      ReqListBase.encode(message.base, writer.uint32(10).fork()).join();
    }
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(16).int32(message.id);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.enabled !== undefined && message.enabled !== 0) {
      writer.uint32(32).int32(message.enabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqRoleList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqRoleList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.base = ReqListBase.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.enabled = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqRoleList {
    return {
      base: isSet(object.base) ? ReqListBase.fromJSON(object.base) : undefined,
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      enabled: isSet(object.enabled) ? globalThis.Number(object.enabled) : 0,
    };
  },

  toJSON(message: ReqRoleList): unknown {
    const obj: any = {};
    if (message.base !== undefined) {
      obj.base = ReqListBase.toJSON(message.base);
    }
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.enabled !== undefined && message.enabled !== 0) {
      obj.enabled = Math.round(message.enabled);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqRoleList>, I>>(base?: I): ReqRoleList {
    return ReqRoleList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqRoleList>, I>>(object: I): ReqRoleList {
    const message = createBaseReqRoleList();
    message.base = (object.base !== undefined && object.base !== null)
      ? ReqListBase.fromPartial(object.base)
      : undefined;
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.enabled = object.enabled ?? 0;
    return message;
  },
};

function createBaseRespRoleListData(): RespRoleListData {
  return { total: 0, list: [] };
}

export const RespRoleListData: MessageFns<RespRoleListData> = {
  encode(message: RespRoleListData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.total !== undefined && message.total !== 0) {
      writer.uint32(8).int64(message.total);
    }
    if (message.list !== undefined && message.list.length !== 0) {
      for (const v of message.list) {
        RoleItem.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespRoleListData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespRoleListData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.total = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const el = RoleItem.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.list!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RespRoleListData {
    return {
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      list: globalThis.Array.isArray(object?.list) ? object.list.map((e: any) => RoleItem.fromJSON(e)) : [],
    };
  },

  toJSON(message: RespRoleListData): unknown {
    const obj: any = {};
    if (message.total !== undefined && message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    if (message.list?.length) {
      obj.list = message.list.map((e) => RoleItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RespRoleListData>, I>>(base?: I): RespRoleListData {
    return RespRoleListData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespRoleListData>, I>>(object: I): RespRoleListData {
    const message = createBaseRespRoleListData();
    message.total = object.total ?? 0;
    message.list = object.list?.map((e) => RoleItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReqRoleAll(): ReqRoleAll {
  return { id: 0, name: "", enabled: 0 };
}

export const ReqRoleAll: MessageFns<ReqRoleAll> = {
  encode(message: ReqRoleAll, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.enabled !== undefined && message.enabled !== 0) {
      writer.uint32(24).int32(message.enabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqRoleAll {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqRoleAll();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.enabled = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqRoleAll {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      enabled: isSet(object.enabled) ? globalThis.Number(object.enabled) : 0,
    };
  },

  toJSON(message: ReqRoleAll): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.enabled !== undefined && message.enabled !== 0) {
      obj.enabled = Math.round(message.enabled);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqRoleAll>, I>>(base?: I): ReqRoleAll {
    return ReqRoleAll.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqRoleAll>, I>>(object: I): ReqRoleAll {
    const message = createBaseReqRoleAll();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.enabled = object.enabled ?? 0;
    return message;
  },
};

function createBaseRespRoleAll(): RespRoleAll {
  return {};
}

export const RespRoleAll: MessageFns<RespRoleAll> = {
  encode(_: RespRoleAll, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespRoleAll {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespRoleAll();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespRoleAll {
    return {};
  },

  toJSON(_: RespRoleAll): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespRoleAll>, I>>(base?: I): RespRoleAll {
    return RespRoleAll.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespRoleAll>, I>>(_: I): RespRoleAll {
    const message = createBaseRespRoleAll();
    return message;
  },
};

function createBaseReqRoleAdd(): ReqRoleAdd {
  return { name: "", describe: "", enabled: false };
}

export const ReqRoleAdd: MessageFns<ReqRoleAdd> = {
  encode(message: ReqRoleAdd, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.describe !== undefined && message.describe !== "") {
      writer.uint32(18).string(message.describe);
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      writer.uint32(24).bool(message.enabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqRoleAdd {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqRoleAdd();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.describe = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqRoleAdd {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      describe: isSet(object.describe) ? globalThis.String(object.describe) : "",
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
    };
  },

  toJSON(message: ReqRoleAdd): unknown {
    const obj: any = {};
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.describe !== undefined && message.describe !== "") {
      obj.describe = message.describe;
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqRoleAdd>, I>>(base?: I): ReqRoleAdd {
    return ReqRoleAdd.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqRoleAdd>, I>>(object: I): ReqRoleAdd {
    const message = createBaseReqRoleAdd();
    message.name = object.name ?? "";
    message.describe = object.describe ?? "";
    message.enabled = object.enabled ?? false;
    return message;
  },
};

function createBaseRoleAddResp(): RoleAddResp {
  return {};
}

export const RoleAddResp: MessageFns<RoleAddResp> = {
  encode(_: RoleAddResp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoleAddResp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoleAddResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RoleAddResp {
    return {};
  },

  toJSON(_: RoleAddResp): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RoleAddResp>, I>>(base?: I): RoleAddResp {
    return RoleAddResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RoleAddResp>, I>>(_: I): RoleAddResp {
    const message = createBaseRoleAddResp();
    return message;
  },
};

function createBaseReqRoleInfo(): ReqRoleInfo {
  return { id: 0 };
}

export const ReqRoleInfo: MessageFns<ReqRoleInfo> = {
  encode(message: ReqRoleInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqRoleInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqRoleInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqRoleInfo {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: ReqRoleInfo): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqRoleInfo>, I>>(base?: I): ReqRoleInfo {
    return ReqRoleInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqRoleInfo>, I>>(object: I): ReqRoleInfo {
    const message = createBaseReqRoleInfo();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseRespRoleInfoData(): RespRoleInfoData {
  return {
    id: 0,
    name: "",
    describe: "",
    enabled: false,
    createAdminId: 0,
    createAdminName: "",
    modifyAdminId: 0,
    modifyAdminName: "",
    createdAt: "",
    updatedAt: "",
  };
}

export const RespRoleInfoData: MessageFns<RespRoleInfoData> = {
  encode(message: RespRoleInfoData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.describe !== undefined && message.describe !== "") {
      writer.uint32(26).string(message.describe);
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      writer.uint32(32).bool(message.enabled);
    }
    if (message.createAdminId !== undefined && message.createAdminId !== 0) {
      writer.uint32(40).int32(message.createAdminId);
    }
    if (message.createAdminName !== undefined && message.createAdminName !== "") {
      writer.uint32(50).string(message.createAdminName);
    }
    if (message.modifyAdminId !== undefined && message.modifyAdminId !== 0) {
      writer.uint32(56).int32(message.modifyAdminId);
    }
    if (message.modifyAdminName !== undefined && message.modifyAdminName !== "") {
      writer.uint32(66).string(message.modifyAdminName);
    }
    if (message.createdAt !== undefined && message.createdAt !== "") {
      writer.uint32(74).string(message.createdAt);
    }
    if (message.updatedAt !== undefined && message.updatedAt !== "") {
      writer.uint32(82).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespRoleInfoData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespRoleInfoData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.describe = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.createAdminId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.createAdminName = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.modifyAdminId = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.modifyAdminName = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RespRoleInfoData {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      describe: isSet(object.describe) ? globalThis.String(object.describe) : "",
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
      createAdminId: isSet(object.createAdminId) ? globalThis.Number(object.createAdminId) : 0,
      createAdminName: isSet(object.createAdminName) ? globalThis.String(object.createAdminName) : "",
      modifyAdminId: isSet(object.modifyAdminId) ? globalThis.Number(object.modifyAdminId) : 0,
      modifyAdminName: isSet(object.modifyAdminName) ? globalThis.String(object.modifyAdminName) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
    };
  },

  toJSON(message: RespRoleInfoData): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.describe !== undefined && message.describe !== "") {
      obj.describe = message.describe;
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    if (message.createAdminId !== undefined && message.createAdminId !== 0) {
      obj.createAdminId = Math.round(message.createAdminId);
    }
    if (message.createAdminName !== undefined && message.createAdminName !== "") {
      obj.createAdminName = message.createAdminName;
    }
    if (message.modifyAdminId !== undefined && message.modifyAdminId !== 0) {
      obj.modifyAdminId = Math.round(message.modifyAdminId);
    }
    if (message.modifyAdminName !== undefined && message.modifyAdminName !== "") {
      obj.modifyAdminName = message.modifyAdminName;
    }
    if (message.createdAt !== undefined && message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== undefined && message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RespRoleInfoData>, I>>(base?: I): RespRoleInfoData {
    return RespRoleInfoData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespRoleInfoData>, I>>(object: I): RespRoleInfoData {
    const message = createBaseRespRoleInfoData();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.describe = object.describe ?? "";
    message.enabled = object.enabled ?? false;
    message.createAdminId = object.createAdminId ?? 0;
    message.createAdminName = object.createAdminName ?? "";
    message.modifyAdminId = object.modifyAdminId ?? 0;
    message.modifyAdminName = object.modifyAdminName ?? "";
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    return message;
  },
};

function createBaseReqRoleEdit(): ReqRoleEdit {
  return { id: 0, name: "", describe: "", enabled: false };
}

export const ReqRoleEdit: MessageFns<ReqRoleEdit> = {
  encode(message: ReqRoleEdit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.describe !== undefined && message.describe !== "") {
      writer.uint32(26).string(message.describe);
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      writer.uint32(32).bool(message.enabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqRoleEdit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqRoleEdit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.describe = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqRoleEdit {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      describe: isSet(object.describe) ? globalThis.String(object.describe) : "",
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
    };
  },

  toJSON(message: ReqRoleEdit): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.describe !== undefined && message.describe !== "") {
      obj.describe = message.describe;
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqRoleEdit>, I>>(base?: I): ReqRoleEdit {
    return ReqRoleEdit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqRoleEdit>, I>>(object: I): ReqRoleEdit {
    const message = createBaseReqRoleEdit();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.describe = object.describe ?? "";
    message.enabled = object.enabled ?? false;
    return message;
  },
};

function createBaseRespRoleEditData(): RespRoleEditData {
  return {};
}

export const RespRoleEditData: MessageFns<RespRoleEditData> = {
  encode(_: RespRoleEditData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespRoleEditData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespRoleEditData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespRoleEditData {
    return {};
  },

  toJSON(_: RespRoleEditData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespRoleEditData>, I>>(base?: I): RespRoleEditData {
    return RespRoleEditData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespRoleEditData>, I>>(_: I): RespRoleEditData {
    const message = createBaseRespRoleEditData();
    return message;
  },
};

function createBaseReqRoleEnable(): ReqRoleEnable {
  return { id: 0, enabled: false };
}

export const ReqRoleEnable: MessageFns<ReqRoleEnable> = {
  encode(message: ReqRoleEnable, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      writer.uint32(16).bool(message.enabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqRoleEnable {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqRoleEnable();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqRoleEnable {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
    };
  },

  toJSON(message: ReqRoleEnable): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqRoleEnable>, I>>(base?: I): ReqRoleEnable {
    return ReqRoleEnable.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqRoleEnable>, I>>(object: I): ReqRoleEnable {
    const message = createBaseReqRoleEnable();
    message.id = object.id ?? 0;
    message.enabled = object.enabled ?? false;
    return message;
  },
};

function createBaseRespRoleEnableData(): RespRoleEnableData {
  return {};
}

export const RespRoleEnableData: MessageFns<RespRoleEnableData> = {
  encode(_: RespRoleEnableData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespRoleEnableData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespRoleEnableData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespRoleEnableData {
    return {};
  },

  toJSON(_: RespRoleEnableData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespRoleEnableData>, I>>(base?: I): RespRoleEnableData {
    return RespRoleEnableData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespRoleEnableData>, I>>(_: I): RespRoleEnableData {
    const message = createBaseRespRoleEnableData();
    return message;
  },
};

function createBaseReqRoleDelete(): ReqRoleDelete {
  return { id: 0, permissionIds: [] };
}

export const ReqRoleDelete: MessageFns<ReqRoleDelete> = {
  encode(message: ReqRoleDelete, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.permissionIds !== undefined && message.permissionIds.length !== 0) {
      writer.uint32(18).fork();
      for (const v of message.permissionIds) {
        writer.int32(v);
      }
      writer.join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqRoleDelete {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqRoleDelete();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.permissionIds!.push(reader.int32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.permissionIds!.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqRoleDelete {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      permissionIds: globalThis.Array.isArray(object?.permissionIds)
        ? object.permissionIds.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: ReqRoleDelete): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.permissionIds?.length) {
      obj.permissionIds = message.permissionIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqRoleDelete>, I>>(base?: I): ReqRoleDelete {
    return ReqRoleDelete.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqRoleDelete>, I>>(object: I): ReqRoleDelete {
    const message = createBaseReqRoleDelete();
    message.id = object.id ?? 0;
    message.permissionIds = object.permissionIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseRespRoleDeleteData(): RespRoleDeleteData {
  return {};
}

export const RespRoleDeleteData: MessageFns<RespRoleDeleteData> = {
  encode(_: RespRoleDeleteData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespRoleDeleteData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespRoleDeleteData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespRoleDeleteData {
    return {};
  },

  toJSON(_: RespRoleDeleteData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespRoleDeleteData>, I>>(base?: I): RespRoleDeleteData {
    return RespRoleDeleteData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespRoleDeleteData>, I>>(_: I): RespRoleDeleteData {
    const message = createBaseRespRoleDeleteData();
    return message;
  },
};

function createBaseReqRoleBindPermissions(): ReqRoleBindPermissions {
  return { id: 0, permissionIds: [] };
}

export const ReqRoleBindPermissions: MessageFns<ReqRoleBindPermissions> = {
  encode(message: ReqRoleBindPermissions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.permissionIds !== undefined && message.permissionIds.length !== 0) {
      writer.uint32(18).fork();
      for (const v of message.permissionIds) {
        writer.int32(v);
      }
      writer.join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqRoleBindPermissions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqRoleBindPermissions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.permissionIds!.push(reader.int32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.permissionIds!.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqRoleBindPermissions {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      permissionIds: globalThis.Array.isArray(object?.permissionIds)
        ? object.permissionIds.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: ReqRoleBindPermissions): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.permissionIds?.length) {
      obj.permissionIds = message.permissionIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqRoleBindPermissions>, I>>(base?: I): ReqRoleBindPermissions {
    return ReqRoleBindPermissions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqRoleBindPermissions>, I>>(object: I): ReqRoleBindPermissions {
    const message = createBaseReqRoleBindPermissions();
    message.id = object.id ?? 0;
    message.permissionIds = object.permissionIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseRespRoleBindPermissionsData(): RespRoleBindPermissionsData {
  return {};
}

export const RespRoleBindPermissionsData: MessageFns<RespRoleBindPermissionsData> = {
  encode(_: RespRoleBindPermissionsData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespRoleBindPermissionsData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespRoleBindPermissionsData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespRoleBindPermissionsData {
    return {};
  },

  toJSON(_: RespRoleBindPermissionsData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespRoleBindPermissionsData>, I>>(base?: I): RespRoleBindPermissionsData {
    return RespRoleBindPermissionsData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespRoleBindPermissionsData>, I>>(_: I): RespRoleBindPermissionsData {
    const message = createBaseRespRoleBindPermissionsData();
    return message;
  },
};

function createBaseReqRolePermissions(): ReqRolePermissions {
  return { id: 0 };
}

export const ReqRolePermissions: MessageFns<ReqRolePermissions> = {
  encode(message: ReqRolePermissions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqRolePermissions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqRolePermissions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqRolePermissions {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: ReqRolePermissions): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqRolePermissions>, I>>(base?: I): ReqRolePermissions {
    return ReqRolePermissions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqRolePermissions>, I>>(object: I): ReqRolePermissions {
    const message = createBaseReqRolePermissions();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseRespRolePermissionsData(): RespRolePermissionsData {
  return { list: [] };
}

export const RespRolePermissionsData: MessageFns<RespRolePermissionsData> = {
  encode(message: RespRolePermissionsData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.list !== undefined && message.list.length !== 0) {
      for (const v of message.list) {
        RolePermissionItem.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespRolePermissionsData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespRolePermissionsData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const el = RolePermissionItem.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.list!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RespRolePermissionsData {
    return {
      list: globalThis.Array.isArray(object?.list) ? object.list.map((e: any) => RolePermissionItem.fromJSON(e)) : [],
    };
  },

  toJSON(message: RespRolePermissionsData): unknown {
    const obj: any = {};
    if (message.list?.length) {
      obj.list = message.list.map((e) => RolePermissionItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RespRolePermissionsData>, I>>(base?: I): RespRolePermissionsData {
    return RespRolePermissionsData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespRolePermissionsData>, I>>(object: I): RespRolePermissionsData {
    const message = createBaseRespRolePermissionsData();
    message.list = object.list?.map((e) => RolePermissionItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRoleItem(): RoleItem {
  return {
    id: 0,
    name: "",
    roleName: "",
    createAdminId: 0,
    createAdminName: "",
    enabled: false,
    createdAt: "",
    updatedAt: "",
  };
}

export const RoleItem: MessageFns<RoleItem> = {
  encode(message: RoleItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.roleName !== undefined && message.roleName !== "") {
      writer.uint32(26).string(message.roleName);
    }
    if (message.createAdminId !== undefined && message.createAdminId !== 0) {
      writer.uint32(32).int32(message.createAdminId);
    }
    if (message.createAdminName !== undefined && message.createAdminName !== "") {
      writer.uint32(42).string(message.createAdminName);
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      writer.uint32(48).bool(message.enabled);
    }
    if (message.createdAt !== undefined && message.createdAt !== "") {
      writer.uint32(58).string(message.createdAt);
    }
    if (message.updatedAt !== undefined && message.updatedAt !== "") {
      writer.uint32(66).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoleItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoleItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.roleName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.createAdminId = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createAdminName = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoleItem {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      roleName: isSet(object.roleName) ? globalThis.String(object.roleName) : "",
      createAdminId: isSet(object.createAdminId) ? globalThis.Number(object.createAdminId) : 0,
      createAdminName: isSet(object.createAdminName) ? globalThis.String(object.createAdminName) : "",
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
    };
  },

  toJSON(message: RoleItem): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.roleName !== undefined && message.roleName !== "") {
      obj.roleName = message.roleName;
    }
    if (message.createAdminId !== undefined && message.createAdminId !== 0) {
      obj.createAdminId = Math.round(message.createAdminId);
    }
    if (message.createAdminName !== undefined && message.createAdminName !== "") {
      obj.createAdminName = message.createAdminName;
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    if (message.createdAt !== undefined && message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== undefined && message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RoleItem>, I>>(base?: I): RoleItem {
    return RoleItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RoleItem>, I>>(object: I): RoleItem {
    const message = createBaseRoleItem();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.roleName = object.roleName ?? "";
    message.createAdminId = object.createAdminId ?? 0;
    message.createAdminName = object.createAdminName ?? "";
    message.enabled = object.enabled ?? false;
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    return message;
  },
};

function createBaseRolePermissionItem(): RolePermissionItem {
  return {
    roleId: 0,
    permissionId: 0,
    permissionName: "",
    permissionKey: "",
    permissionType: "",
    permissionTypeText: "",
  };
}

export const RolePermissionItem: MessageFns<RolePermissionItem> = {
  encode(message: RolePermissionItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roleId !== undefined && message.roleId !== 0) {
      writer.uint32(8).int32(message.roleId);
    }
    if (message.permissionId !== undefined && message.permissionId !== 0) {
      writer.uint32(16).int32(message.permissionId);
    }
    if (message.permissionName !== undefined && message.permissionName !== "") {
      writer.uint32(26).string(message.permissionName);
    }
    if (message.permissionKey !== undefined && message.permissionKey !== "") {
      writer.uint32(34).string(message.permissionKey);
    }
    if (message.permissionType !== undefined && message.permissionType !== "") {
      writer.uint32(42).string(message.permissionType);
    }
    if (message.permissionTypeText !== undefined && message.permissionTypeText !== "") {
      writer.uint32(50).string(message.permissionTypeText);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RolePermissionItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRolePermissionItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.roleId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.permissionId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.permissionName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.permissionKey = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.permissionType = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.permissionTypeText = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RolePermissionItem {
    return {
      roleId: isSet(object.roleId) ? globalThis.Number(object.roleId) : 0,
      permissionId: isSet(object.permissionId) ? globalThis.Number(object.permissionId) : 0,
      permissionName: isSet(object.permissionName) ? globalThis.String(object.permissionName) : "",
      permissionKey: isSet(object.permissionKey) ? globalThis.String(object.permissionKey) : "",
      permissionType: isSet(object.permissionType) ? globalThis.String(object.permissionType) : "",
      permissionTypeText: isSet(object.permissionTypeText) ? globalThis.String(object.permissionTypeText) : "",
    };
  },

  toJSON(message: RolePermissionItem): unknown {
    const obj: any = {};
    if (message.roleId !== undefined && message.roleId !== 0) {
      obj.roleId = Math.round(message.roleId);
    }
    if (message.permissionId !== undefined && message.permissionId !== 0) {
      obj.permissionId = Math.round(message.permissionId);
    }
    if (message.permissionName !== undefined && message.permissionName !== "") {
      obj.permissionName = message.permissionName;
    }
    if (message.permissionKey !== undefined && message.permissionKey !== "") {
      obj.permissionKey = message.permissionKey;
    }
    if (message.permissionType !== undefined && message.permissionType !== "") {
      obj.permissionType = message.permissionType;
    }
    if (message.permissionTypeText !== undefined && message.permissionTypeText !== "") {
      obj.permissionTypeText = message.permissionTypeText;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RolePermissionItem>, I>>(base?: I): RolePermissionItem {
    return RolePermissionItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RolePermissionItem>, I>>(object: I): RolePermissionItem {
    const message = createBaseRolePermissionItem();
    message.roleId = object.roleId ?? 0;
    message.permissionId = object.permissionId ?? 0;
    message.permissionName = object.permissionName ?? "";
    message.permissionKey = object.permissionKey ?? "";
    message.permissionType = object.permissionType ?? "";
    message.permissionTypeText = object.permissionTypeText ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
