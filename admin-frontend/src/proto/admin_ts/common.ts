/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: common.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google\\protobuf\\any";
import * as pb_1 from "google-protobuf";
export class ListBaseReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        pageSize?: number;
        pageNum?: number;
        sortField?: string;
        sortType?: string;
        enabled?: number;
        createStartTime?: number;
        createEndTime?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("pageSize" in data && data.pageSize != undefined) {
                this.pageSize = data.pageSize;
            }
            if ("pageNum" in data && data.pageNum != undefined) {
                this.pageNum = data.pageNum;
            }
            if ("sortField" in data && data.sortField != undefined) {
                this.sortField = data.sortField;
            }
            if ("sortType" in data && data.sortType != undefined) {
                this.sortType = data.sortType;
            }
            if ("enabled" in data && data.enabled != undefined) {
                this.enabled = data.enabled;
            }
            if ("createStartTime" in data && data.createStartTime != undefined) {
                this.createStartTime = data.createStartTime;
            }
            if ("createEndTime" in data && data.createEndTime != undefined) {
                this.createEndTime = data.createEndTime;
            }
        }
    }
    get pageSize() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set pageSize(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get pageNum() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set pageNum(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get sortField() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set sortField(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get sortType() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set sortType(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get enabled() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set enabled(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get createStartTime() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set createStartTime(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get createEndTime() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set createEndTime(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data: {
        pageSize?: number;
        pageNum?: number;
        sortField?: string;
        sortType?: string;
        enabled?: number;
        createStartTime?: number;
        createEndTime?: number;
    }): ListBaseReq {
        const message = new ListBaseReq({});
        if (data.pageSize != null) {
            message.pageSize = data.pageSize;
        }
        if (data.pageNum != null) {
            message.pageNum = data.pageNum;
        }
        if (data.sortField != null) {
            message.sortField = data.sortField;
        }
        if (data.sortType != null) {
            message.sortType = data.sortType;
        }
        if (data.enabled != null) {
            message.enabled = data.enabled;
        }
        if (data.createStartTime != null) {
            message.createStartTime = data.createStartTime;
        }
        if (data.createEndTime != null) {
            message.createEndTime = data.createEndTime;
        }
        return message;
    }
    toObject() {
        const data: {
            pageSize?: number;
            pageNum?: number;
            sortField?: string;
            sortType?: string;
            enabled?: number;
            createStartTime?: number;
            createEndTime?: number;
        } = {};
        if (this.pageSize != null) {
            data.pageSize = this.pageSize;
        }
        if (this.pageNum != null) {
            data.pageNum = this.pageNum;
        }
        if (this.sortField != null) {
            data.sortField = this.sortField;
        }
        if (this.sortType != null) {
            data.sortType = this.sortType;
        }
        if (this.enabled != null) {
            data.enabled = this.enabled;
        }
        if (this.createStartTime != null) {
            data.createStartTime = this.createStartTime;
        }
        if (this.createEndTime != null) {
            data.createEndTime = this.createEndTime;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.pageSize != 0)
            writer.writeInt32(1, this.pageSize);
        if (this.pageNum != 0)
            writer.writeInt32(2, this.pageNum);
        if (this.sortField.length)
            writer.writeString(3, this.sortField);
        if (this.sortType.length)
            writer.writeString(4, this.sortType);
        if (this.enabled != 0)
            writer.writeInt32(5, this.enabled);
        if (this.createStartTime != 0)
            writer.writeInt64(6, this.createStartTime);
        if (this.createEndTime != 0)
            writer.writeInt64(7, this.createEndTime);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListBaseReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListBaseReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.pageSize = reader.readInt32();
                    break;
                case 2:
                    message.pageNum = reader.readInt32();
                    break;
                case 3:
                    message.sortField = reader.readString();
                    break;
                case 4:
                    message.sortType = reader.readString();
                    break;
                case 5:
                    message.enabled = reader.readInt32();
                    break;
                case 6:
                    message.createStartTime = reader.readInt64();
                    break;
                case 7:
                    message.createEndTime = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListBaseReq {
        return ListBaseReq.deserialize(bytes);
    }
}
export class RespData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: number;
        msg?: string;
        reason?: string;
        data?: dependency_1.Any;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("msg" in data && data.msg != undefined) {
                this.msg = data.msg;
            }
            if ("reason" in data && data.reason != undefined) {
                this.reason = data.reason;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set code(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get msg() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set msg(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get reason() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set reason(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get data() {
        return pb_1.Message.getWrapperField(this, dependency_1.Any, 4) as dependency_1.Any;
    }
    set data(value: dependency_1.Any) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get hasData() {
        return pb_1.Message.getField(this, 4) != null;
    }
    static fromObject(data: {
        code?: number;
        msg?: string;
        reason?: string;
        data?: ReturnType<typeof dependency_1.Any.prototype.toObject>;
    }): RespData {
        const message = new RespData({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.msg != null) {
            message.msg = data.msg;
        }
        if (data.reason != null) {
            message.reason = data.reason;
        }
        if (data.data != null) {
            message.data = dependency_1.Any.fromObject(data.data);
        }
        return message;
    }
    toObject() {
        const data: {
            code?: number;
            msg?: string;
            reason?: string;
            data?: ReturnType<typeof dependency_1.Any.prototype.toObject>;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.msg != null) {
            data.msg = this.msg;
        }
        if (this.reason != null) {
            data.reason = this.reason;
        }
        if (this.data != null) {
            data.data = this.data.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code != 0)
            writer.writeInt32(1, this.code);
        if (this.msg.length)
            writer.writeString(2, this.msg);
        if (this.reason.length)
            writer.writeString(3, this.reason);
        if (this.hasData)
            writer.writeMessage(4, this.data, () => this.data.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RespData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readInt32();
                    break;
                case 2:
                    message.msg = reader.readString();
                    break;
                case 3:
                    message.reason = reader.readString();
                    break;
                case 4:
                    reader.readMessage(message.data, () => message.data = dependency_1.Any.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RespData {
        return RespData.deserialize(bytes);
    }
}
