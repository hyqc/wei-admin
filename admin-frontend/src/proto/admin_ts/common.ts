/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: common.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class RespCode extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: number;
        msg?: string;
        reason?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("msg" in data && data.msg != undefined) {
                this.msg = data.msg;
            }
            if ("reason" in data && data.reason != undefined) {
                this.reason = data.reason;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set code(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get msg() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set msg(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get reason() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set reason(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        code?: number;
        msg?: string;
        reason?: string;
    }): RespCode {
        const message = new RespCode({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.msg != null) {
            message.msg = data.msg;
        }
        if (data.reason != null) {
            message.reason = data.reason;
        }
        return message;
    }
    toObject() {
        const data: {
            code?: number;
            msg?: string;
            reason?: string;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.msg != null) {
            data.msg = this.msg;
        }
        if (this.reason != null) {
            data.reason = this.reason;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code != 0)
            writer.writeInt32(1, this.code);
        if (this.msg.length)
            writer.writeString(2, this.msg);
        if (this.reason.length)
            writer.writeString(3, this.reason);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespCode {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RespCode();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readInt32();
                    break;
                case 2:
                    message.msg = reader.readString();
                    break;
                case 3:
                    message.reason = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RespCode {
        return RespCode.deserialize(bytes);
    }
}
export class ReqListBase extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        pageSize?: number;
        pageNum?: number;
        sortField?: string;
        sortType?: string;
        enabled?: number;
        createStartTime?: number;
        createEndTime?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("pageSize" in data && data.pageSize != undefined) {
                this.pageSize = data.pageSize;
            }
            if ("pageNum" in data && data.pageNum != undefined) {
                this.pageNum = data.pageNum;
            }
            if ("sortField" in data && data.sortField != undefined) {
                this.sortField = data.sortField;
            }
            if ("sortType" in data && data.sortType != undefined) {
                this.sortType = data.sortType;
            }
            if ("enabled" in data && data.enabled != undefined) {
                this.enabled = data.enabled;
            }
            if ("createStartTime" in data && data.createStartTime != undefined) {
                this.createStartTime = data.createStartTime;
            }
            if ("createEndTime" in data && data.createEndTime != undefined) {
                this.createEndTime = data.createEndTime;
            }
        }
    }
    get pageSize() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set pageSize(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get pageNum() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set pageNum(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get sortField() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set sortField(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get sortType() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set sortType(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get enabled() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set enabled(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get createStartTime() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set createStartTime(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get createEndTime() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set createEndTime(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data: {
        pageSize?: number;
        pageNum?: number;
        sortField?: string;
        sortType?: string;
        enabled?: number;
        createStartTime?: number;
        createEndTime?: number;
    }): ReqListBase {
        const message = new ReqListBase({});
        if (data.pageSize != null) {
            message.pageSize = data.pageSize;
        }
        if (data.pageNum != null) {
            message.pageNum = data.pageNum;
        }
        if (data.sortField != null) {
            message.sortField = data.sortField;
        }
        if (data.sortType != null) {
            message.sortType = data.sortType;
        }
        if (data.enabled != null) {
            message.enabled = data.enabled;
        }
        if (data.createStartTime != null) {
            message.createStartTime = data.createStartTime;
        }
        if (data.createEndTime != null) {
            message.createEndTime = data.createEndTime;
        }
        return message;
    }
    toObject() {
        const data: {
            pageSize?: number;
            pageNum?: number;
            sortField?: string;
            sortType?: string;
            enabled?: number;
            createStartTime?: number;
            createEndTime?: number;
        } = {};
        if (this.pageSize != null) {
            data.pageSize = this.pageSize;
        }
        if (this.pageNum != null) {
            data.pageNum = this.pageNum;
        }
        if (this.sortField != null) {
            data.sortField = this.sortField;
        }
        if (this.sortType != null) {
            data.sortType = this.sortType;
        }
        if (this.enabled != null) {
            data.enabled = this.enabled;
        }
        if (this.createStartTime != null) {
            data.createStartTime = this.createStartTime;
        }
        if (this.createEndTime != null) {
            data.createEndTime = this.createEndTime;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.pageSize != 0)
            writer.writeInt32(1, this.pageSize);
        if (this.pageNum != 0)
            writer.writeInt32(2, this.pageNum);
        if (this.sortField.length)
            writer.writeString(3, this.sortField);
        if (this.sortType.length)
            writer.writeString(4, this.sortType);
        if (this.enabled != 0)
            writer.writeInt32(5, this.enabled);
        if (this.createStartTime != 0)
            writer.writeInt64(6, this.createStartTime);
        if (this.createEndTime != 0)
            writer.writeInt64(7, this.createEndTime);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqListBase {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReqListBase();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.pageSize = reader.readInt32();
                    break;
                case 2:
                    message.pageNum = reader.readInt32();
                    break;
                case 3:
                    message.sortField = reader.readString();
                    break;
                case 4:
                    message.sortType = reader.readString();
                    break;
                case 5:
                    message.enabled = reader.readInt32();
                    break;
                case 6:
                    message.createStartTime = reader.readInt64();
                    break;
                case 7:
                    message.createEndTime = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReqListBase {
        return ReqListBase.deserialize(bytes);
    }
}
export class ApiItem extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        path?: string;
        key?: string;
        name?: string;
        enabled?: boolean;
        permissionId?: number;
        createdAt?: string;
        updatedAt?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("path" in data && data.path != undefined) {
                this.path = data.path;
            }
            if ("key" in data && data.key != undefined) {
                this.key = data.key;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("enabled" in data && data.enabled != undefined) {
                this.enabled = data.enabled;
            }
            if ("permissionId" in data && data.permissionId != undefined) {
                this.permissionId = data.permissionId;
            }
            if ("createdAt" in data && data.createdAt != undefined) {
                this.createdAt = data.createdAt;
            }
            if ("updatedAt" in data && data.updatedAt != undefined) {
                this.updatedAt = data.updatedAt;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get path() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set path(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get key() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set key(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get enabled() {
        return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set enabled(value: boolean) {
        pb_1.Message.setField(this, 5, value);
    }
    get permissionId() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set permissionId(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get createdAt() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set createdAt(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get updatedAt() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set updatedAt(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        id?: number;
        path?: string;
        key?: string;
        name?: string;
        enabled?: boolean;
        permissionId?: number;
        createdAt?: string;
        updatedAt?: string;
    }): ApiItem {
        const message = new ApiItem({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.path != null) {
            message.path = data.path;
        }
        if (data.key != null) {
            message.key = data.key;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.enabled != null) {
            message.enabled = data.enabled;
        }
        if (data.permissionId != null) {
            message.permissionId = data.permissionId;
        }
        if (data.createdAt != null) {
            message.createdAt = data.createdAt;
        }
        if (data.updatedAt != null) {
            message.updatedAt = data.updatedAt;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            path?: string;
            key?: string;
            name?: string;
            enabled?: boolean;
            permissionId?: number;
            createdAt?: string;
            updatedAt?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.path != null) {
            data.path = this.path;
        }
        if (this.key != null) {
            data.key = this.key;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.enabled != null) {
            data.enabled = this.enabled;
        }
        if (this.permissionId != null) {
            data.permissionId = this.permissionId;
        }
        if (this.createdAt != null) {
            data.createdAt = this.createdAt;
        }
        if (this.updatedAt != null) {
            data.updatedAt = this.updatedAt;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (this.path.length)
            writer.writeString(2, this.path);
        if (this.key.length)
            writer.writeString(3, this.key);
        if (this.name.length)
            writer.writeString(4, this.name);
        if (this.enabled != false)
            writer.writeBool(5, this.enabled);
        if (this.permissionId != 0)
            writer.writeInt32(6, this.permissionId);
        if (this.createdAt.length)
            writer.writeString(7, this.createdAt);
        if (this.updatedAt.length)
            writer.writeString(8, this.updatedAt);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ApiItem {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ApiItem();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                case 2:
                    message.path = reader.readString();
                    break;
                case 3:
                    message.key = reader.readString();
                    break;
                case 4:
                    message.name = reader.readString();
                    break;
                case 5:
                    message.enabled = reader.readBool();
                    break;
                case 6:
                    message.permissionId = reader.readInt32();
                    break;
                case 7:
                    message.createdAt = reader.readString();
                    break;
                case 8:
                    message.updatedAt = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ApiItem {
        return ApiItem.deserialize(bytes);
    }
}
