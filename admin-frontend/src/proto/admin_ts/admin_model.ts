// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v3.21.12
// source: admin_model.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "admin";

export interface AdminRoleModel {
  id?: number | undefined;
  name?: string | undefined;
  describe?: string | undefined;
  modifyAdminId?: number | undefined;
  createAdminId?: number | undefined;
  isEnabled?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
}

export interface AdminMenuModel {
  id?: number | undefined;
  parentId?: number | undefined;
  path?: string | undefined;
  name?: string | undefined;
  key?: string | undefined;
  describe?: string | undefined;
  icon?: string | undefined;
  sort?: number | undefined;
  redirect?: string | undefined;
  component?: string | undefined;
  isHideInMenu?: boolean | undefined;
  isHideChildrenInMenu?: boolean | undefined;
  isEnabled?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
}

export interface AdminApiModel {
  id?: number | undefined;
  path?: string | undefined;
  key?: string | undefined;
  name?: string | undefined;
  describe?: string | undefined;
  isEnabled?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
}

export interface AdminUserModel {
  id?: number | undefined;
  username?: string | undefined;
  nickname?: string | undefined;
  email?: string | undefined;
  avatar?: string | undefined;
  loginTotal?: number | undefined;
  lastLoginIp?: string | undefined;
  lastLoginTime?: string | undefined;
  isEnabled?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
}

function createBaseAdminRoleModel(): AdminRoleModel {
  return {
    id: 0,
    name: "",
    describe: "",
    modifyAdminId: 0,
    createAdminId: 0,
    isEnabled: false,
    createdAt: "",
    updatedAt: "",
  };
}

export const AdminRoleModel: MessageFns<AdminRoleModel> = {
  encode(message: AdminRoleModel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.describe !== undefined && message.describe !== "") {
      writer.uint32(26).string(message.describe);
    }
    if (message.modifyAdminId !== undefined && message.modifyAdminId !== 0) {
      writer.uint32(32).int32(message.modifyAdminId);
    }
    if (message.createAdminId !== undefined && message.createAdminId !== 0) {
      writer.uint32(40).int32(message.createAdminId);
    }
    if (message.isEnabled !== undefined && message.isEnabled !== false) {
      writer.uint32(48).bool(message.isEnabled);
    }
    if (message.createdAt !== undefined && message.createdAt !== "") {
      writer.uint32(58).string(message.createdAt);
    }
    if (message.updatedAt !== undefined && message.updatedAt !== "") {
      writer.uint32(66).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdminRoleModel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdminRoleModel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.describe = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.modifyAdminId = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.createAdminId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isEnabled = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdminRoleModel {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      describe: isSet(object.describe) ? globalThis.String(object.describe) : "",
      modifyAdminId: isSet(object.modifyAdminId) ? globalThis.Number(object.modifyAdminId) : 0,
      createAdminId: isSet(object.createAdminId) ? globalThis.Number(object.createAdminId) : 0,
      isEnabled: isSet(object.isEnabled) ? globalThis.Boolean(object.isEnabled) : false,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
    };
  },

  toJSON(message: AdminRoleModel): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.describe !== undefined && message.describe !== "") {
      obj.describe = message.describe;
    }
    if (message.modifyAdminId !== undefined && message.modifyAdminId !== 0) {
      obj.modifyAdminId = Math.round(message.modifyAdminId);
    }
    if (message.createAdminId !== undefined && message.createAdminId !== 0) {
      obj.createAdminId = Math.round(message.createAdminId);
    }
    if (message.isEnabled !== undefined && message.isEnabled !== false) {
      obj.isEnabled = message.isEnabled;
    }
    if (message.createdAt !== undefined && message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== undefined && message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AdminRoleModel>, I>>(base?: I): AdminRoleModel {
    return AdminRoleModel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AdminRoleModel>, I>>(object: I): AdminRoleModel {
    const message = createBaseAdminRoleModel();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.describe = object.describe ?? "";
    message.modifyAdminId = object.modifyAdminId ?? 0;
    message.createAdminId = object.createAdminId ?? 0;
    message.isEnabled = object.isEnabled ?? false;
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    return message;
  },
};

function createBaseAdminMenuModel(): AdminMenuModel {
  return {
    id: 0,
    parentId: 0,
    path: "",
    name: "",
    key: "",
    describe: "",
    icon: "",
    sort: 0,
    redirect: "",
    component: "",
    isHideInMenu: false,
    isHideChildrenInMenu: false,
    isEnabled: false,
    createdAt: "",
    updatedAt: "",
  };
}

export const AdminMenuModel: MessageFns<AdminMenuModel> = {
  encode(message: AdminMenuModel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.parentId !== undefined && message.parentId !== 0) {
      writer.uint32(16).int32(message.parentId);
    }
    if (message.path !== undefined && message.path !== "") {
      writer.uint32(26).string(message.path);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(42).string(message.key);
    }
    if (message.describe !== undefined && message.describe !== "") {
      writer.uint32(50).string(message.describe);
    }
    if (message.icon !== undefined && message.icon !== "") {
      writer.uint32(58).string(message.icon);
    }
    if (message.sort !== undefined && message.sort !== 0) {
      writer.uint32(64).int32(message.sort);
    }
    if (message.redirect !== undefined && message.redirect !== "") {
      writer.uint32(74).string(message.redirect);
    }
    if (message.component !== undefined && message.component !== "") {
      writer.uint32(82).string(message.component);
    }
    if (message.isHideInMenu !== undefined && message.isHideInMenu !== false) {
      writer.uint32(88).bool(message.isHideInMenu);
    }
    if (message.isHideChildrenInMenu !== undefined && message.isHideChildrenInMenu !== false) {
      writer.uint32(96).bool(message.isHideChildrenInMenu);
    }
    if (message.isEnabled !== undefined && message.isEnabled !== false) {
      writer.uint32(104).bool(message.isEnabled);
    }
    if (message.createdAt !== undefined && message.createdAt !== "") {
      writer.uint32(114).string(message.createdAt);
    }
    if (message.updatedAt !== undefined && message.updatedAt !== "") {
      writer.uint32(122).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdminMenuModel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdminMenuModel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.parentId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.describe = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.icon = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.sort = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.redirect = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.component = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.isHideInMenu = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.isHideChildrenInMenu = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.isEnabled = reader.bool();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdminMenuModel {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      parentId: isSet(object.parentId) ? globalThis.Number(object.parentId) : 0,
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      describe: isSet(object.describe) ? globalThis.String(object.describe) : "",
      icon: isSet(object.icon) ? globalThis.String(object.icon) : "",
      sort: isSet(object.sort) ? globalThis.Number(object.sort) : 0,
      redirect: isSet(object.redirect) ? globalThis.String(object.redirect) : "",
      component: isSet(object.component) ? globalThis.String(object.component) : "",
      isHideInMenu: isSet(object.isHideInMenu) ? globalThis.Boolean(object.isHideInMenu) : false,
      isHideChildrenInMenu: isSet(object.isHideChildrenInMenu)
        ? globalThis.Boolean(object.isHideChildrenInMenu)
        : false,
      isEnabled: isSet(object.isEnabled) ? globalThis.Boolean(object.isEnabled) : false,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
    };
  },

  toJSON(message: AdminMenuModel): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.parentId !== undefined && message.parentId !== 0) {
      obj.parentId = Math.round(message.parentId);
    }
    if (message.path !== undefined && message.path !== "") {
      obj.path = message.path;
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.key !== undefined && message.key !== "") {
      obj.key = message.key;
    }
    if (message.describe !== undefined && message.describe !== "") {
      obj.describe = message.describe;
    }
    if (message.icon !== undefined && message.icon !== "") {
      obj.icon = message.icon;
    }
    if (message.sort !== undefined && message.sort !== 0) {
      obj.sort = Math.round(message.sort);
    }
    if (message.redirect !== undefined && message.redirect !== "") {
      obj.redirect = message.redirect;
    }
    if (message.component !== undefined && message.component !== "") {
      obj.component = message.component;
    }
    if (message.isHideInMenu !== undefined && message.isHideInMenu !== false) {
      obj.isHideInMenu = message.isHideInMenu;
    }
    if (message.isHideChildrenInMenu !== undefined && message.isHideChildrenInMenu !== false) {
      obj.isHideChildrenInMenu = message.isHideChildrenInMenu;
    }
    if (message.isEnabled !== undefined && message.isEnabled !== false) {
      obj.isEnabled = message.isEnabled;
    }
    if (message.createdAt !== undefined && message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== undefined && message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AdminMenuModel>, I>>(base?: I): AdminMenuModel {
    return AdminMenuModel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AdminMenuModel>, I>>(object: I): AdminMenuModel {
    const message = createBaseAdminMenuModel();
    message.id = object.id ?? 0;
    message.parentId = object.parentId ?? 0;
    message.path = object.path ?? "";
    message.name = object.name ?? "";
    message.key = object.key ?? "";
    message.describe = object.describe ?? "";
    message.icon = object.icon ?? "";
    message.sort = object.sort ?? 0;
    message.redirect = object.redirect ?? "";
    message.component = object.component ?? "";
    message.isHideInMenu = object.isHideInMenu ?? false;
    message.isHideChildrenInMenu = object.isHideChildrenInMenu ?? false;
    message.isEnabled = object.isEnabled ?? false;
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    return message;
  },
};

function createBaseAdminApiModel(): AdminApiModel {
  return { id: 0, path: "", key: "", name: "", describe: "", isEnabled: false, createdAt: "", updatedAt: "" };
}

export const AdminApiModel: MessageFns<AdminApiModel> = {
  encode(message: AdminApiModel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.path !== undefined && message.path !== "") {
      writer.uint32(18).string(message.path);
    }
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(26).string(message.key);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.describe !== undefined && message.describe !== "") {
      writer.uint32(42).string(message.describe);
    }
    if (message.isEnabled !== undefined && message.isEnabled !== false) {
      writer.uint32(48).bool(message.isEnabled);
    }
    if (message.createdAt !== undefined && message.createdAt !== "") {
      writer.uint32(58).string(message.createdAt);
    }
    if (message.updatedAt !== undefined && message.updatedAt !== "") {
      writer.uint32(66).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdminApiModel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdminApiModel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.describe = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isEnabled = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdminApiModel {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      describe: isSet(object.describe) ? globalThis.String(object.describe) : "",
      isEnabled: isSet(object.isEnabled) ? globalThis.Boolean(object.isEnabled) : false,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
    };
  },

  toJSON(message: AdminApiModel): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.path !== undefined && message.path !== "") {
      obj.path = message.path;
    }
    if (message.key !== undefined && message.key !== "") {
      obj.key = message.key;
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.describe !== undefined && message.describe !== "") {
      obj.describe = message.describe;
    }
    if (message.isEnabled !== undefined && message.isEnabled !== false) {
      obj.isEnabled = message.isEnabled;
    }
    if (message.createdAt !== undefined && message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== undefined && message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AdminApiModel>, I>>(base?: I): AdminApiModel {
    return AdminApiModel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AdminApiModel>, I>>(object: I): AdminApiModel {
    const message = createBaseAdminApiModel();
    message.id = object.id ?? 0;
    message.path = object.path ?? "";
    message.key = object.key ?? "";
    message.name = object.name ?? "";
    message.describe = object.describe ?? "";
    message.isEnabled = object.isEnabled ?? false;
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    return message;
  },
};

function createBaseAdminUserModel(): AdminUserModel {
  return {
    id: 0,
    username: "",
    nickname: "",
    email: "",
    avatar: "",
    loginTotal: 0,
    lastLoginIp: "",
    lastLoginTime: "",
    isEnabled: false,
    createdAt: "",
    updatedAt: "",
  };
}

export const AdminUserModel: MessageFns<AdminUserModel> = {
  encode(message: AdminUserModel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.username !== undefined && message.username !== "") {
      writer.uint32(18).string(message.username);
    }
    if (message.nickname !== undefined && message.nickname !== "") {
      writer.uint32(26).string(message.nickname);
    }
    if (message.email !== undefined && message.email !== "") {
      writer.uint32(34).string(message.email);
    }
    if (message.avatar !== undefined && message.avatar !== "") {
      writer.uint32(42).string(message.avatar);
    }
    if (message.loginTotal !== undefined && message.loginTotal !== 0) {
      writer.uint32(48).int32(message.loginTotal);
    }
    if (message.lastLoginIp !== undefined && message.lastLoginIp !== "") {
      writer.uint32(58).string(message.lastLoginIp);
    }
    if (message.lastLoginTime !== undefined && message.lastLoginTime !== "") {
      writer.uint32(66).string(message.lastLoginTime);
    }
    if (message.isEnabled !== undefined && message.isEnabled !== false) {
      writer.uint32(72).bool(message.isEnabled);
    }
    if (message.createdAt !== undefined && message.createdAt !== "") {
      writer.uint32(82).string(message.createdAt);
    }
    if (message.updatedAt !== undefined && message.updatedAt !== "") {
      writer.uint32(90).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdminUserModel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdminUserModel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.nickname = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.avatar = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.loginTotal = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.lastLoginIp = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.lastLoginTime = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.isEnabled = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdminUserModel {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      nickname: isSet(object.nickname) ? globalThis.String(object.nickname) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
      loginTotal: isSet(object.loginTotal) ? globalThis.Number(object.loginTotal) : 0,
      lastLoginIp: isSet(object.lastLoginIp) ? globalThis.String(object.lastLoginIp) : "",
      lastLoginTime: isSet(object.lastLoginTime) ? globalThis.String(object.lastLoginTime) : "",
      isEnabled: isSet(object.isEnabled) ? globalThis.Boolean(object.isEnabled) : false,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
    };
  },

  toJSON(message: AdminUserModel): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.username !== undefined && message.username !== "") {
      obj.username = message.username;
    }
    if (message.nickname !== undefined && message.nickname !== "") {
      obj.nickname = message.nickname;
    }
    if (message.email !== undefined && message.email !== "") {
      obj.email = message.email;
    }
    if (message.avatar !== undefined && message.avatar !== "") {
      obj.avatar = message.avatar;
    }
    if (message.loginTotal !== undefined && message.loginTotal !== 0) {
      obj.loginTotal = Math.round(message.loginTotal);
    }
    if (message.lastLoginIp !== undefined && message.lastLoginIp !== "") {
      obj.lastLoginIp = message.lastLoginIp;
    }
    if (message.lastLoginTime !== undefined && message.lastLoginTime !== "") {
      obj.lastLoginTime = message.lastLoginTime;
    }
    if (message.isEnabled !== undefined && message.isEnabled !== false) {
      obj.isEnabled = message.isEnabled;
    }
    if (message.createdAt !== undefined && message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== undefined && message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AdminUserModel>, I>>(base?: I): AdminUserModel {
    return AdminUserModel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AdminUserModel>, I>>(object: I): AdminUserModel {
    const message = createBaseAdminUserModel();
    message.id = object.id ?? 0;
    message.username = object.username ?? "";
    message.nickname = object.nickname ?? "";
    message.email = object.email ?? "";
    message.avatar = object.avatar ?? "";
    message.loginTotal = object.loginTotal ?? 0;
    message.lastLoginIp = object.lastLoginIp ?? "";
    message.lastLoginTime = object.lastLoginTime ?? "";
    message.isEnabled = object.isEnabled ?? false;
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
