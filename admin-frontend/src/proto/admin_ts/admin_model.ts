/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: admin_model.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class AdminRoleModel extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        name?: string;
        describe?: string;
        modifyAdminId?: number;
        createAdminId?: number;
        isEnabled?: boolean;
        createdAt?: string;
        updatedAt?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("describe" in data && data.describe != undefined) {
                this.describe = data.describe;
            }
            if ("modifyAdminId" in data && data.modifyAdminId != undefined) {
                this.modifyAdminId = data.modifyAdminId;
            }
            if ("createAdminId" in data && data.createAdminId != undefined) {
                this.createAdminId = data.createAdminId;
            }
            if ("isEnabled" in data && data.isEnabled != undefined) {
                this.isEnabled = data.isEnabled;
            }
            if ("createdAt" in data && data.createdAt != undefined) {
                this.createdAt = data.createdAt;
            }
            if ("updatedAt" in data && data.updatedAt != undefined) {
                this.updatedAt = data.updatedAt;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get describe() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set describe(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get modifyAdminId() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set modifyAdminId(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get createAdminId() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set createAdminId(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get isEnabled() {
        return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
    }
    set isEnabled(value: boolean) {
        pb_1.Message.setField(this, 6, value);
    }
    get createdAt() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set createdAt(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get updatedAt() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set updatedAt(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        id?: number;
        name?: string;
        describe?: string;
        modifyAdminId?: number;
        createAdminId?: number;
        isEnabled?: boolean;
        createdAt?: string;
        updatedAt?: string;
    }): AdminRoleModel {
        const message = new AdminRoleModel({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.describe != null) {
            message.describe = data.describe;
        }
        if (data.modifyAdminId != null) {
            message.modifyAdminId = data.modifyAdminId;
        }
        if (data.createAdminId != null) {
            message.createAdminId = data.createAdminId;
        }
        if (data.isEnabled != null) {
            message.isEnabled = data.isEnabled;
        }
        if (data.createdAt != null) {
            message.createdAt = data.createdAt;
        }
        if (data.updatedAt != null) {
            message.updatedAt = data.updatedAt;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            name?: string;
            describe?: string;
            modifyAdminId?: number;
            createAdminId?: number;
            isEnabled?: boolean;
            createdAt?: string;
            updatedAt?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.describe != null) {
            data.describe = this.describe;
        }
        if (this.modifyAdminId != null) {
            data.modifyAdminId = this.modifyAdminId;
        }
        if (this.createAdminId != null) {
            data.createAdminId = this.createAdminId;
        }
        if (this.isEnabled != null) {
            data.isEnabled = this.isEnabled;
        }
        if (this.createdAt != null) {
            data.createdAt = this.createdAt;
        }
        if (this.updatedAt != null) {
            data.updatedAt = this.updatedAt;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.describe.length)
            writer.writeString(3, this.describe);
        if (this.modifyAdminId != 0)
            writer.writeInt32(4, this.modifyAdminId);
        if (this.createAdminId != 0)
            writer.writeInt32(5, this.createAdminId);
        if (this.isEnabled != false)
            writer.writeBool(6, this.isEnabled);
        if (this.createdAt.length)
            writer.writeString(7, this.createdAt);
        if (this.updatedAt.length)
            writer.writeString(8, this.updatedAt);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdminRoleModel {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdminRoleModel();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.describe = reader.readString();
                    break;
                case 4:
                    message.modifyAdminId = reader.readInt32();
                    break;
                case 5:
                    message.createAdminId = reader.readInt32();
                    break;
                case 6:
                    message.isEnabled = reader.readBool();
                    break;
                case 7:
                    message.createdAt = reader.readString();
                    break;
                case 8:
                    message.updatedAt = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AdminRoleModel {
        return AdminRoleModel.deserialize(bytes);
    }
}
export class AdminMenuModel extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        parentId?: number;
        path?: string;
        name?: string;
        key?: string;
        describe?: string;
        icon?: string;
        sort?: number;
        redirect?: string;
        component?: string;
        isHideInMenu?: boolean;
        isHideChildrenInMenu?: boolean;
        isEnabled?: boolean;
        createdAt?: string;
        updatedAt?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("parentId" in data && data.parentId != undefined) {
                this.parentId = data.parentId;
            }
            if ("path" in data && data.path != undefined) {
                this.path = data.path;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("key" in data && data.key != undefined) {
                this.key = data.key;
            }
            if ("describe" in data && data.describe != undefined) {
                this.describe = data.describe;
            }
            if ("icon" in data && data.icon != undefined) {
                this.icon = data.icon;
            }
            if ("sort" in data && data.sort != undefined) {
                this.sort = data.sort;
            }
            if ("redirect" in data && data.redirect != undefined) {
                this.redirect = data.redirect;
            }
            if ("component" in data && data.component != undefined) {
                this.component = data.component;
            }
            if ("isHideInMenu" in data && data.isHideInMenu != undefined) {
                this.isHideInMenu = data.isHideInMenu;
            }
            if ("isHideChildrenInMenu" in data && data.isHideChildrenInMenu != undefined) {
                this.isHideChildrenInMenu = data.isHideChildrenInMenu;
            }
            if ("isEnabled" in data && data.isEnabled != undefined) {
                this.isEnabled = data.isEnabled;
            }
            if ("createdAt" in data && data.createdAt != undefined) {
                this.createdAt = data.createdAt;
            }
            if ("updatedAt" in data && data.updatedAt != undefined) {
                this.updatedAt = data.updatedAt;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get parentId() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set parentId(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get path() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set path(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get key() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set key(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get describe() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set describe(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get icon() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set icon(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get sort() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set sort(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get redirect() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set redirect(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get component() {
        return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
    }
    set component(value: string) {
        pb_1.Message.setField(this, 10, value);
    }
    get isHideInMenu() {
        return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
    }
    set isHideInMenu(value: boolean) {
        pb_1.Message.setField(this, 11, value);
    }
    get isHideChildrenInMenu() {
        return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
    }
    set isHideChildrenInMenu(value: boolean) {
        pb_1.Message.setField(this, 12, value);
    }
    get isEnabled() {
        return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
    }
    set isEnabled(value: boolean) {
        pb_1.Message.setField(this, 13, value);
    }
    get createdAt() {
        return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
    }
    set createdAt(value: string) {
        pb_1.Message.setField(this, 14, value);
    }
    get updatedAt() {
        return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
    }
    set updatedAt(value: string) {
        pb_1.Message.setField(this, 15, value);
    }
    static fromObject(data: {
        id?: number;
        parentId?: number;
        path?: string;
        name?: string;
        key?: string;
        describe?: string;
        icon?: string;
        sort?: number;
        redirect?: string;
        component?: string;
        isHideInMenu?: boolean;
        isHideChildrenInMenu?: boolean;
        isEnabled?: boolean;
        createdAt?: string;
        updatedAt?: string;
    }): AdminMenuModel {
        const message = new AdminMenuModel({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.parentId != null) {
            message.parentId = data.parentId;
        }
        if (data.path != null) {
            message.path = data.path;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.key != null) {
            message.key = data.key;
        }
        if (data.describe != null) {
            message.describe = data.describe;
        }
        if (data.icon != null) {
            message.icon = data.icon;
        }
        if (data.sort != null) {
            message.sort = data.sort;
        }
        if (data.redirect != null) {
            message.redirect = data.redirect;
        }
        if (data.component != null) {
            message.component = data.component;
        }
        if (data.isHideInMenu != null) {
            message.isHideInMenu = data.isHideInMenu;
        }
        if (data.isHideChildrenInMenu != null) {
            message.isHideChildrenInMenu = data.isHideChildrenInMenu;
        }
        if (data.isEnabled != null) {
            message.isEnabled = data.isEnabled;
        }
        if (data.createdAt != null) {
            message.createdAt = data.createdAt;
        }
        if (data.updatedAt != null) {
            message.updatedAt = data.updatedAt;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            parentId?: number;
            path?: string;
            name?: string;
            key?: string;
            describe?: string;
            icon?: string;
            sort?: number;
            redirect?: string;
            component?: string;
            isHideInMenu?: boolean;
            isHideChildrenInMenu?: boolean;
            isEnabled?: boolean;
            createdAt?: string;
            updatedAt?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.parentId != null) {
            data.parentId = this.parentId;
        }
        if (this.path != null) {
            data.path = this.path;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.key != null) {
            data.key = this.key;
        }
        if (this.describe != null) {
            data.describe = this.describe;
        }
        if (this.icon != null) {
            data.icon = this.icon;
        }
        if (this.sort != null) {
            data.sort = this.sort;
        }
        if (this.redirect != null) {
            data.redirect = this.redirect;
        }
        if (this.component != null) {
            data.component = this.component;
        }
        if (this.isHideInMenu != null) {
            data.isHideInMenu = this.isHideInMenu;
        }
        if (this.isHideChildrenInMenu != null) {
            data.isHideChildrenInMenu = this.isHideChildrenInMenu;
        }
        if (this.isEnabled != null) {
            data.isEnabled = this.isEnabled;
        }
        if (this.createdAt != null) {
            data.createdAt = this.createdAt;
        }
        if (this.updatedAt != null) {
            data.updatedAt = this.updatedAt;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (this.parentId != 0)
            writer.writeInt32(2, this.parentId);
        if (this.path.length)
            writer.writeString(3, this.path);
        if (this.name.length)
            writer.writeString(4, this.name);
        if (this.key.length)
            writer.writeString(5, this.key);
        if (this.describe.length)
            writer.writeString(6, this.describe);
        if (this.icon.length)
            writer.writeString(7, this.icon);
        if (this.sort != 0)
            writer.writeInt32(8, this.sort);
        if (this.redirect.length)
            writer.writeString(9, this.redirect);
        if (this.component.length)
            writer.writeString(10, this.component);
        if (this.isHideInMenu != false)
            writer.writeBool(11, this.isHideInMenu);
        if (this.isHideChildrenInMenu != false)
            writer.writeBool(12, this.isHideChildrenInMenu);
        if (this.isEnabled != false)
            writer.writeBool(13, this.isEnabled);
        if (this.createdAt.length)
            writer.writeString(14, this.createdAt);
        if (this.updatedAt.length)
            writer.writeString(15, this.updatedAt);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdminMenuModel {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdminMenuModel();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                case 2:
                    message.parentId = reader.readInt32();
                    break;
                case 3:
                    message.path = reader.readString();
                    break;
                case 4:
                    message.name = reader.readString();
                    break;
                case 5:
                    message.key = reader.readString();
                    break;
                case 6:
                    message.describe = reader.readString();
                    break;
                case 7:
                    message.icon = reader.readString();
                    break;
                case 8:
                    message.sort = reader.readInt32();
                    break;
                case 9:
                    message.redirect = reader.readString();
                    break;
                case 10:
                    message.component = reader.readString();
                    break;
                case 11:
                    message.isHideInMenu = reader.readBool();
                    break;
                case 12:
                    message.isHideChildrenInMenu = reader.readBool();
                    break;
                case 13:
                    message.isEnabled = reader.readBool();
                    break;
                case 14:
                    message.createdAt = reader.readString();
                    break;
                case 15:
                    message.updatedAt = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AdminMenuModel {
        return AdminMenuModel.deserialize(bytes);
    }
}
export class AdminApiModel extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        path?: string;
        key?: string;
        name?: string;
        describe?: string;
        isEnabled?: boolean;
        createdAt?: string;
        updatedAt?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("path" in data && data.path != undefined) {
                this.path = data.path;
            }
            if ("key" in data && data.key != undefined) {
                this.key = data.key;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("describe" in data && data.describe != undefined) {
                this.describe = data.describe;
            }
            if ("isEnabled" in data && data.isEnabled != undefined) {
                this.isEnabled = data.isEnabled;
            }
            if ("createdAt" in data && data.createdAt != undefined) {
                this.createdAt = data.createdAt;
            }
            if ("updatedAt" in data && data.updatedAt != undefined) {
                this.updatedAt = data.updatedAt;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get path() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set path(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get key() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set key(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get describe() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set describe(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get isEnabled() {
        return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
    }
    set isEnabled(value: boolean) {
        pb_1.Message.setField(this, 6, value);
    }
    get createdAt() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set createdAt(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get updatedAt() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set updatedAt(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        id?: number;
        path?: string;
        key?: string;
        name?: string;
        describe?: string;
        isEnabled?: boolean;
        createdAt?: string;
        updatedAt?: string;
    }): AdminApiModel {
        const message = new AdminApiModel({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.path != null) {
            message.path = data.path;
        }
        if (data.key != null) {
            message.key = data.key;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.describe != null) {
            message.describe = data.describe;
        }
        if (data.isEnabled != null) {
            message.isEnabled = data.isEnabled;
        }
        if (data.createdAt != null) {
            message.createdAt = data.createdAt;
        }
        if (data.updatedAt != null) {
            message.updatedAt = data.updatedAt;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            path?: string;
            key?: string;
            name?: string;
            describe?: string;
            isEnabled?: boolean;
            createdAt?: string;
            updatedAt?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.path != null) {
            data.path = this.path;
        }
        if (this.key != null) {
            data.key = this.key;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.describe != null) {
            data.describe = this.describe;
        }
        if (this.isEnabled != null) {
            data.isEnabled = this.isEnabled;
        }
        if (this.createdAt != null) {
            data.createdAt = this.createdAt;
        }
        if (this.updatedAt != null) {
            data.updatedAt = this.updatedAt;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (this.path.length)
            writer.writeString(2, this.path);
        if (this.key.length)
            writer.writeString(3, this.key);
        if (this.name.length)
            writer.writeString(4, this.name);
        if (this.describe.length)
            writer.writeString(5, this.describe);
        if (this.isEnabled != false)
            writer.writeBool(6, this.isEnabled);
        if (this.createdAt.length)
            writer.writeString(7, this.createdAt);
        if (this.updatedAt.length)
            writer.writeString(8, this.updatedAt);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdminApiModel {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdminApiModel();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                case 2:
                    message.path = reader.readString();
                    break;
                case 3:
                    message.key = reader.readString();
                    break;
                case 4:
                    message.name = reader.readString();
                    break;
                case 5:
                    message.describe = reader.readString();
                    break;
                case 6:
                    message.isEnabled = reader.readBool();
                    break;
                case 7:
                    message.createdAt = reader.readString();
                    break;
                case 8:
                    message.updatedAt = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AdminApiModel {
        return AdminApiModel.deserialize(bytes);
    }
}
export class AdminUserModel extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        username?: string;
        nickname?: string;
        email?: string;
        avatar?: string;
        loginTotal?: number;
        lastLoginIp?: string;
        lastLoginTime?: string;
        isEnabled?: boolean;
        createdAt?: string;
        updatedAt?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
            if ("nickname" in data && data.nickname != undefined) {
                this.nickname = data.nickname;
            }
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
            if ("avatar" in data && data.avatar != undefined) {
                this.avatar = data.avatar;
            }
            if ("loginTotal" in data && data.loginTotal != undefined) {
                this.loginTotal = data.loginTotal;
            }
            if ("lastLoginIp" in data && data.lastLoginIp != undefined) {
                this.lastLoginIp = data.lastLoginIp;
            }
            if ("lastLoginTime" in data && data.lastLoginTime != undefined) {
                this.lastLoginTime = data.lastLoginTime;
            }
            if ("isEnabled" in data && data.isEnabled != undefined) {
                this.isEnabled = data.isEnabled;
            }
            if ("createdAt" in data && data.createdAt != undefined) {
                this.createdAt = data.createdAt;
            }
            if ("updatedAt" in data && data.updatedAt != undefined) {
                this.updatedAt = data.updatedAt;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get username() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get nickname() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set nickname(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get avatar() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set avatar(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get loginTotal() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set loginTotal(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get lastLoginIp() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set lastLoginIp(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get lastLoginTime() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set lastLoginTime(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get isEnabled() {
        return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
    }
    set isEnabled(value: boolean) {
        pb_1.Message.setField(this, 9, value);
    }
    get createdAt() {
        return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
    }
    set createdAt(value: string) {
        pb_1.Message.setField(this, 10, value);
    }
    get updatedAt() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set updatedAt(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    static fromObject(data: {
        id?: number;
        username?: string;
        nickname?: string;
        email?: string;
        avatar?: string;
        loginTotal?: number;
        lastLoginIp?: string;
        lastLoginTime?: string;
        isEnabled?: boolean;
        createdAt?: string;
        updatedAt?: string;
    }): AdminUserModel {
        const message = new AdminUserModel({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.username != null) {
            message.username = data.username;
        }
        if (data.nickname != null) {
            message.nickname = data.nickname;
        }
        if (data.email != null) {
            message.email = data.email;
        }
        if (data.avatar != null) {
            message.avatar = data.avatar;
        }
        if (data.loginTotal != null) {
            message.loginTotal = data.loginTotal;
        }
        if (data.lastLoginIp != null) {
            message.lastLoginIp = data.lastLoginIp;
        }
        if (data.lastLoginTime != null) {
            message.lastLoginTime = data.lastLoginTime;
        }
        if (data.isEnabled != null) {
            message.isEnabled = data.isEnabled;
        }
        if (data.createdAt != null) {
            message.createdAt = data.createdAt;
        }
        if (data.updatedAt != null) {
            message.updatedAt = data.updatedAt;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            username?: string;
            nickname?: string;
            email?: string;
            avatar?: string;
            loginTotal?: number;
            lastLoginIp?: string;
            lastLoginTime?: string;
            isEnabled?: boolean;
            createdAt?: string;
            updatedAt?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.username != null) {
            data.username = this.username;
        }
        if (this.nickname != null) {
            data.nickname = this.nickname;
        }
        if (this.email != null) {
            data.email = this.email;
        }
        if (this.avatar != null) {
            data.avatar = this.avatar;
        }
        if (this.loginTotal != null) {
            data.loginTotal = this.loginTotal;
        }
        if (this.lastLoginIp != null) {
            data.lastLoginIp = this.lastLoginIp;
        }
        if (this.lastLoginTime != null) {
            data.lastLoginTime = this.lastLoginTime;
        }
        if (this.isEnabled != null) {
            data.isEnabled = this.isEnabled;
        }
        if (this.createdAt != null) {
            data.createdAt = this.createdAt;
        }
        if (this.updatedAt != null) {
            data.updatedAt = this.updatedAt;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (this.username.length)
            writer.writeString(2, this.username);
        if (this.nickname.length)
            writer.writeString(3, this.nickname);
        if (this.email.length)
            writer.writeString(4, this.email);
        if (this.avatar.length)
            writer.writeString(5, this.avatar);
        if (this.loginTotal != 0)
            writer.writeInt32(6, this.loginTotal);
        if (this.lastLoginIp.length)
            writer.writeString(7, this.lastLoginIp);
        if (this.lastLoginTime.length)
            writer.writeString(8, this.lastLoginTime);
        if (this.isEnabled != false)
            writer.writeBool(9, this.isEnabled);
        if (this.createdAt.length)
            writer.writeString(10, this.createdAt);
        if (this.updatedAt.length)
            writer.writeString(11, this.updatedAt);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdminUserModel {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdminUserModel();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                case 2:
                    message.username = reader.readString();
                    break;
                case 3:
                    message.nickname = reader.readString();
                    break;
                case 4:
                    message.email = reader.readString();
                    break;
                case 5:
                    message.avatar = reader.readString();
                    break;
                case 6:
                    message.loginTotal = reader.readInt32();
                    break;
                case 7:
                    message.lastLoginIp = reader.readString();
                    break;
                case 8:
                    message.lastLoginTime = reader.readString();
                    break;
                case 9:
                    message.isEnabled = reader.readBool();
                    break;
                case 10:
                    message.createdAt = reader.readString();
                    break;
                case 11:
                    message.updatedAt = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AdminUserModel {
        return AdminUserModel.deserialize(bytes);
    }
}
