// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v3.21.12
// source: admin_permission.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { AdminApiItem, ReqListBase } from "./common";

export const protobufPackage = "admin";

/** 权限列表 */
export interface ReqAdminPermissionList {
  base?:
    | ReqListBase
    | undefined;
  /** 菜单ID */
  menuId?:
    | number
    | undefined;
  /** 权限唯一标识符 */
  key?:
    | string
    | undefined;
  /** 权限名称 */
  name?:
    | string
    | undefined;
  /** 权限类型 */
  type?: string | undefined;
}

export interface RespAdminPermissionListData {
  total?: number | undefined;
  list?: PermissionListItem[] | undefined;
}

/** 创建权限 */
export interface ReqAdminPermissionAdd {
  /** 权限ID */
  id?:
    | number
    | undefined;
  /** 权限对应的菜单ID */
  menuId?:
    | number
    | undefined;
  /** 权限唯一标识符 */
  key?:
    | string
    | undefined;
  /** 权限名称 */
  name?:
    | string
    | undefined;
  /** 权限描述 */
  describe?:
    | string
    | undefined;
  /** 权限类型 */
  type?:
    | string
    | undefined;
  /** 重定向地址 */
  redirect?:
    | string
    | undefined;
  /** 是否启用 */
  enabled?: boolean | undefined;
}

export interface RespAdminPermissionAddData {
}

/** 权限详情 */
export interface ReqAdminPermissionInfo {
  /** 权限ID */
  id?: number | undefined;
}

export interface RespAdminPermissionInfoData {
  data?: AdminPermissionInfo | undefined;
}

/** 编辑权限 */
export interface ReqAdminPermissionEdit {
  /** 权限ID */
  id?:
    | number
    | undefined;
  /** 权限对应的菜单ID */
  menuId?:
    | number
    | undefined;
  /** 权限唯一标识符 */
  key?:
    | string
    | undefined;
  /** 权限名称 */
  name?:
    | string
    | undefined;
  /** 权限描述 */
  describe?:
    | string
    | undefined;
  /** 权限类型 */
  type?:
    | string
    | undefined;
  /** 重定向地址 */
  redirect?:
    | string
    | undefined;
  /** 是否启用 */
  enabled?: boolean | undefined;
}

export interface RespAdminPermissionEditData {
}

/** 启用禁用权限 */
export interface ReqAdminPermissionEnable {
  /** 权限ID */
  id?: number | undefined;
  isEnabled?: boolean | undefined;
}

export interface RespAdminPermissionEnableData {
}

/** 删除权限 */
export interface ReqAdminPermissionDelete {
  /** 权限ID */
  id?: number | undefined;
}

export interface RespAdminPermissionDeleteData {
}

/** 权限绑定接口 */
export interface ReqAdminPermissionBindApis {
  /** 权限ID */
  permissionId?:
    | number
    | undefined;
  /** 接口ID列表 */
  apiIds?: number[] | undefined;
}

export interface RespAdminPermissionBindApisData {
}

/** 权限绑定接口 */
export interface ReqAdminPermissionUnBindApi {
  /** 权限ID */
  permissionId?:
    | number
    | undefined;
  /** 接口ID */
  apiId?: number | undefined;
}

export interface RespAdminPermissionUnBindApi {
}

/** 绑定权限菜单 */
export interface ReqAdminPermissionBindMenu {
  /** 菜单ID */
  menuId?:
    | number
    | undefined;
  /** 菜单对应的权限ID列表 */
  permissions?: ReqAdminPermissionAdd[] | undefined;
}

export interface RespAdminPermissionBindMenuData {
}

/**
 * //////////////////////////////////
 * 权限列表
 */
export interface PermissionListItem {
  /** 权限ID */
  id?:
    | number
    | undefined;
  /** 权限对应的菜单ID */
  menuId?:
    | number
    | undefined;
  /** 菜单名称 */
  menuName?:
    | string
    | undefined;
  /** 菜单路由 */
  menuPath?:
    | string
    | undefined;
  /** 接口列表 */
  apis?:
    | AdminApiItem[]
    | undefined;
  /** 权限唯一标识符 */
  key?:
    | string
    | undefined;
  /** 权限名称 */
  name?:
    | string
    | undefined;
  /** 权限描述 */
  describe?:
    | string
    | undefined;
  /** 权限类型 */
  type?:
    | string
    | undefined;
  /** 权限类型 */
  typeText?:
    | string
    | undefined;
  /** 是否启用 */
  isEnabled?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
}

/** 权限接口列表 */
export interface PermissionApiItem {
  /** 权限ID */
  id?:
    | number
    | undefined;
  /** 菜单ID */
  menuId?:
    | number
    | undefined;
  /** 权限键名 */
  key?:
    | string
    | undefined;
  /** 权限类型 */
  type?:
    | string
    | undefined;
  /** 权限类型 */
  typeText?:
    | string
    | undefined;
  /** 权限名称 */
  name?:
    | string
    | undefined;
  /** 接口列表 */
  apis?:
    | AdminApiItem[]
    | undefined;
  /** 是否启用 */
  enabled?:
    | boolean
    | undefined;
  /** 权限描述 */
  describe?: string | undefined;
}

/** 权限详情 */
export interface AdminPermissionInfo {
  /** 权限ID */
  id?:
    | number
    | undefined;
  /** 权限对应的菜单ID */
  menuId?:
    | number
    | undefined;
  /** 菜单名称 */
  menuName?:
    | string
    | undefined;
  /** 菜单路由 */
  menuPath?:
    | string
    | undefined;
  /** 接口列表 */
  apis?:
    | AdminApiItem[]
    | undefined;
  /** 权限唯一标识符 */
  key?:
    | string
    | undefined;
  /** 权限名称 */
  name?:
    | string
    | undefined;
  /** 权限描述 */
  describe?:
    | string
    | undefined;
  /** 权限类型 */
  type?:
    | string
    | undefined;
  /** 权限类型 */
  typeText?:
    | string
    | undefined;
  /** 重定向地址 */
  redirect?:
    | string
    | undefined;
  /** 是否启用 */
  isEnabled?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
}

function createBaseReqAdminPermissionList(): ReqAdminPermissionList {
  return { base: undefined, menuId: 0, key: "", name: "", type: "" };
}

export const ReqAdminPermissionList: MessageFns<ReqAdminPermissionList> = {
  encode(message: ReqAdminPermissionList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.base !== undefined) {
      ReqListBase.encode(message.base, writer.uint32(10).fork()).join();
    }
    if (message.menuId !== undefined && message.menuId !== 0) {
      writer.uint32(16).int32(message.menuId);
    }
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(26).string(message.key);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.type !== undefined && message.type !== "") {
      writer.uint32(42).string(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqAdminPermissionList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqAdminPermissionList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.base = ReqListBase.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.menuId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.type = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqAdminPermissionList {
    return {
      base: isSet(object.base) ? ReqListBase.fromJSON(object.base) : undefined,
      menuId: isSet(object.menuId) ? globalThis.Number(object.menuId) : 0,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
    };
  },

  toJSON(message: ReqAdminPermissionList): unknown {
    const obj: any = {};
    if (message.base !== undefined) {
      obj.base = ReqListBase.toJSON(message.base);
    }
    if (message.menuId !== undefined && message.menuId !== 0) {
      obj.menuId = Math.round(message.menuId);
    }
    if (message.key !== undefined && message.key !== "") {
      obj.key = message.key;
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== undefined && message.type !== "") {
      obj.type = message.type;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqAdminPermissionList>, I>>(base?: I): ReqAdminPermissionList {
    return ReqAdminPermissionList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqAdminPermissionList>, I>>(object: I): ReqAdminPermissionList {
    const message = createBaseReqAdminPermissionList();
    message.base = (object.base !== undefined && object.base !== null)
      ? ReqListBase.fromPartial(object.base)
      : undefined;
    message.menuId = object.menuId ?? 0;
    message.key = object.key ?? "";
    message.name = object.name ?? "";
    message.type = object.type ?? "";
    return message;
  },
};

function createBaseRespAdminPermissionListData(): RespAdminPermissionListData {
  return { total: 0, list: [] };
}

export const RespAdminPermissionListData: MessageFns<RespAdminPermissionListData> = {
  encode(message: RespAdminPermissionListData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.total !== undefined && message.total !== 0) {
      writer.uint32(8).int64(message.total);
    }
    if (message.list !== undefined && message.list.length !== 0) {
      for (const v of message.list) {
        PermissionListItem.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespAdminPermissionListData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespAdminPermissionListData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.total = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const el = PermissionListItem.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.list!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RespAdminPermissionListData {
    return {
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      list: globalThis.Array.isArray(object?.list) ? object.list.map((e: any) => PermissionListItem.fromJSON(e)) : [],
    };
  },

  toJSON(message: RespAdminPermissionListData): unknown {
    const obj: any = {};
    if (message.total !== undefined && message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    if (message.list?.length) {
      obj.list = message.list.map((e) => PermissionListItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RespAdminPermissionListData>, I>>(base?: I): RespAdminPermissionListData {
    return RespAdminPermissionListData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespAdminPermissionListData>, I>>(object: I): RespAdminPermissionListData {
    const message = createBaseRespAdminPermissionListData();
    message.total = object.total ?? 0;
    message.list = object.list?.map((e) => PermissionListItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReqAdminPermissionAdd(): ReqAdminPermissionAdd {
  return { id: 0, menuId: 0, key: "", name: "", describe: "", type: "", redirect: "", enabled: false };
}

export const ReqAdminPermissionAdd: MessageFns<ReqAdminPermissionAdd> = {
  encode(message: ReqAdminPermissionAdd, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.menuId !== undefined && message.menuId !== 0) {
      writer.uint32(16).int32(message.menuId);
    }
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(26).string(message.key);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.describe !== undefined && message.describe !== "") {
      writer.uint32(42).string(message.describe);
    }
    if (message.type !== undefined && message.type !== "") {
      writer.uint32(50).string(message.type);
    }
    if (message.redirect !== undefined && message.redirect !== "") {
      writer.uint32(58).string(message.redirect);
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      writer.uint32(64).bool(message.enabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqAdminPermissionAdd {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqAdminPermissionAdd();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.menuId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.describe = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.redirect = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqAdminPermissionAdd {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      menuId: isSet(object.menuId) ? globalThis.Number(object.menuId) : 0,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      describe: isSet(object.describe) ? globalThis.String(object.describe) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      redirect: isSet(object.redirect) ? globalThis.String(object.redirect) : "",
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
    };
  },

  toJSON(message: ReqAdminPermissionAdd): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.menuId !== undefined && message.menuId !== 0) {
      obj.menuId = Math.round(message.menuId);
    }
    if (message.key !== undefined && message.key !== "") {
      obj.key = message.key;
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.describe !== undefined && message.describe !== "") {
      obj.describe = message.describe;
    }
    if (message.type !== undefined && message.type !== "") {
      obj.type = message.type;
    }
    if (message.redirect !== undefined && message.redirect !== "") {
      obj.redirect = message.redirect;
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqAdminPermissionAdd>, I>>(base?: I): ReqAdminPermissionAdd {
    return ReqAdminPermissionAdd.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqAdminPermissionAdd>, I>>(object: I): ReqAdminPermissionAdd {
    const message = createBaseReqAdminPermissionAdd();
    message.id = object.id ?? 0;
    message.menuId = object.menuId ?? 0;
    message.key = object.key ?? "";
    message.name = object.name ?? "";
    message.describe = object.describe ?? "";
    message.type = object.type ?? "";
    message.redirect = object.redirect ?? "";
    message.enabled = object.enabled ?? false;
    return message;
  },
};

function createBaseRespAdminPermissionAddData(): RespAdminPermissionAddData {
  return {};
}

export const RespAdminPermissionAddData: MessageFns<RespAdminPermissionAddData> = {
  encode(_: RespAdminPermissionAddData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespAdminPermissionAddData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespAdminPermissionAddData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespAdminPermissionAddData {
    return {};
  },

  toJSON(_: RespAdminPermissionAddData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespAdminPermissionAddData>, I>>(base?: I): RespAdminPermissionAddData {
    return RespAdminPermissionAddData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespAdminPermissionAddData>, I>>(_: I): RespAdminPermissionAddData {
    const message = createBaseRespAdminPermissionAddData();
    return message;
  },
};

function createBaseReqAdminPermissionInfo(): ReqAdminPermissionInfo {
  return { id: 0 };
}

export const ReqAdminPermissionInfo: MessageFns<ReqAdminPermissionInfo> = {
  encode(message: ReqAdminPermissionInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqAdminPermissionInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqAdminPermissionInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqAdminPermissionInfo {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: ReqAdminPermissionInfo): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqAdminPermissionInfo>, I>>(base?: I): ReqAdminPermissionInfo {
    return ReqAdminPermissionInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqAdminPermissionInfo>, I>>(object: I): ReqAdminPermissionInfo {
    const message = createBaseReqAdminPermissionInfo();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseRespAdminPermissionInfoData(): RespAdminPermissionInfoData {
  return { data: undefined };
}

export const RespAdminPermissionInfoData: MessageFns<RespAdminPermissionInfoData> = {
  encode(message: RespAdminPermissionInfoData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      AdminPermissionInfo.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespAdminPermissionInfoData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespAdminPermissionInfoData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = AdminPermissionInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RespAdminPermissionInfoData {
    return { data: isSet(object.data) ? AdminPermissionInfo.fromJSON(object.data) : undefined };
  },

  toJSON(message: RespAdminPermissionInfoData): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = AdminPermissionInfo.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RespAdminPermissionInfoData>, I>>(base?: I): RespAdminPermissionInfoData {
    return RespAdminPermissionInfoData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespAdminPermissionInfoData>, I>>(object: I): RespAdminPermissionInfoData {
    const message = createBaseRespAdminPermissionInfoData();
    message.data = (object.data !== undefined && object.data !== null)
      ? AdminPermissionInfo.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseReqAdminPermissionEdit(): ReqAdminPermissionEdit {
  return { id: 0, menuId: 0, key: "", name: "", describe: "", type: "", redirect: "", enabled: false };
}

export const ReqAdminPermissionEdit: MessageFns<ReqAdminPermissionEdit> = {
  encode(message: ReqAdminPermissionEdit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.menuId !== undefined && message.menuId !== 0) {
      writer.uint32(16).int32(message.menuId);
    }
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(26).string(message.key);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.describe !== undefined && message.describe !== "") {
      writer.uint32(42).string(message.describe);
    }
    if (message.type !== undefined && message.type !== "") {
      writer.uint32(50).string(message.type);
    }
    if (message.redirect !== undefined && message.redirect !== "") {
      writer.uint32(58).string(message.redirect);
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      writer.uint32(64).bool(message.enabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqAdminPermissionEdit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqAdminPermissionEdit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.menuId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.describe = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.redirect = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqAdminPermissionEdit {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      menuId: isSet(object.menuId) ? globalThis.Number(object.menuId) : 0,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      describe: isSet(object.describe) ? globalThis.String(object.describe) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      redirect: isSet(object.redirect) ? globalThis.String(object.redirect) : "",
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
    };
  },

  toJSON(message: ReqAdminPermissionEdit): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.menuId !== undefined && message.menuId !== 0) {
      obj.menuId = Math.round(message.menuId);
    }
    if (message.key !== undefined && message.key !== "") {
      obj.key = message.key;
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.describe !== undefined && message.describe !== "") {
      obj.describe = message.describe;
    }
    if (message.type !== undefined && message.type !== "") {
      obj.type = message.type;
    }
    if (message.redirect !== undefined && message.redirect !== "") {
      obj.redirect = message.redirect;
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqAdminPermissionEdit>, I>>(base?: I): ReqAdminPermissionEdit {
    return ReqAdminPermissionEdit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqAdminPermissionEdit>, I>>(object: I): ReqAdminPermissionEdit {
    const message = createBaseReqAdminPermissionEdit();
    message.id = object.id ?? 0;
    message.menuId = object.menuId ?? 0;
    message.key = object.key ?? "";
    message.name = object.name ?? "";
    message.describe = object.describe ?? "";
    message.type = object.type ?? "";
    message.redirect = object.redirect ?? "";
    message.enabled = object.enabled ?? false;
    return message;
  },
};

function createBaseRespAdminPermissionEditData(): RespAdminPermissionEditData {
  return {};
}

export const RespAdminPermissionEditData: MessageFns<RespAdminPermissionEditData> = {
  encode(_: RespAdminPermissionEditData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespAdminPermissionEditData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespAdminPermissionEditData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespAdminPermissionEditData {
    return {};
  },

  toJSON(_: RespAdminPermissionEditData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespAdminPermissionEditData>, I>>(base?: I): RespAdminPermissionEditData {
    return RespAdminPermissionEditData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespAdminPermissionEditData>, I>>(_: I): RespAdminPermissionEditData {
    const message = createBaseRespAdminPermissionEditData();
    return message;
  },
};

function createBaseReqAdminPermissionEnable(): ReqAdminPermissionEnable {
  return { id: 0, isEnabled: false };
}

export const ReqAdminPermissionEnable: MessageFns<ReqAdminPermissionEnable> = {
  encode(message: ReqAdminPermissionEnable, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.isEnabled !== undefined && message.isEnabled !== false) {
      writer.uint32(16).bool(message.isEnabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqAdminPermissionEnable {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqAdminPermissionEnable();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isEnabled = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqAdminPermissionEnable {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      isEnabled: isSet(object.isEnabled) ? globalThis.Boolean(object.isEnabled) : false,
    };
  },

  toJSON(message: ReqAdminPermissionEnable): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.isEnabled !== undefined && message.isEnabled !== false) {
      obj.isEnabled = message.isEnabled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqAdminPermissionEnable>, I>>(base?: I): ReqAdminPermissionEnable {
    return ReqAdminPermissionEnable.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqAdminPermissionEnable>, I>>(object: I): ReqAdminPermissionEnable {
    const message = createBaseReqAdminPermissionEnable();
    message.id = object.id ?? 0;
    message.isEnabled = object.isEnabled ?? false;
    return message;
  },
};

function createBaseRespAdminPermissionEnableData(): RespAdminPermissionEnableData {
  return {};
}

export const RespAdminPermissionEnableData: MessageFns<RespAdminPermissionEnableData> = {
  encode(_: RespAdminPermissionEnableData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespAdminPermissionEnableData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespAdminPermissionEnableData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespAdminPermissionEnableData {
    return {};
  },

  toJSON(_: RespAdminPermissionEnableData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespAdminPermissionEnableData>, I>>(base?: I): RespAdminPermissionEnableData {
    return RespAdminPermissionEnableData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespAdminPermissionEnableData>, I>>(_: I): RespAdminPermissionEnableData {
    const message = createBaseRespAdminPermissionEnableData();
    return message;
  },
};

function createBaseReqAdminPermissionDelete(): ReqAdminPermissionDelete {
  return { id: 0 };
}

export const ReqAdminPermissionDelete: MessageFns<ReqAdminPermissionDelete> = {
  encode(message: ReqAdminPermissionDelete, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqAdminPermissionDelete {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqAdminPermissionDelete();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqAdminPermissionDelete {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: ReqAdminPermissionDelete): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqAdminPermissionDelete>, I>>(base?: I): ReqAdminPermissionDelete {
    return ReqAdminPermissionDelete.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqAdminPermissionDelete>, I>>(object: I): ReqAdminPermissionDelete {
    const message = createBaseReqAdminPermissionDelete();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseRespAdminPermissionDeleteData(): RespAdminPermissionDeleteData {
  return {};
}

export const RespAdminPermissionDeleteData: MessageFns<RespAdminPermissionDeleteData> = {
  encode(_: RespAdminPermissionDeleteData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespAdminPermissionDeleteData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespAdminPermissionDeleteData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespAdminPermissionDeleteData {
    return {};
  },

  toJSON(_: RespAdminPermissionDeleteData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespAdminPermissionDeleteData>, I>>(base?: I): RespAdminPermissionDeleteData {
    return RespAdminPermissionDeleteData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespAdminPermissionDeleteData>, I>>(_: I): RespAdminPermissionDeleteData {
    const message = createBaseRespAdminPermissionDeleteData();
    return message;
  },
};

function createBaseReqAdminPermissionBindApis(): ReqAdminPermissionBindApis {
  return { permissionId: 0, apiIds: [] };
}

export const ReqAdminPermissionBindApis: MessageFns<ReqAdminPermissionBindApis> = {
  encode(message: ReqAdminPermissionBindApis, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.permissionId !== undefined && message.permissionId !== 0) {
      writer.uint32(8).int32(message.permissionId);
    }
    if (message.apiIds !== undefined && message.apiIds.length !== 0) {
      writer.uint32(18).fork();
      for (const v of message.apiIds) {
        writer.int32(v);
      }
      writer.join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqAdminPermissionBindApis {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqAdminPermissionBindApis();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.permissionId = reader.int32();
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.apiIds!.push(reader.int32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.apiIds!.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqAdminPermissionBindApis {
    return {
      permissionId: isSet(object.permissionId) ? globalThis.Number(object.permissionId) : 0,
      apiIds: globalThis.Array.isArray(object?.apiIds) ? object.apiIds.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: ReqAdminPermissionBindApis): unknown {
    const obj: any = {};
    if (message.permissionId !== undefined && message.permissionId !== 0) {
      obj.permissionId = Math.round(message.permissionId);
    }
    if (message.apiIds?.length) {
      obj.apiIds = message.apiIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqAdminPermissionBindApis>, I>>(base?: I): ReqAdminPermissionBindApis {
    return ReqAdminPermissionBindApis.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqAdminPermissionBindApis>, I>>(object: I): ReqAdminPermissionBindApis {
    const message = createBaseReqAdminPermissionBindApis();
    message.permissionId = object.permissionId ?? 0;
    message.apiIds = object.apiIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseRespAdminPermissionBindApisData(): RespAdminPermissionBindApisData {
  return {};
}

export const RespAdminPermissionBindApisData: MessageFns<RespAdminPermissionBindApisData> = {
  encode(_: RespAdminPermissionBindApisData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespAdminPermissionBindApisData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespAdminPermissionBindApisData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespAdminPermissionBindApisData {
    return {};
  },

  toJSON(_: RespAdminPermissionBindApisData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespAdminPermissionBindApisData>, I>>(base?: I): RespAdminPermissionBindApisData {
    return RespAdminPermissionBindApisData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespAdminPermissionBindApisData>, I>>(_: I): RespAdminPermissionBindApisData {
    const message = createBaseRespAdminPermissionBindApisData();
    return message;
  },
};

function createBaseReqAdminPermissionUnBindApi(): ReqAdminPermissionUnBindApi {
  return { permissionId: 0, apiId: 0 };
}

export const ReqAdminPermissionUnBindApi: MessageFns<ReqAdminPermissionUnBindApi> = {
  encode(message: ReqAdminPermissionUnBindApi, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.permissionId !== undefined && message.permissionId !== 0) {
      writer.uint32(8).int32(message.permissionId);
    }
    if (message.apiId !== undefined && message.apiId !== 0) {
      writer.uint32(16).int32(message.apiId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqAdminPermissionUnBindApi {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqAdminPermissionUnBindApi();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.permissionId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.apiId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqAdminPermissionUnBindApi {
    return {
      permissionId: isSet(object.permissionId) ? globalThis.Number(object.permissionId) : 0,
      apiId: isSet(object.apiId) ? globalThis.Number(object.apiId) : 0,
    };
  },

  toJSON(message: ReqAdminPermissionUnBindApi): unknown {
    const obj: any = {};
    if (message.permissionId !== undefined && message.permissionId !== 0) {
      obj.permissionId = Math.round(message.permissionId);
    }
    if (message.apiId !== undefined && message.apiId !== 0) {
      obj.apiId = Math.round(message.apiId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqAdminPermissionUnBindApi>, I>>(base?: I): ReqAdminPermissionUnBindApi {
    return ReqAdminPermissionUnBindApi.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqAdminPermissionUnBindApi>, I>>(object: I): ReqAdminPermissionUnBindApi {
    const message = createBaseReqAdminPermissionUnBindApi();
    message.permissionId = object.permissionId ?? 0;
    message.apiId = object.apiId ?? 0;
    return message;
  },
};

function createBaseRespAdminPermissionUnBindApi(): RespAdminPermissionUnBindApi {
  return {};
}

export const RespAdminPermissionUnBindApi: MessageFns<RespAdminPermissionUnBindApi> = {
  encode(_: RespAdminPermissionUnBindApi, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespAdminPermissionUnBindApi {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespAdminPermissionUnBindApi();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespAdminPermissionUnBindApi {
    return {};
  },

  toJSON(_: RespAdminPermissionUnBindApi): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespAdminPermissionUnBindApi>, I>>(base?: I): RespAdminPermissionUnBindApi {
    return RespAdminPermissionUnBindApi.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespAdminPermissionUnBindApi>, I>>(_: I): RespAdminPermissionUnBindApi {
    const message = createBaseRespAdminPermissionUnBindApi();
    return message;
  },
};

function createBaseReqAdminPermissionBindMenu(): ReqAdminPermissionBindMenu {
  return { menuId: 0, permissions: [] };
}

export const ReqAdminPermissionBindMenu: MessageFns<ReqAdminPermissionBindMenu> = {
  encode(message: ReqAdminPermissionBindMenu, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.menuId !== undefined && message.menuId !== 0) {
      writer.uint32(8).int32(message.menuId);
    }
    if (message.permissions !== undefined && message.permissions.length !== 0) {
      for (const v of message.permissions) {
        ReqAdminPermissionAdd.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqAdminPermissionBindMenu {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqAdminPermissionBindMenu();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.menuId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const el = ReqAdminPermissionAdd.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.permissions!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqAdminPermissionBindMenu {
    return {
      menuId: isSet(object.menuId) ? globalThis.Number(object.menuId) : 0,
      permissions: globalThis.Array.isArray(object?.permissions)
        ? object.permissions.map((e: any) => ReqAdminPermissionAdd.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ReqAdminPermissionBindMenu): unknown {
    const obj: any = {};
    if (message.menuId !== undefined && message.menuId !== 0) {
      obj.menuId = Math.round(message.menuId);
    }
    if (message.permissions?.length) {
      obj.permissions = message.permissions.map((e) => ReqAdminPermissionAdd.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqAdminPermissionBindMenu>, I>>(base?: I): ReqAdminPermissionBindMenu {
    return ReqAdminPermissionBindMenu.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqAdminPermissionBindMenu>, I>>(object: I): ReqAdminPermissionBindMenu {
    const message = createBaseReqAdminPermissionBindMenu();
    message.menuId = object.menuId ?? 0;
    message.permissions = object.permissions?.map((e) => ReqAdminPermissionAdd.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRespAdminPermissionBindMenuData(): RespAdminPermissionBindMenuData {
  return {};
}

export const RespAdminPermissionBindMenuData: MessageFns<RespAdminPermissionBindMenuData> = {
  encode(_: RespAdminPermissionBindMenuData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespAdminPermissionBindMenuData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespAdminPermissionBindMenuData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespAdminPermissionBindMenuData {
    return {};
  },

  toJSON(_: RespAdminPermissionBindMenuData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespAdminPermissionBindMenuData>, I>>(base?: I): RespAdminPermissionBindMenuData {
    return RespAdminPermissionBindMenuData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespAdminPermissionBindMenuData>, I>>(_: I): RespAdminPermissionBindMenuData {
    const message = createBaseRespAdminPermissionBindMenuData();
    return message;
  },
};

function createBasePermissionListItem(): PermissionListItem {
  return {
    id: 0,
    menuId: 0,
    menuName: "",
    menuPath: "",
    apis: [],
    key: "",
    name: "",
    describe: "",
    type: "",
    typeText: "",
    isEnabled: false,
    createdAt: "",
    updatedAt: "",
  };
}

export const PermissionListItem: MessageFns<PermissionListItem> = {
  encode(message: PermissionListItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.menuId !== undefined && message.menuId !== 0) {
      writer.uint32(16).int32(message.menuId);
    }
    if (message.menuName !== undefined && message.menuName !== "") {
      writer.uint32(26).string(message.menuName);
    }
    if (message.menuPath !== undefined && message.menuPath !== "") {
      writer.uint32(34).string(message.menuPath);
    }
    if (message.apis !== undefined && message.apis.length !== 0) {
      for (const v of message.apis) {
        AdminApiItem.encode(v!, writer.uint32(42).fork()).join();
      }
    }
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(50).string(message.key);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(58).string(message.name);
    }
    if (message.describe !== undefined && message.describe !== "") {
      writer.uint32(66).string(message.describe);
    }
    if (message.type !== undefined && message.type !== "") {
      writer.uint32(74).string(message.type);
    }
    if (message.typeText !== undefined && message.typeText !== "") {
      writer.uint32(82).string(message.typeText);
    }
    if (message.isEnabled !== undefined && message.isEnabled !== false) {
      writer.uint32(88).bool(message.isEnabled);
    }
    if (message.createdAt !== undefined && message.createdAt !== "") {
      writer.uint32(98).string(message.createdAt);
    }
    if (message.updatedAt !== undefined && message.updatedAt !== "") {
      writer.uint32(106).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PermissionListItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionListItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.menuId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.menuName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.menuPath = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          const el = AdminApiItem.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.apis!.push(el);
          }
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.describe = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.typeText = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.isEnabled = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionListItem {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      menuId: isSet(object.menuId) ? globalThis.Number(object.menuId) : 0,
      menuName: isSet(object.menuName) ? globalThis.String(object.menuName) : "",
      menuPath: isSet(object.menuPath) ? globalThis.String(object.menuPath) : "",
      apis: globalThis.Array.isArray(object?.apis) ? object.apis.map((e: any) => AdminApiItem.fromJSON(e)) : [],
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      describe: isSet(object.describe) ? globalThis.String(object.describe) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      typeText: isSet(object.typeText) ? globalThis.String(object.typeText) : "",
      isEnabled: isSet(object.isEnabled) ? globalThis.Boolean(object.isEnabled) : false,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
    };
  },

  toJSON(message: PermissionListItem): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.menuId !== undefined && message.menuId !== 0) {
      obj.menuId = Math.round(message.menuId);
    }
    if (message.menuName !== undefined && message.menuName !== "") {
      obj.menuName = message.menuName;
    }
    if (message.menuPath !== undefined && message.menuPath !== "") {
      obj.menuPath = message.menuPath;
    }
    if (message.apis?.length) {
      obj.apis = message.apis.map((e) => AdminApiItem.toJSON(e));
    }
    if (message.key !== undefined && message.key !== "") {
      obj.key = message.key;
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.describe !== undefined && message.describe !== "") {
      obj.describe = message.describe;
    }
    if (message.type !== undefined && message.type !== "") {
      obj.type = message.type;
    }
    if (message.typeText !== undefined && message.typeText !== "") {
      obj.typeText = message.typeText;
    }
    if (message.isEnabled !== undefined && message.isEnabled !== false) {
      obj.isEnabled = message.isEnabled;
    }
    if (message.createdAt !== undefined && message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== undefined && message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PermissionListItem>, I>>(base?: I): PermissionListItem {
    return PermissionListItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PermissionListItem>, I>>(object: I): PermissionListItem {
    const message = createBasePermissionListItem();
    message.id = object.id ?? 0;
    message.menuId = object.menuId ?? 0;
    message.menuName = object.menuName ?? "";
    message.menuPath = object.menuPath ?? "";
    message.apis = object.apis?.map((e) => AdminApiItem.fromPartial(e)) || [];
    message.key = object.key ?? "";
    message.name = object.name ?? "";
    message.describe = object.describe ?? "";
    message.type = object.type ?? "";
    message.typeText = object.typeText ?? "";
    message.isEnabled = object.isEnabled ?? false;
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    return message;
  },
};

function createBasePermissionApiItem(): PermissionApiItem {
  return { id: 0, menuId: 0, key: "", type: "", typeText: "", name: "", apis: [], enabled: false, describe: "" };
}

export const PermissionApiItem: MessageFns<PermissionApiItem> = {
  encode(message: PermissionApiItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.menuId !== undefined && message.menuId !== 0) {
      writer.uint32(16).int32(message.menuId);
    }
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(26).string(message.key);
    }
    if (message.type !== undefined && message.type !== "") {
      writer.uint32(34).string(message.type);
    }
    if (message.typeText !== undefined && message.typeText !== "") {
      writer.uint32(42).string(message.typeText);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(50).string(message.name);
    }
    if (message.apis !== undefined && message.apis.length !== 0) {
      for (const v of message.apis) {
        AdminApiItem.encode(v!, writer.uint32(58).fork()).join();
      }
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      writer.uint32(64).bool(message.enabled);
    }
    if (message.describe !== undefined && message.describe !== "") {
      writer.uint32(74).string(message.describe);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PermissionApiItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionApiItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.menuId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.typeText = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          const el = AdminApiItem.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.apis!.push(el);
          }
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.describe = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionApiItem {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      menuId: isSet(object.menuId) ? globalThis.Number(object.menuId) : 0,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      typeText: isSet(object.typeText) ? globalThis.String(object.typeText) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      apis: globalThis.Array.isArray(object?.apis) ? object.apis.map((e: any) => AdminApiItem.fromJSON(e)) : [],
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
      describe: isSet(object.describe) ? globalThis.String(object.describe) : "",
    };
  },

  toJSON(message: PermissionApiItem): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.menuId !== undefined && message.menuId !== 0) {
      obj.menuId = Math.round(message.menuId);
    }
    if (message.key !== undefined && message.key !== "") {
      obj.key = message.key;
    }
    if (message.type !== undefined && message.type !== "") {
      obj.type = message.type;
    }
    if (message.typeText !== undefined && message.typeText !== "") {
      obj.typeText = message.typeText;
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.apis?.length) {
      obj.apis = message.apis.map((e) => AdminApiItem.toJSON(e));
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    if (message.describe !== undefined && message.describe !== "") {
      obj.describe = message.describe;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PermissionApiItem>, I>>(base?: I): PermissionApiItem {
    return PermissionApiItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PermissionApiItem>, I>>(object: I): PermissionApiItem {
    const message = createBasePermissionApiItem();
    message.id = object.id ?? 0;
    message.menuId = object.menuId ?? 0;
    message.key = object.key ?? "";
    message.type = object.type ?? "";
    message.typeText = object.typeText ?? "";
    message.name = object.name ?? "";
    message.apis = object.apis?.map((e) => AdminApiItem.fromPartial(e)) || [];
    message.enabled = object.enabled ?? false;
    message.describe = object.describe ?? "";
    return message;
  },
};

function createBaseAdminPermissionInfo(): AdminPermissionInfo {
  return {
    id: 0,
    menuId: 0,
    menuName: "",
    menuPath: "",
    apis: [],
    key: "",
    name: "",
    describe: "",
    type: "",
    typeText: "",
    redirect: "",
    isEnabled: false,
    createdAt: "",
    updatedAt: "",
  };
}

export const AdminPermissionInfo: MessageFns<AdminPermissionInfo> = {
  encode(message: AdminPermissionInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.menuId !== undefined && message.menuId !== 0) {
      writer.uint32(16).int32(message.menuId);
    }
    if (message.menuName !== undefined && message.menuName !== "") {
      writer.uint32(26).string(message.menuName);
    }
    if (message.menuPath !== undefined && message.menuPath !== "") {
      writer.uint32(34).string(message.menuPath);
    }
    if (message.apis !== undefined && message.apis.length !== 0) {
      for (const v of message.apis) {
        AdminApiItem.encode(v!, writer.uint32(42).fork()).join();
      }
    }
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(50).string(message.key);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(58).string(message.name);
    }
    if (message.describe !== undefined && message.describe !== "") {
      writer.uint32(66).string(message.describe);
    }
    if (message.type !== undefined && message.type !== "") {
      writer.uint32(74).string(message.type);
    }
    if (message.typeText !== undefined && message.typeText !== "") {
      writer.uint32(82).string(message.typeText);
    }
    if (message.redirect !== undefined && message.redirect !== "") {
      writer.uint32(90).string(message.redirect);
    }
    if (message.isEnabled !== undefined && message.isEnabled !== false) {
      writer.uint32(96).bool(message.isEnabled);
    }
    if (message.createdAt !== undefined && message.createdAt !== "") {
      writer.uint32(106).string(message.createdAt);
    }
    if (message.updatedAt !== undefined && message.updatedAt !== "") {
      writer.uint32(114).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdminPermissionInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdminPermissionInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.menuId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.menuName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.menuPath = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          const el = AdminApiItem.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.apis!.push(el);
          }
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.describe = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.typeText = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.redirect = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.isEnabled = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdminPermissionInfo {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      menuId: isSet(object.menuId) ? globalThis.Number(object.menuId) : 0,
      menuName: isSet(object.menuName) ? globalThis.String(object.menuName) : "",
      menuPath: isSet(object.menuPath) ? globalThis.String(object.menuPath) : "",
      apis: globalThis.Array.isArray(object?.apis) ? object.apis.map((e: any) => AdminApiItem.fromJSON(e)) : [],
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      describe: isSet(object.describe) ? globalThis.String(object.describe) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      typeText: isSet(object.typeText) ? globalThis.String(object.typeText) : "",
      redirect: isSet(object.redirect) ? globalThis.String(object.redirect) : "",
      isEnabled: isSet(object.isEnabled) ? globalThis.Boolean(object.isEnabled) : false,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
    };
  },

  toJSON(message: AdminPermissionInfo): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.menuId !== undefined && message.menuId !== 0) {
      obj.menuId = Math.round(message.menuId);
    }
    if (message.menuName !== undefined && message.menuName !== "") {
      obj.menuName = message.menuName;
    }
    if (message.menuPath !== undefined && message.menuPath !== "") {
      obj.menuPath = message.menuPath;
    }
    if (message.apis?.length) {
      obj.apis = message.apis.map((e) => AdminApiItem.toJSON(e));
    }
    if (message.key !== undefined && message.key !== "") {
      obj.key = message.key;
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.describe !== undefined && message.describe !== "") {
      obj.describe = message.describe;
    }
    if (message.type !== undefined && message.type !== "") {
      obj.type = message.type;
    }
    if (message.typeText !== undefined && message.typeText !== "") {
      obj.typeText = message.typeText;
    }
    if (message.redirect !== undefined && message.redirect !== "") {
      obj.redirect = message.redirect;
    }
    if (message.isEnabled !== undefined && message.isEnabled !== false) {
      obj.isEnabled = message.isEnabled;
    }
    if (message.createdAt !== undefined && message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== undefined && message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AdminPermissionInfo>, I>>(base?: I): AdminPermissionInfo {
    return AdminPermissionInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AdminPermissionInfo>, I>>(object: I): AdminPermissionInfo {
    const message = createBaseAdminPermissionInfo();
    message.id = object.id ?? 0;
    message.menuId = object.menuId ?? 0;
    message.menuName = object.menuName ?? "";
    message.menuPath = object.menuPath ?? "";
    message.apis = object.apis?.map((e) => AdminApiItem.fromPartial(e)) || [];
    message.key = object.key ?? "";
    message.name = object.name ?? "";
    message.describe = object.describe ?? "";
    message.type = object.type ?? "";
    message.typeText = object.typeText ?? "";
    message.redirect = object.redirect ?? "";
    message.isEnabled = object.isEnabled ?? false;
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
