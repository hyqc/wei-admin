/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: admin_permission.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./common";
import * as pb_1 from "google-protobuf";
export class ReqPermissionList extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        base?: dependency_1.ReqListBase;
        menuId?: number;
        key?: string;
        name?: string;
        type?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("base" in data && data.base != undefined) {
                this.base = data.base;
            }
            if ("menuId" in data && data.menuId != undefined) {
                this.menuId = data.menuId;
            }
            if ("key" in data && data.key != undefined) {
                this.key = data.key;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
        }
    }
    get base() {
        return pb_1.Message.getWrapperField(this, dependency_1.ReqListBase, 1) as dependency_1.ReqListBase;
    }
    set base(value: dependency_1.ReqListBase) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasBase() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get menuId() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set menuId(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get key() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set key(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set type(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        base?: ReturnType<typeof dependency_1.ReqListBase.prototype.toObject>;
        menuId?: number;
        key?: string;
        name?: string;
        type?: string;
    }): ReqPermissionList {
        const message = new ReqPermissionList({});
        if (data.base != null) {
            message.base = dependency_1.ReqListBase.fromObject(data.base);
        }
        if (data.menuId != null) {
            message.menuId = data.menuId;
        }
        if (data.key != null) {
            message.key = data.key;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.type != null) {
            message.type = data.type;
        }
        return message;
    }
    toObject() {
        const data: {
            base?: ReturnType<typeof dependency_1.ReqListBase.prototype.toObject>;
            menuId?: number;
            key?: string;
            name?: string;
            type?: string;
        } = {};
        if (this.base != null) {
            data.base = this.base.toObject();
        }
        if (this.menuId != null) {
            data.menuId = this.menuId;
        }
        if (this.key != null) {
            data.key = this.key;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.type != null) {
            data.type = this.type;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasBase)
            writer.writeMessage(1, this.base, () => this.base.serialize(writer));
        if (this.menuId != 0)
            writer.writeInt32(2, this.menuId);
        if (this.key.length)
            writer.writeString(3, this.key);
        if (this.name.length)
            writer.writeString(4, this.name);
        if (this.type.length)
            writer.writeString(5, this.type);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqPermissionList {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReqPermissionList();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.base, () => message.base = dependency_1.ReqListBase.deserialize(reader));
                    break;
                case 2:
                    message.menuId = reader.readInt32();
                    break;
                case 3:
                    message.key = reader.readString();
                    break;
                case 4:
                    message.name = reader.readString();
                    break;
                case 5:
                    message.type = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReqPermissionList {
        return ReqPermissionList.deserialize(bytes);
    }
}
export class RespPermissionListData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        total?: number;
        list?: PermissionListItem[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("total" in data && data.total != undefined) {
                this.total = data.total;
            }
            if ("list" in data && data.list != undefined) {
                this.list = data.list;
            }
        }
    }
    get total() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set total(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get list() {
        return pb_1.Message.getRepeatedWrapperField(this, PermissionListItem, 2) as PermissionListItem[];
    }
    set list(value: PermissionListItem[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        total?: number;
        list?: ReturnType<typeof PermissionListItem.prototype.toObject>[];
    }): RespPermissionListData {
        const message = new RespPermissionListData({});
        if (data.total != null) {
            message.total = data.total;
        }
        if (data.list != null) {
            message.list = data.list.map(item => PermissionListItem.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            total?: number;
            list?: ReturnType<typeof PermissionListItem.prototype.toObject>[];
        } = {};
        if (this.total != null) {
            data.total = this.total;
        }
        if (this.list != null) {
            data.list = this.list.map((item: PermissionListItem) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.total != 0)
            writer.writeInt64(1, this.total);
        if (this.list.length)
            writer.writeRepeatedMessage(2, this.list, (item: PermissionListItem) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespPermissionListData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RespPermissionListData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.total = reader.readInt64();
                    break;
                case 2:
                    reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 2, PermissionListItem.deserialize(reader), PermissionListItem));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RespPermissionListData {
        return RespPermissionListData.deserialize(bytes);
    }
}
export class ReqPermissionAdd extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        menuId?: number;
        key?: string;
        name?: string;
        describe?: string;
        type?: string;
        redirect?: string;
        enabled?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("menuId" in data && data.menuId != undefined) {
                this.menuId = data.menuId;
            }
            if ("key" in data && data.key != undefined) {
                this.key = data.key;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("describe" in data && data.describe != undefined) {
                this.describe = data.describe;
            }
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("redirect" in data && data.redirect != undefined) {
                this.redirect = data.redirect;
            }
            if ("enabled" in data && data.enabled != undefined) {
                this.enabled = data.enabled;
            }
        }
    }
    get menuId() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set menuId(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get key() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set key(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get describe() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set describe(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set type(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get redirect() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set redirect(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get enabled() {
        return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
    }
    set enabled(value: boolean) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        menuId?: number;
        key?: string;
        name?: string;
        describe?: string;
        type?: string;
        redirect?: string;
        enabled?: boolean;
    }): ReqPermissionAdd {
        const message = new ReqPermissionAdd({});
        if (data.menuId != null) {
            message.menuId = data.menuId;
        }
        if (data.key != null) {
            message.key = data.key;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.describe != null) {
            message.describe = data.describe;
        }
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.redirect != null) {
            message.redirect = data.redirect;
        }
        if (data.enabled != null) {
            message.enabled = data.enabled;
        }
        return message;
    }
    toObject() {
        const data: {
            menuId?: number;
            key?: string;
            name?: string;
            describe?: string;
            type?: string;
            redirect?: string;
            enabled?: boolean;
        } = {};
        if (this.menuId != null) {
            data.menuId = this.menuId;
        }
        if (this.key != null) {
            data.key = this.key;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.describe != null) {
            data.describe = this.describe;
        }
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.redirect != null) {
            data.redirect = this.redirect;
        }
        if (this.enabled != null) {
            data.enabled = this.enabled;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.menuId != 0)
            writer.writeInt32(2, this.menuId);
        if (this.key.length)
            writer.writeString(3, this.key);
        if (this.name.length)
            writer.writeString(4, this.name);
        if (this.describe.length)
            writer.writeString(5, this.describe);
        if (this.type.length)
            writer.writeString(6, this.type);
        if (this.redirect.length)
            writer.writeString(7, this.redirect);
        if (this.enabled != false)
            writer.writeBool(8, this.enabled);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqPermissionAdd {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReqPermissionAdd();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 2:
                    message.menuId = reader.readInt32();
                    break;
                case 3:
                    message.key = reader.readString();
                    break;
                case 4:
                    message.name = reader.readString();
                    break;
                case 5:
                    message.describe = reader.readString();
                    break;
                case 6:
                    message.type = reader.readString();
                    break;
                case 7:
                    message.redirect = reader.readString();
                    break;
                case 8:
                    message.enabled = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReqPermissionAdd {
        return ReqPermissionAdd.deserialize(bytes);
    }
}
export class RespPermissionAddData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): RespPermissionAddData {
        const message = new RespPermissionAddData({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespPermissionAddData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RespPermissionAddData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RespPermissionAddData {
        return RespPermissionAddData.deserialize(bytes);
    }
}
export class ReqPermissionInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        id?: number;
    }): ReqPermissionInfo {
        const message = new ReqPermissionInfo({});
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqPermissionInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReqPermissionInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReqPermissionInfo {
        return ReqPermissionInfo.deserialize(bytes);
    }
}
export class RespPermissionInfoData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        data?: PermissionInfo;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get data() {
        return pb_1.Message.getWrapperField(this, PermissionInfo, 1) as PermissionInfo;
    }
    set data(value: PermissionInfo) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasData() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        data?: ReturnType<typeof PermissionInfo.prototype.toObject>;
    }): RespPermissionInfoData {
        const message = new RespPermissionInfoData({});
        if (data.data != null) {
            message.data = PermissionInfo.fromObject(data.data);
        }
        return message;
    }
    toObject() {
        const data: {
            data?: ReturnType<typeof PermissionInfo.prototype.toObject>;
        } = {};
        if (this.data != null) {
            data.data = this.data.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasData)
            writer.writeMessage(1, this.data, () => this.data.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespPermissionInfoData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RespPermissionInfoData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.data, () => message.data = PermissionInfo.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RespPermissionInfoData {
        return RespPermissionInfoData.deserialize(bytes);
    }
}
export class ReqPermissionEdit extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        menuId?: number;
        key?: string;
        name?: string;
        describe?: string;
        type?: string;
        redirect?: string;
        enabled?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("menuId" in data && data.menuId != undefined) {
                this.menuId = data.menuId;
            }
            if ("key" in data && data.key != undefined) {
                this.key = data.key;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("describe" in data && data.describe != undefined) {
                this.describe = data.describe;
            }
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("redirect" in data && data.redirect != undefined) {
                this.redirect = data.redirect;
            }
            if ("enabled" in data && data.enabled != undefined) {
                this.enabled = data.enabled;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get menuId() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set menuId(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get key() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set key(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get describe() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set describe(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set type(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get redirect() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set redirect(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get enabled() {
        return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
    }
    set enabled(value: boolean) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        id?: number;
        menuId?: number;
        key?: string;
        name?: string;
        describe?: string;
        type?: string;
        redirect?: string;
        enabled?: boolean;
    }): ReqPermissionEdit {
        const message = new ReqPermissionEdit({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.menuId != null) {
            message.menuId = data.menuId;
        }
        if (data.key != null) {
            message.key = data.key;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.describe != null) {
            message.describe = data.describe;
        }
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.redirect != null) {
            message.redirect = data.redirect;
        }
        if (data.enabled != null) {
            message.enabled = data.enabled;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            menuId?: number;
            key?: string;
            name?: string;
            describe?: string;
            type?: string;
            redirect?: string;
            enabled?: boolean;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.menuId != null) {
            data.menuId = this.menuId;
        }
        if (this.key != null) {
            data.key = this.key;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.describe != null) {
            data.describe = this.describe;
        }
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.redirect != null) {
            data.redirect = this.redirect;
        }
        if (this.enabled != null) {
            data.enabled = this.enabled;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (this.menuId != 0)
            writer.writeInt32(2, this.menuId);
        if (this.key.length)
            writer.writeString(3, this.key);
        if (this.name.length)
            writer.writeString(4, this.name);
        if (this.describe.length)
            writer.writeString(5, this.describe);
        if (this.type.length)
            writer.writeString(6, this.type);
        if (this.redirect.length)
            writer.writeString(7, this.redirect);
        if (this.enabled != false)
            writer.writeBool(8, this.enabled);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqPermissionEdit {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReqPermissionEdit();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                case 2:
                    message.menuId = reader.readInt32();
                    break;
                case 3:
                    message.key = reader.readString();
                    break;
                case 4:
                    message.name = reader.readString();
                    break;
                case 5:
                    message.describe = reader.readString();
                    break;
                case 6:
                    message.type = reader.readString();
                    break;
                case 7:
                    message.redirect = reader.readString();
                    break;
                case 8:
                    message.enabled = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReqPermissionEdit {
        return ReqPermissionEdit.deserialize(bytes);
    }
}
export class RespPermissionEditData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): RespPermissionEditData {
        const message = new RespPermissionEditData({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespPermissionEditData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RespPermissionEditData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RespPermissionEditData {
        return RespPermissionEditData.deserialize(bytes);
    }
}
export class ReqPermissionEnable extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        enabled?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("enabled" in data && data.enabled != undefined) {
                this.enabled = data.enabled;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get enabled() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set enabled(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        id?: number;
        enabled?: boolean;
    }): ReqPermissionEnable {
        const message = new ReqPermissionEnable({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.enabled != null) {
            message.enabled = data.enabled;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            enabled?: boolean;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.enabled != null) {
            data.enabled = this.enabled;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (this.enabled != false)
            writer.writeBool(2, this.enabled);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqPermissionEnable {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReqPermissionEnable();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                case 2:
                    message.enabled = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReqPermissionEnable {
        return ReqPermissionEnable.deserialize(bytes);
    }
}
export class RespPermissionEnableData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): RespPermissionEnableData {
        const message = new RespPermissionEnableData({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespPermissionEnableData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RespPermissionEnableData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RespPermissionEnableData {
        return RespPermissionEnableData.deserialize(bytes);
    }
}
export class ReqPermissionDelete extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        id?: number;
    }): ReqPermissionDelete {
        const message = new ReqPermissionDelete({});
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqPermissionDelete {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReqPermissionDelete();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReqPermissionDelete {
        return ReqPermissionDelete.deserialize(bytes);
    }
}
export class RespPermissionDeleteData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): RespPermissionDeleteData {
        const message = new RespPermissionDeleteData({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespPermissionDeleteData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RespPermissionDeleteData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RespPermissionDeleteData {
        return RespPermissionDeleteData.deserialize(bytes);
    }
}
export class ReqPermissionBindApis extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        permissionId?: number;
        apiIds?: number[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("permissionId" in data && data.permissionId != undefined) {
                this.permissionId = data.permissionId;
            }
            if ("apiIds" in data && data.apiIds != undefined) {
                this.apiIds = data.apiIds;
            }
        }
    }
    get permissionId() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set permissionId(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get apiIds() {
        return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
    }
    set apiIds(value: number[]) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        permissionId?: number;
        apiIds?: number[];
    }): ReqPermissionBindApis {
        const message = new ReqPermissionBindApis({});
        if (data.permissionId != null) {
            message.permissionId = data.permissionId;
        }
        if (data.apiIds != null) {
            message.apiIds = data.apiIds;
        }
        return message;
    }
    toObject() {
        const data: {
            permissionId?: number;
            apiIds?: number[];
        } = {};
        if (this.permissionId != null) {
            data.permissionId = this.permissionId;
        }
        if (this.apiIds != null) {
            data.apiIds = this.apiIds;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.permissionId != 0)
            writer.writeInt32(1, this.permissionId);
        if (this.apiIds.length)
            writer.writePackedInt32(2, this.apiIds);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqPermissionBindApis {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReqPermissionBindApis();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.permissionId = reader.readInt32();
                    break;
                case 2:
                    message.apiIds = reader.readPackedInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReqPermissionBindApis {
        return ReqPermissionBindApis.deserialize(bytes);
    }
}
export class RespPermissionBindApisData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): RespPermissionBindApisData {
        const message = new RespPermissionBindApisData({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespPermissionBindApisData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RespPermissionBindApisData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RespPermissionBindApisData {
        return RespPermissionBindApisData.deserialize(bytes);
    }
}
export class ReqPermissionBindMenu extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        menuId?: number;
        permissions?: ReqPermissionAdd[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("menuId" in data && data.menuId != undefined) {
                this.menuId = data.menuId;
            }
            if ("permissions" in data && data.permissions != undefined) {
                this.permissions = data.permissions;
            }
        }
    }
    get menuId() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set menuId(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get permissions() {
        return pb_1.Message.getRepeatedWrapperField(this, ReqPermissionAdd, 2) as ReqPermissionAdd[];
    }
    set permissions(value: ReqPermissionAdd[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        menuId?: number;
        permissions?: ReturnType<typeof ReqPermissionAdd.prototype.toObject>[];
    }): ReqPermissionBindMenu {
        const message = new ReqPermissionBindMenu({});
        if (data.menuId != null) {
            message.menuId = data.menuId;
        }
        if (data.permissions != null) {
            message.permissions = data.permissions.map(item => ReqPermissionAdd.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            menuId?: number;
            permissions?: ReturnType<typeof ReqPermissionAdd.prototype.toObject>[];
        } = {};
        if (this.menuId != null) {
            data.menuId = this.menuId;
        }
        if (this.permissions != null) {
            data.permissions = this.permissions.map((item: ReqPermissionAdd) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.menuId != 0)
            writer.writeInt32(1, this.menuId);
        if (this.permissions.length)
            writer.writeRepeatedMessage(2, this.permissions, (item: ReqPermissionAdd) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqPermissionBindMenu {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReqPermissionBindMenu();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.menuId = reader.readInt32();
                    break;
                case 2:
                    reader.readMessage(message.permissions, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ReqPermissionAdd.deserialize(reader), ReqPermissionAdd));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReqPermissionBindMenu {
        return ReqPermissionBindMenu.deserialize(bytes);
    }
}
export class RespPermissionBindMenuData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): RespPermissionBindMenuData {
        const message = new RespPermissionBindMenuData({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespPermissionBindMenuData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RespPermissionBindMenuData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RespPermissionBindMenuData {
        return RespPermissionBindMenuData.deserialize(bytes);
    }
}
export class PermissionListItem extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        menuId?: number;
        menuName?: string;
        menuPath?: string;
        apis?: dependency_1.ApiItem[];
        key?: string;
        name?: string;
        describe?: string;
        type?: string;
        typeText?: string;
        enabled?: boolean;
        createdAt?: string;
        updatedAt?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("menuId" in data && data.menuId != undefined) {
                this.menuId = data.menuId;
            }
            if ("menuName" in data && data.menuName != undefined) {
                this.menuName = data.menuName;
            }
            if ("menuPath" in data && data.menuPath != undefined) {
                this.menuPath = data.menuPath;
            }
            if ("apis" in data && data.apis != undefined) {
                this.apis = data.apis;
            }
            if ("key" in data && data.key != undefined) {
                this.key = data.key;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("describe" in data && data.describe != undefined) {
                this.describe = data.describe;
            }
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("typeText" in data && data.typeText != undefined) {
                this.typeText = data.typeText;
            }
            if ("enabled" in data && data.enabled != undefined) {
                this.enabled = data.enabled;
            }
            if ("createdAt" in data && data.createdAt != undefined) {
                this.createdAt = data.createdAt;
            }
            if ("updatedAt" in data && data.updatedAt != undefined) {
                this.updatedAt = data.updatedAt;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get menuId() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set menuId(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get menuName() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set menuName(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get menuPath() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set menuPath(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get apis() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.ApiItem, 5) as dependency_1.ApiItem[];
    }
    set apis(value: dependency_1.ApiItem[]) {
        pb_1.Message.setRepeatedWrapperField(this, 5, value);
    }
    get key() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set key(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get describe() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set describe(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set type(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get typeText() {
        return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
    }
    set typeText(value: string) {
        pb_1.Message.setField(this, 10, value);
    }
    get enabled() {
        return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
    }
    set enabled(value: boolean) {
        pb_1.Message.setField(this, 11, value);
    }
    get createdAt() {
        return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
    }
    set createdAt(value: string) {
        pb_1.Message.setField(this, 12, value);
    }
    get updatedAt() {
        return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
    }
    set updatedAt(value: string) {
        pb_1.Message.setField(this, 13, value);
    }
    static fromObject(data: {
        id?: number;
        menuId?: number;
        menuName?: string;
        menuPath?: string;
        apis?: ReturnType<typeof dependency_1.ApiItem.prototype.toObject>[];
        key?: string;
        name?: string;
        describe?: string;
        type?: string;
        typeText?: string;
        enabled?: boolean;
        createdAt?: string;
        updatedAt?: string;
    }): PermissionListItem {
        const message = new PermissionListItem({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.menuId != null) {
            message.menuId = data.menuId;
        }
        if (data.menuName != null) {
            message.menuName = data.menuName;
        }
        if (data.menuPath != null) {
            message.menuPath = data.menuPath;
        }
        if (data.apis != null) {
            message.apis = data.apis.map(item => dependency_1.ApiItem.fromObject(item));
        }
        if (data.key != null) {
            message.key = data.key;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.describe != null) {
            message.describe = data.describe;
        }
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.typeText != null) {
            message.typeText = data.typeText;
        }
        if (data.enabled != null) {
            message.enabled = data.enabled;
        }
        if (data.createdAt != null) {
            message.createdAt = data.createdAt;
        }
        if (data.updatedAt != null) {
            message.updatedAt = data.updatedAt;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            menuId?: number;
            menuName?: string;
            menuPath?: string;
            apis?: ReturnType<typeof dependency_1.ApiItem.prototype.toObject>[];
            key?: string;
            name?: string;
            describe?: string;
            type?: string;
            typeText?: string;
            enabled?: boolean;
            createdAt?: string;
            updatedAt?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.menuId != null) {
            data.menuId = this.menuId;
        }
        if (this.menuName != null) {
            data.menuName = this.menuName;
        }
        if (this.menuPath != null) {
            data.menuPath = this.menuPath;
        }
        if (this.apis != null) {
            data.apis = this.apis.map((item: dependency_1.ApiItem) => item.toObject());
        }
        if (this.key != null) {
            data.key = this.key;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.describe != null) {
            data.describe = this.describe;
        }
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.typeText != null) {
            data.typeText = this.typeText;
        }
        if (this.enabled != null) {
            data.enabled = this.enabled;
        }
        if (this.createdAt != null) {
            data.createdAt = this.createdAt;
        }
        if (this.updatedAt != null) {
            data.updatedAt = this.updatedAt;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (this.menuId != 0)
            writer.writeInt32(2, this.menuId);
        if (this.menuName.length)
            writer.writeString(3, this.menuName);
        if (this.menuPath.length)
            writer.writeString(4, this.menuPath);
        if (this.apis.length)
            writer.writeRepeatedMessage(5, this.apis, (item: dependency_1.ApiItem) => item.serialize(writer));
        if (this.key.length)
            writer.writeString(6, this.key);
        if (this.name.length)
            writer.writeString(7, this.name);
        if (this.describe.length)
            writer.writeString(8, this.describe);
        if (this.type.length)
            writer.writeString(9, this.type);
        if (this.typeText.length)
            writer.writeString(10, this.typeText);
        if (this.enabled != false)
            writer.writeBool(11, this.enabled);
        if (this.createdAt.length)
            writer.writeString(12, this.createdAt);
        if (this.updatedAt.length)
            writer.writeString(13, this.updatedAt);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PermissionListItem {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PermissionListItem();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                case 2:
                    message.menuId = reader.readInt32();
                    break;
                case 3:
                    message.menuName = reader.readString();
                    break;
                case 4:
                    message.menuPath = reader.readString();
                    break;
                case 5:
                    reader.readMessage(message.apis, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_1.ApiItem.deserialize(reader), dependency_1.ApiItem));
                    break;
                case 6:
                    message.key = reader.readString();
                    break;
                case 7:
                    message.name = reader.readString();
                    break;
                case 8:
                    message.describe = reader.readString();
                    break;
                case 9:
                    message.type = reader.readString();
                    break;
                case 10:
                    message.typeText = reader.readString();
                    break;
                case 11:
                    message.enabled = reader.readBool();
                    break;
                case 12:
                    message.createdAt = reader.readString();
                    break;
                case 13:
                    message.updatedAt = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PermissionListItem {
        return PermissionListItem.deserialize(bytes);
    }
}
export class PermissionApiItem extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        menuId?: number;
        key?: string;
        type?: string;
        typeText?: string;
        name?: string;
        apis?: dependency_1.ApiItem[];
        enabled?: boolean;
        describe?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("menuId" in data && data.menuId != undefined) {
                this.menuId = data.menuId;
            }
            if ("key" in data && data.key != undefined) {
                this.key = data.key;
            }
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("typeText" in data && data.typeText != undefined) {
                this.typeText = data.typeText;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("apis" in data && data.apis != undefined) {
                this.apis = data.apis;
            }
            if ("enabled" in data && data.enabled != undefined) {
                this.enabled = data.enabled;
            }
            if ("describe" in data && data.describe != undefined) {
                this.describe = data.describe;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get menuId() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set menuId(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get key() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set key(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set type(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get typeText() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set typeText(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get apis() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.ApiItem, 7) as dependency_1.ApiItem[];
    }
    set apis(value: dependency_1.ApiItem[]) {
        pb_1.Message.setRepeatedWrapperField(this, 7, value);
    }
    get enabled() {
        return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
    }
    set enabled(value: boolean) {
        pb_1.Message.setField(this, 8, value);
    }
    get describe() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set describe(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    static fromObject(data: {
        id?: number;
        menuId?: number;
        key?: string;
        type?: string;
        typeText?: string;
        name?: string;
        apis?: ReturnType<typeof dependency_1.ApiItem.prototype.toObject>[];
        enabled?: boolean;
        describe?: string;
    }): PermissionApiItem {
        const message = new PermissionApiItem({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.menuId != null) {
            message.menuId = data.menuId;
        }
        if (data.key != null) {
            message.key = data.key;
        }
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.typeText != null) {
            message.typeText = data.typeText;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.apis != null) {
            message.apis = data.apis.map(item => dependency_1.ApiItem.fromObject(item));
        }
        if (data.enabled != null) {
            message.enabled = data.enabled;
        }
        if (data.describe != null) {
            message.describe = data.describe;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            menuId?: number;
            key?: string;
            type?: string;
            typeText?: string;
            name?: string;
            apis?: ReturnType<typeof dependency_1.ApiItem.prototype.toObject>[];
            enabled?: boolean;
            describe?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.menuId != null) {
            data.menuId = this.menuId;
        }
        if (this.key != null) {
            data.key = this.key;
        }
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.typeText != null) {
            data.typeText = this.typeText;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.apis != null) {
            data.apis = this.apis.map((item: dependency_1.ApiItem) => item.toObject());
        }
        if (this.enabled != null) {
            data.enabled = this.enabled;
        }
        if (this.describe != null) {
            data.describe = this.describe;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (this.menuId != 0)
            writer.writeInt32(2, this.menuId);
        if (this.key.length)
            writer.writeString(3, this.key);
        if (this.type.length)
            writer.writeString(4, this.type);
        if (this.typeText.length)
            writer.writeString(5, this.typeText);
        if (this.name.length)
            writer.writeString(6, this.name);
        if (this.apis.length)
            writer.writeRepeatedMessage(7, this.apis, (item: dependency_1.ApiItem) => item.serialize(writer));
        if (this.enabled != false)
            writer.writeBool(8, this.enabled);
        if (this.describe.length)
            writer.writeString(9, this.describe);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PermissionApiItem {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PermissionApiItem();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                case 2:
                    message.menuId = reader.readInt32();
                    break;
                case 3:
                    message.key = reader.readString();
                    break;
                case 4:
                    message.type = reader.readString();
                    break;
                case 5:
                    message.typeText = reader.readString();
                    break;
                case 6:
                    message.name = reader.readString();
                    break;
                case 7:
                    reader.readMessage(message.apis, () => pb_1.Message.addToRepeatedWrapperField(message, 7, dependency_1.ApiItem.deserialize(reader), dependency_1.ApiItem));
                    break;
                case 8:
                    message.enabled = reader.readBool();
                    break;
                case 9:
                    message.describe = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PermissionApiItem {
        return PermissionApiItem.deserialize(bytes);
    }
}
export class PermissionInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        menuId?: number;
        menuName?: string;
        menuPath?: string;
        apis?: dependency_1.ApiItem[];
        key?: string;
        name?: string;
        describe?: string;
        type?: string;
        typeText?: string;
        redirect?: string;
        enabled?: boolean;
        createdAt?: string;
        updatedAt?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("menuId" in data && data.menuId != undefined) {
                this.menuId = data.menuId;
            }
            if ("menuName" in data && data.menuName != undefined) {
                this.menuName = data.menuName;
            }
            if ("menuPath" in data && data.menuPath != undefined) {
                this.menuPath = data.menuPath;
            }
            if ("apis" in data && data.apis != undefined) {
                this.apis = data.apis;
            }
            if ("key" in data && data.key != undefined) {
                this.key = data.key;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("describe" in data && data.describe != undefined) {
                this.describe = data.describe;
            }
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("typeText" in data && data.typeText != undefined) {
                this.typeText = data.typeText;
            }
            if ("redirect" in data && data.redirect != undefined) {
                this.redirect = data.redirect;
            }
            if ("enabled" in data && data.enabled != undefined) {
                this.enabled = data.enabled;
            }
            if ("createdAt" in data && data.createdAt != undefined) {
                this.createdAt = data.createdAt;
            }
            if ("updatedAt" in data && data.updatedAt != undefined) {
                this.updatedAt = data.updatedAt;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get menuId() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set menuId(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get menuName() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set menuName(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get menuPath() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set menuPath(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get apis() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.ApiItem, 5) as dependency_1.ApiItem[];
    }
    set apis(value: dependency_1.ApiItem[]) {
        pb_1.Message.setRepeatedWrapperField(this, 5, value);
    }
    get key() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set key(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get describe() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set describe(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set type(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get typeText() {
        return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
    }
    set typeText(value: string) {
        pb_1.Message.setField(this, 10, value);
    }
    get redirect() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set redirect(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    get enabled() {
        return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
    }
    set enabled(value: boolean) {
        pb_1.Message.setField(this, 12, value);
    }
    get createdAt() {
        return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
    }
    set createdAt(value: string) {
        pb_1.Message.setField(this, 13, value);
    }
    get updatedAt() {
        return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
    }
    set updatedAt(value: string) {
        pb_1.Message.setField(this, 14, value);
    }
    static fromObject(data: {
        id?: number;
        menuId?: number;
        menuName?: string;
        menuPath?: string;
        apis?: ReturnType<typeof dependency_1.ApiItem.prototype.toObject>[];
        key?: string;
        name?: string;
        describe?: string;
        type?: string;
        typeText?: string;
        redirect?: string;
        enabled?: boolean;
        createdAt?: string;
        updatedAt?: string;
    }): PermissionInfo {
        const message = new PermissionInfo({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.menuId != null) {
            message.menuId = data.menuId;
        }
        if (data.menuName != null) {
            message.menuName = data.menuName;
        }
        if (data.menuPath != null) {
            message.menuPath = data.menuPath;
        }
        if (data.apis != null) {
            message.apis = data.apis.map(item => dependency_1.ApiItem.fromObject(item));
        }
        if (data.key != null) {
            message.key = data.key;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.describe != null) {
            message.describe = data.describe;
        }
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.typeText != null) {
            message.typeText = data.typeText;
        }
        if (data.redirect != null) {
            message.redirect = data.redirect;
        }
        if (data.enabled != null) {
            message.enabled = data.enabled;
        }
        if (data.createdAt != null) {
            message.createdAt = data.createdAt;
        }
        if (data.updatedAt != null) {
            message.updatedAt = data.updatedAt;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            menuId?: number;
            menuName?: string;
            menuPath?: string;
            apis?: ReturnType<typeof dependency_1.ApiItem.prototype.toObject>[];
            key?: string;
            name?: string;
            describe?: string;
            type?: string;
            typeText?: string;
            redirect?: string;
            enabled?: boolean;
            createdAt?: string;
            updatedAt?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.menuId != null) {
            data.menuId = this.menuId;
        }
        if (this.menuName != null) {
            data.menuName = this.menuName;
        }
        if (this.menuPath != null) {
            data.menuPath = this.menuPath;
        }
        if (this.apis != null) {
            data.apis = this.apis.map((item: dependency_1.ApiItem) => item.toObject());
        }
        if (this.key != null) {
            data.key = this.key;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.describe != null) {
            data.describe = this.describe;
        }
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.typeText != null) {
            data.typeText = this.typeText;
        }
        if (this.redirect != null) {
            data.redirect = this.redirect;
        }
        if (this.enabled != null) {
            data.enabled = this.enabled;
        }
        if (this.createdAt != null) {
            data.createdAt = this.createdAt;
        }
        if (this.updatedAt != null) {
            data.updatedAt = this.updatedAt;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (this.menuId != 0)
            writer.writeInt32(2, this.menuId);
        if (this.menuName.length)
            writer.writeString(3, this.menuName);
        if (this.menuPath.length)
            writer.writeString(4, this.menuPath);
        if (this.apis.length)
            writer.writeRepeatedMessage(5, this.apis, (item: dependency_1.ApiItem) => item.serialize(writer));
        if (this.key.length)
            writer.writeString(6, this.key);
        if (this.name.length)
            writer.writeString(7, this.name);
        if (this.describe.length)
            writer.writeString(8, this.describe);
        if (this.type.length)
            writer.writeString(9, this.type);
        if (this.typeText.length)
            writer.writeString(10, this.typeText);
        if (this.redirect.length)
            writer.writeString(11, this.redirect);
        if (this.enabled != false)
            writer.writeBool(12, this.enabled);
        if (this.createdAt.length)
            writer.writeString(13, this.createdAt);
        if (this.updatedAt.length)
            writer.writeString(14, this.updatedAt);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PermissionInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PermissionInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                case 2:
                    message.menuId = reader.readInt32();
                    break;
                case 3:
                    message.menuName = reader.readString();
                    break;
                case 4:
                    message.menuPath = reader.readString();
                    break;
                case 5:
                    reader.readMessage(message.apis, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_1.ApiItem.deserialize(reader), dependency_1.ApiItem));
                    break;
                case 6:
                    message.key = reader.readString();
                    break;
                case 7:
                    message.name = reader.readString();
                    break;
                case 8:
                    message.describe = reader.readString();
                    break;
                case 9:
                    message.type = reader.readString();
                    break;
                case 10:
                    message.typeText = reader.readString();
                    break;
                case 11:
                    message.redirect = reader.readString();
                    break;
                case 12:
                    message.enabled = reader.readBool();
                    break;
                case 13:
                    message.createdAt = reader.readString();
                    break;
                case 14:
                    message.updatedAt = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PermissionInfo {
        return PermissionInfo.deserialize(bytes);
    }
}
