// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v3.21.12
// source: admin_menu.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { AdminMenuModel } from "./admin_model";
import { ReqListBase } from "./common";

export const protobufPackage = "admin";

/** 菜单列表 */
export interface ReqAdminMenuList {
  base?:
    | ReqListBase
    | undefined;
  /** 菜单键名 */
  key?:
    | string
    | undefined;
  /** 菜单路由 */
  path?:
    | string
    | undefined;
  /** 菜单名称 */
  name?:
    | string
    | undefined;
  /** 父级菜单 */
  parentId?: number | undefined;
}

export interface RespAdminMenuListData {
  total?: number | undefined;
  list?: MenuItem[] | undefined;
}

/** 创建菜单 */
export interface ReqAdminMenuAdd {
  /** 菜单键名 */
  key?:
    | string
    | undefined;
  /** 菜单路由 */
  path?:
    | string
    | undefined;
  /** 菜单名称 */
  name?:
    | string
    | undefined;
  /** 父级菜单 */
  parentId?:
    | number
    | undefined;
  /** 菜单描述 */
  describe?:
    | string
    | undefined;
  /** 菜单重定向路由 */
  redirect?:
    | string
    | undefined;
  /** 菜单图标 */
  icon?:
    | string
    | undefined;
  /** 是否隐藏子菜单 */
  hideChildrenInMenu?:
    | boolean
    | undefined;
  /** 是否隐藏菜单 */
  hideInMenu?:
    | boolean
    | undefined;
  /** 是否启用菜单 */
  enabled?:
    | boolean
    | undefined;
  /** 菜单排序值 */
  sort?:
    | number
    | undefined;
  /** 菜单组件 */
  component?: string | undefined;
}

export interface RespAdminMenuAddData {
}

/** 菜单想去 */
export interface ReqAdminMenuInfo {
  /** 菜单ID */
  menuId?: number | undefined;
}

export interface RespAdminMenuInfoData {
  data?: AdminMenuModel | undefined;
}

/** 便捷菜单 */
export interface ReqAdminMenuEdit {
  id?: number | undefined;
  parentId?: number | undefined;
  path?: string | undefined;
  name?: string | undefined;
  key?: string | undefined;
  describe?: string | undefined;
  icon?: string | undefined;
  sort?: number | undefined;
  redirect?: string | undefined;
  component?: string | undefined;
  isHideInMenu?: boolean | undefined;
  isHideChildrenInMenu?: boolean | undefined;
  isEnabled?: boolean | undefined;
}

export interface RespAdminMenuEditData {
}

/** 启用禁用菜单 */
export interface ReqAdminMenuEnable {
  /** 菜单ID */
  menuId?:
    | number
    | undefined;
  /** 是否启用菜单 */
  enabled?: boolean | undefined;
}

export interface RespAdminMenuEnableData {
}

/** 启用禁用菜单 */
export interface ReqAdminMenuShow {
  /** 菜单ID */
  menuId?:
    | number
    | undefined;
  /** 要编辑的字段 */
  field?:
    | string
    | undefined;
  /** 是否显示菜单 */
  show?: boolean | undefined;
}

export interface RespAdminMenuShow {
}

/** 删除菜单 */
export interface ReqAdminMenuDelete {
  /** 菜单ID */
  menuId?: number | undefined;
}

export interface RespAdminMenuDeleteData {
}

/** 菜单权限列表 */
export interface ReqAdminMenuPermissions {
  /** 菜单ID */
  menuId?: number | undefined;
}

export interface RespAdminMenuPermissionsData {
  menuInfo?: AdminMenuModel | undefined;
  permissions?: MenuPermissionItem[] | undefined;
}

/** 页面菜单列表 */
export interface ReqAdminMenuPages {
  /** 是否顶部插入全部 */
  all?: boolean | undefined;
}

/** 页面模块权限列表 */
export interface ReqAdminMenuMode {
}

export interface RespAdminMenuModeData {
  modes?: MenuModeItem[] | undefined;
}

/**
 * ////////////////////////////////
 * 菜单
 */
export interface MenuItem {
  /** 菜单唯一键 */
  key?:
    | string
    | undefined;
  /** 菜单路由 */
  path?:
    | string
    | undefined;
  /** 菜单名称 */
  name?:
    | string
    | undefined;
  /** 菜单图标 */
  icon?: string | undefined;
  component?: string | undefined;
  authority?: string | undefined;
  hideInMenu?: boolean | undefined;
  hideChildrenInMenu?: boolean | undefined;
  routes?: MenuItem[] | undefined;
}

/** 有效菜单树 */
export interface MenuTreeItem {
  /** 菜单层级 */
  level?:
    | number
    | undefined;
  /** 菜单自增ID */
  id?:
    | number
    | undefined;
  /** 菜单唯一键 */
  key?:
    | string
    | undefined;
  /** 菜单名称 */
  name?:
    | string
    | undefined;
  /** 父级菜单ID */
  parentId?:
    | number
    | undefined;
  /** 菜单描述 */
  describe?:
    | string
    | undefined;
  /** 菜单路径 */
  path?:
    | string
    | undefined;
  /** 重定向地址 */
  redirect?:
    | string
    | undefined;
  /** 组件名称 */
  component?:
    | string
    | undefined;
  /** 菜单排序 */
  sort?:
    | number
    | undefined;
  /** 菜单图标 */
  icon?:
    | string
    | undefined;
  /** 是否在菜单中隐藏子菜单 */
  hideChildrenInMenu?:
    | boolean
    | undefined;
  /** 是否隐藏菜单 */
  hideInMenu?:
    | boolean
    | undefined;
  /** 是否启用 */
  enabled?: boolean | undefined;
  createTime?: number | undefined;
  modifyTime?: number | undefined;
  children?: MenuTreeItem[] | undefined;
}

/** 菜单模块 */
export interface MenuModeItem {
  /** 模块菜单ID */
  modelId?:
    | number
    | undefined;
  /** 模块菜单名称 */
  modelName?:
    | string
    | undefined;
  /** 模块下面的页面列表 */
  pages?: MenuPageItem[] | undefined;
}

/** 模块页面 */
export interface MenuPageItem {
  /** 页面菜单ID */
  pageId?:
    | number
    | undefined;
  /** 页面菜单名称 */
  pageName?:
    | string
    | undefined;
  /** 页面菜单权限 */
  permissions?: MenuPagePermissions[] | undefined;
}

/** 模块页面权限 */
export interface MenuPagePermissions {
  /** 权限ID */
  permissionId?:
    | number
    | undefined;
  /** 权限名称 */
  permissionName?:
    | string
    | undefined;
  /** 权限类型 */
  permissionType?:
    | string
    | undefined;
  /** 权限类型名称 */
  permissionTypeName?: string | undefined;
}

/** 菜单权限 */
export interface MenuPermissionItem {
  id?: number | undefined;
  name?: string | undefined;
  key?: string | undefined;
  type?: string | undefined;
  typeName?: string | undefined;
  Describe?: string | undefined;
  enabled?: boolean | undefined;
  menuId?: number | undefined;
}

function createBaseReqAdminMenuList(): ReqAdminMenuList {
  return { base: undefined, key: "", path: "", name: "", parentId: 0 };
}

export const ReqAdminMenuList: MessageFns<ReqAdminMenuList> = {
  encode(message: ReqAdminMenuList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.base !== undefined) {
      ReqListBase.encode(message.base, writer.uint32(10).fork()).join();
    }
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(18).string(message.key);
    }
    if (message.path !== undefined && message.path !== "") {
      writer.uint32(26).string(message.path);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.parentId !== undefined && message.parentId !== 0) {
      writer.uint32(40).int32(message.parentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqAdminMenuList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqAdminMenuList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.base = ReqListBase.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.parentId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqAdminMenuList {
    return {
      base: isSet(object.base) ? ReqListBase.fromJSON(object.base) : undefined,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      parentId: isSet(object.parentId) ? globalThis.Number(object.parentId) : 0,
    };
  },

  toJSON(message: ReqAdminMenuList): unknown {
    const obj: any = {};
    if (message.base !== undefined) {
      obj.base = ReqListBase.toJSON(message.base);
    }
    if (message.key !== undefined && message.key !== "") {
      obj.key = message.key;
    }
    if (message.path !== undefined && message.path !== "") {
      obj.path = message.path;
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.parentId !== undefined && message.parentId !== 0) {
      obj.parentId = Math.round(message.parentId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqAdminMenuList>, I>>(base?: I): ReqAdminMenuList {
    return ReqAdminMenuList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqAdminMenuList>, I>>(object: I): ReqAdminMenuList {
    const message = createBaseReqAdminMenuList();
    message.base = (object.base !== undefined && object.base !== null)
      ? ReqListBase.fromPartial(object.base)
      : undefined;
    message.key = object.key ?? "";
    message.path = object.path ?? "";
    message.name = object.name ?? "";
    message.parentId = object.parentId ?? 0;
    return message;
  },
};

function createBaseRespAdminMenuListData(): RespAdminMenuListData {
  return { total: 0, list: [] };
}

export const RespAdminMenuListData: MessageFns<RespAdminMenuListData> = {
  encode(message: RespAdminMenuListData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.total !== undefined && message.total !== 0) {
      writer.uint32(8).int64(message.total);
    }
    if (message.list !== undefined && message.list.length !== 0) {
      for (const v of message.list) {
        MenuItem.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespAdminMenuListData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespAdminMenuListData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.total = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const el = MenuItem.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.list!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RespAdminMenuListData {
    return {
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      list: globalThis.Array.isArray(object?.list) ? object.list.map((e: any) => MenuItem.fromJSON(e)) : [],
    };
  },

  toJSON(message: RespAdminMenuListData): unknown {
    const obj: any = {};
    if (message.total !== undefined && message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    if (message.list?.length) {
      obj.list = message.list.map((e) => MenuItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RespAdminMenuListData>, I>>(base?: I): RespAdminMenuListData {
    return RespAdminMenuListData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespAdminMenuListData>, I>>(object: I): RespAdminMenuListData {
    const message = createBaseRespAdminMenuListData();
    message.total = object.total ?? 0;
    message.list = object.list?.map((e) => MenuItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReqAdminMenuAdd(): ReqAdminMenuAdd {
  return {
    key: "",
    path: "",
    name: "",
    parentId: 0,
    describe: "",
    redirect: "",
    icon: "",
    hideChildrenInMenu: false,
    hideInMenu: false,
    enabled: false,
    sort: 0,
    component: "",
  };
}

export const ReqAdminMenuAdd: MessageFns<ReqAdminMenuAdd> = {
  encode(message: ReqAdminMenuAdd, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.path !== undefined && message.path !== "") {
      writer.uint32(18).string(message.path);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.parentId !== undefined && message.parentId !== 0) {
      writer.uint32(32).int32(message.parentId);
    }
    if (message.describe !== undefined && message.describe !== "") {
      writer.uint32(42).string(message.describe);
    }
    if (message.redirect !== undefined && message.redirect !== "") {
      writer.uint32(50).string(message.redirect);
    }
    if (message.icon !== undefined && message.icon !== "") {
      writer.uint32(58).string(message.icon);
    }
    if (message.hideChildrenInMenu !== undefined && message.hideChildrenInMenu !== false) {
      writer.uint32(64).bool(message.hideChildrenInMenu);
    }
    if (message.hideInMenu !== undefined && message.hideInMenu !== false) {
      writer.uint32(72).bool(message.hideInMenu);
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      writer.uint32(80).bool(message.enabled);
    }
    if (message.sort !== undefined && message.sort !== 0) {
      writer.uint32(88).int32(message.sort);
    }
    if (message.component !== undefined && message.component !== "") {
      writer.uint32(98).string(message.component);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqAdminMenuAdd {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqAdminMenuAdd();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.parentId = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.describe = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.redirect = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.icon = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.hideChildrenInMenu = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.hideInMenu = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.sort = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.component = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqAdminMenuAdd {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      parentId: isSet(object.parentId) ? globalThis.Number(object.parentId) : 0,
      describe: isSet(object.describe) ? globalThis.String(object.describe) : "",
      redirect: isSet(object.redirect) ? globalThis.String(object.redirect) : "",
      icon: isSet(object.icon) ? globalThis.String(object.icon) : "",
      hideChildrenInMenu: isSet(object.hideChildrenInMenu) ? globalThis.Boolean(object.hideChildrenInMenu) : false,
      hideInMenu: isSet(object.hideInMenu) ? globalThis.Boolean(object.hideInMenu) : false,
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
      sort: isSet(object.sort) ? globalThis.Number(object.sort) : 0,
      component: isSet(object.component) ? globalThis.String(object.component) : "",
    };
  },

  toJSON(message: ReqAdminMenuAdd): unknown {
    const obj: any = {};
    if (message.key !== undefined && message.key !== "") {
      obj.key = message.key;
    }
    if (message.path !== undefined && message.path !== "") {
      obj.path = message.path;
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.parentId !== undefined && message.parentId !== 0) {
      obj.parentId = Math.round(message.parentId);
    }
    if (message.describe !== undefined && message.describe !== "") {
      obj.describe = message.describe;
    }
    if (message.redirect !== undefined && message.redirect !== "") {
      obj.redirect = message.redirect;
    }
    if (message.icon !== undefined && message.icon !== "") {
      obj.icon = message.icon;
    }
    if (message.hideChildrenInMenu !== undefined && message.hideChildrenInMenu !== false) {
      obj.hideChildrenInMenu = message.hideChildrenInMenu;
    }
    if (message.hideInMenu !== undefined && message.hideInMenu !== false) {
      obj.hideInMenu = message.hideInMenu;
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    if (message.sort !== undefined && message.sort !== 0) {
      obj.sort = Math.round(message.sort);
    }
    if (message.component !== undefined && message.component !== "") {
      obj.component = message.component;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqAdminMenuAdd>, I>>(base?: I): ReqAdminMenuAdd {
    return ReqAdminMenuAdd.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqAdminMenuAdd>, I>>(object: I): ReqAdminMenuAdd {
    const message = createBaseReqAdminMenuAdd();
    message.key = object.key ?? "";
    message.path = object.path ?? "";
    message.name = object.name ?? "";
    message.parentId = object.parentId ?? 0;
    message.describe = object.describe ?? "";
    message.redirect = object.redirect ?? "";
    message.icon = object.icon ?? "";
    message.hideChildrenInMenu = object.hideChildrenInMenu ?? false;
    message.hideInMenu = object.hideInMenu ?? false;
    message.enabled = object.enabled ?? false;
    message.sort = object.sort ?? 0;
    message.component = object.component ?? "";
    return message;
  },
};

function createBaseRespAdminMenuAddData(): RespAdminMenuAddData {
  return {};
}

export const RespAdminMenuAddData: MessageFns<RespAdminMenuAddData> = {
  encode(_: RespAdminMenuAddData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespAdminMenuAddData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespAdminMenuAddData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespAdminMenuAddData {
    return {};
  },

  toJSON(_: RespAdminMenuAddData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespAdminMenuAddData>, I>>(base?: I): RespAdminMenuAddData {
    return RespAdminMenuAddData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespAdminMenuAddData>, I>>(_: I): RespAdminMenuAddData {
    const message = createBaseRespAdminMenuAddData();
    return message;
  },
};

function createBaseReqAdminMenuInfo(): ReqAdminMenuInfo {
  return { menuId: 0 };
}

export const ReqAdminMenuInfo: MessageFns<ReqAdminMenuInfo> = {
  encode(message: ReqAdminMenuInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.menuId !== undefined && message.menuId !== 0) {
      writer.uint32(8).int32(message.menuId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqAdminMenuInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqAdminMenuInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.menuId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqAdminMenuInfo {
    return { menuId: isSet(object.menuId) ? globalThis.Number(object.menuId) : 0 };
  },

  toJSON(message: ReqAdminMenuInfo): unknown {
    const obj: any = {};
    if (message.menuId !== undefined && message.menuId !== 0) {
      obj.menuId = Math.round(message.menuId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqAdminMenuInfo>, I>>(base?: I): ReqAdminMenuInfo {
    return ReqAdminMenuInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqAdminMenuInfo>, I>>(object: I): ReqAdminMenuInfo {
    const message = createBaseReqAdminMenuInfo();
    message.menuId = object.menuId ?? 0;
    return message;
  },
};

function createBaseRespAdminMenuInfoData(): RespAdminMenuInfoData {
  return { data: undefined };
}

export const RespAdminMenuInfoData: MessageFns<RespAdminMenuInfoData> = {
  encode(message: RespAdminMenuInfoData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      AdminMenuModel.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespAdminMenuInfoData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespAdminMenuInfoData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = AdminMenuModel.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RespAdminMenuInfoData {
    return { data: isSet(object.data) ? AdminMenuModel.fromJSON(object.data) : undefined };
  },

  toJSON(message: RespAdminMenuInfoData): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = AdminMenuModel.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RespAdminMenuInfoData>, I>>(base?: I): RespAdminMenuInfoData {
    return RespAdminMenuInfoData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespAdminMenuInfoData>, I>>(object: I): RespAdminMenuInfoData {
    const message = createBaseRespAdminMenuInfoData();
    message.data = (object.data !== undefined && object.data !== null)
      ? AdminMenuModel.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseReqAdminMenuEdit(): ReqAdminMenuEdit {
  return {
    id: 0,
    parentId: 0,
    path: "",
    name: "",
    key: "",
    describe: "",
    icon: "",
    sort: 0,
    redirect: "",
    component: "",
    isHideInMenu: false,
    isHideChildrenInMenu: false,
    isEnabled: false,
  };
}

export const ReqAdminMenuEdit: MessageFns<ReqAdminMenuEdit> = {
  encode(message: ReqAdminMenuEdit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.parentId !== undefined && message.parentId !== 0) {
      writer.uint32(16).int32(message.parentId);
    }
    if (message.path !== undefined && message.path !== "") {
      writer.uint32(26).string(message.path);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(42).string(message.key);
    }
    if (message.describe !== undefined && message.describe !== "") {
      writer.uint32(50).string(message.describe);
    }
    if (message.icon !== undefined && message.icon !== "") {
      writer.uint32(58).string(message.icon);
    }
    if (message.sort !== undefined && message.sort !== 0) {
      writer.uint32(64).int32(message.sort);
    }
    if (message.redirect !== undefined && message.redirect !== "") {
      writer.uint32(74).string(message.redirect);
    }
    if (message.component !== undefined && message.component !== "") {
      writer.uint32(82).string(message.component);
    }
    if (message.isHideInMenu !== undefined && message.isHideInMenu !== false) {
      writer.uint32(88).bool(message.isHideInMenu);
    }
    if (message.isHideChildrenInMenu !== undefined && message.isHideChildrenInMenu !== false) {
      writer.uint32(96).bool(message.isHideChildrenInMenu);
    }
    if (message.isEnabled !== undefined && message.isEnabled !== false) {
      writer.uint32(104).bool(message.isEnabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqAdminMenuEdit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqAdminMenuEdit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.parentId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.describe = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.icon = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.sort = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.redirect = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.component = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.isHideInMenu = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.isHideChildrenInMenu = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.isEnabled = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqAdminMenuEdit {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      parentId: isSet(object.parentId) ? globalThis.Number(object.parentId) : 0,
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      describe: isSet(object.describe) ? globalThis.String(object.describe) : "",
      icon: isSet(object.icon) ? globalThis.String(object.icon) : "",
      sort: isSet(object.sort) ? globalThis.Number(object.sort) : 0,
      redirect: isSet(object.redirect) ? globalThis.String(object.redirect) : "",
      component: isSet(object.component) ? globalThis.String(object.component) : "",
      isHideInMenu: isSet(object.isHideInMenu) ? globalThis.Boolean(object.isHideInMenu) : false,
      isHideChildrenInMenu: isSet(object.isHideChildrenInMenu)
        ? globalThis.Boolean(object.isHideChildrenInMenu)
        : false,
      isEnabled: isSet(object.isEnabled) ? globalThis.Boolean(object.isEnabled) : false,
    };
  },

  toJSON(message: ReqAdminMenuEdit): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.parentId !== undefined && message.parentId !== 0) {
      obj.parentId = Math.round(message.parentId);
    }
    if (message.path !== undefined && message.path !== "") {
      obj.path = message.path;
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.key !== undefined && message.key !== "") {
      obj.key = message.key;
    }
    if (message.describe !== undefined && message.describe !== "") {
      obj.describe = message.describe;
    }
    if (message.icon !== undefined && message.icon !== "") {
      obj.icon = message.icon;
    }
    if (message.sort !== undefined && message.sort !== 0) {
      obj.sort = Math.round(message.sort);
    }
    if (message.redirect !== undefined && message.redirect !== "") {
      obj.redirect = message.redirect;
    }
    if (message.component !== undefined && message.component !== "") {
      obj.component = message.component;
    }
    if (message.isHideInMenu !== undefined && message.isHideInMenu !== false) {
      obj.isHideInMenu = message.isHideInMenu;
    }
    if (message.isHideChildrenInMenu !== undefined && message.isHideChildrenInMenu !== false) {
      obj.isHideChildrenInMenu = message.isHideChildrenInMenu;
    }
    if (message.isEnabled !== undefined && message.isEnabled !== false) {
      obj.isEnabled = message.isEnabled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqAdminMenuEdit>, I>>(base?: I): ReqAdminMenuEdit {
    return ReqAdminMenuEdit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqAdminMenuEdit>, I>>(object: I): ReqAdminMenuEdit {
    const message = createBaseReqAdminMenuEdit();
    message.id = object.id ?? 0;
    message.parentId = object.parentId ?? 0;
    message.path = object.path ?? "";
    message.name = object.name ?? "";
    message.key = object.key ?? "";
    message.describe = object.describe ?? "";
    message.icon = object.icon ?? "";
    message.sort = object.sort ?? 0;
    message.redirect = object.redirect ?? "";
    message.component = object.component ?? "";
    message.isHideInMenu = object.isHideInMenu ?? false;
    message.isHideChildrenInMenu = object.isHideChildrenInMenu ?? false;
    message.isEnabled = object.isEnabled ?? false;
    return message;
  },
};

function createBaseRespAdminMenuEditData(): RespAdminMenuEditData {
  return {};
}

export const RespAdminMenuEditData: MessageFns<RespAdminMenuEditData> = {
  encode(_: RespAdminMenuEditData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespAdminMenuEditData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespAdminMenuEditData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespAdminMenuEditData {
    return {};
  },

  toJSON(_: RespAdminMenuEditData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespAdminMenuEditData>, I>>(base?: I): RespAdminMenuEditData {
    return RespAdminMenuEditData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespAdminMenuEditData>, I>>(_: I): RespAdminMenuEditData {
    const message = createBaseRespAdminMenuEditData();
    return message;
  },
};

function createBaseReqAdminMenuEnable(): ReqAdminMenuEnable {
  return { menuId: 0, enabled: false };
}

export const ReqAdminMenuEnable: MessageFns<ReqAdminMenuEnable> = {
  encode(message: ReqAdminMenuEnable, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.menuId !== undefined && message.menuId !== 0) {
      writer.uint32(8).int32(message.menuId);
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      writer.uint32(16).bool(message.enabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqAdminMenuEnable {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqAdminMenuEnable();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.menuId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqAdminMenuEnable {
    return {
      menuId: isSet(object.menuId) ? globalThis.Number(object.menuId) : 0,
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
    };
  },

  toJSON(message: ReqAdminMenuEnable): unknown {
    const obj: any = {};
    if (message.menuId !== undefined && message.menuId !== 0) {
      obj.menuId = Math.round(message.menuId);
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqAdminMenuEnable>, I>>(base?: I): ReqAdminMenuEnable {
    return ReqAdminMenuEnable.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqAdminMenuEnable>, I>>(object: I): ReqAdminMenuEnable {
    const message = createBaseReqAdminMenuEnable();
    message.menuId = object.menuId ?? 0;
    message.enabled = object.enabled ?? false;
    return message;
  },
};

function createBaseRespAdminMenuEnableData(): RespAdminMenuEnableData {
  return {};
}

export const RespAdminMenuEnableData: MessageFns<RespAdminMenuEnableData> = {
  encode(_: RespAdminMenuEnableData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespAdminMenuEnableData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespAdminMenuEnableData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespAdminMenuEnableData {
    return {};
  },

  toJSON(_: RespAdminMenuEnableData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespAdminMenuEnableData>, I>>(base?: I): RespAdminMenuEnableData {
    return RespAdminMenuEnableData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespAdminMenuEnableData>, I>>(_: I): RespAdminMenuEnableData {
    const message = createBaseRespAdminMenuEnableData();
    return message;
  },
};

function createBaseReqAdminMenuShow(): ReqAdminMenuShow {
  return { menuId: 0, field: "", show: false };
}

export const ReqAdminMenuShow: MessageFns<ReqAdminMenuShow> = {
  encode(message: ReqAdminMenuShow, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.menuId !== undefined && message.menuId !== 0) {
      writer.uint32(8).int32(message.menuId);
    }
    if (message.field !== undefined && message.field !== "") {
      writer.uint32(18).string(message.field);
    }
    if (message.show !== undefined && message.show !== false) {
      writer.uint32(24).bool(message.show);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqAdminMenuShow {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqAdminMenuShow();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.menuId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.field = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.show = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqAdminMenuShow {
    return {
      menuId: isSet(object.menuId) ? globalThis.Number(object.menuId) : 0,
      field: isSet(object.field) ? globalThis.String(object.field) : "",
      show: isSet(object.show) ? globalThis.Boolean(object.show) : false,
    };
  },

  toJSON(message: ReqAdminMenuShow): unknown {
    const obj: any = {};
    if (message.menuId !== undefined && message.menuId !== 0) {
      obj.menuId = Math.round(message.menuId);
    }
    if (message.field !== undefined && message.field !== "") {
      obj.field = message.field;
    }
    if (message.show !== undefined && message.show !== false) {
      obj.show = message.show;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqAdminMenuShow>, I>>(base?: I): ReqAdminMenuShow {
    return ReqAdminMenuShow.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqAdminMenuShow>, I>>(object: I): ReqAdminMenuShow {
    const message = createBaseReqAdminMenuShow();
    message.menuId = object.menuId ?? 0;
    message.field = object.field ?? "";
    message.show = object.show ?? false;
    return message;
  },
};

function createBaseRespAdminMenuShow(): RespAdminMenuShow {
  return {};
}

export const RespAdminMenuShow: MessageFns<RespAdminMenuShow> = {
  encode(_: RespAdminMenuShow, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespAdminMenuShow {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespAdminMenuShow();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespAdminMenuShow {
    return {};
  },

  toJSON(_: RespAdminMenuShow): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespAdminMenuShow>, I>>(base?: I): RespAdminMenuShow {
    return RespAdminMenuShow.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespAdminMenuShow>, I>>(_: I): RespAdminMenuShow {
    const message = createBaseRespAdminMenuShow();
    return message;
  },
};

function createBaseReqAdminMenuDelete(): ReqAdminMenuDelete {
  return { menuId: 0 };
}

export const ReqAdminMenuDelete: MessageFns<ReqAdminMenuDelete> = {
  encode(message: ReqAdminMenuDelete, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.menuId !== undefined && message.menuId !== 0) {
      writer.uint32(8).int32(message.menuId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqAdminMenuDelete {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqAdminMenuDelete();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.menuId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqAdminMenuDelete {
    return { menuId: isSet(object.menuId) ? globalThis.Number(object.menuId) : 0 };
  },

  toJSON(message: ReqAdminMenuDelete): unknown {
    const obj: any = {};
    if (message.menuId !== undefined && message.menuId !== 0) {
      obj.menuId = Math.round(message.menuId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqAdminMenuDelete>, I>>(base?: I): ReqAdminMenuDelete {
    return ReqAdminMenuDelete.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqAdminMenuDelete>, I>>(object: I): ReqAdminMenuDelete {
    const message = createBaseReqAdminMenuDelete();
    message.menuId = object.menuId ?? 0;
    return message;
  },
};

function createBaseRespAdminMenuDeleteData(): RespAdminMenuDeleteData {
  return {};
}

export const RespAdminMenuDeleteData: MessageFns<RespAdminMenuDeleteData> = {
  encode(_: RespAdminMenuDeleteData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespAdminMenuDeleteData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespAdminMenuDeleteData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespAdminMenuDeleteData {
    return {};
  },

  toJSON(_: RespAdminMenuDeleteData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespAdminMenuDeleteData>, I>>(base?: I): RespAdminMenuDeleteData {
    return RespAdminMenuDeleteData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespAdminMenuDeleteData>, I>>(_: I): RespAdminMenuDeleteData {
    const message = createBaseRespAdminMenuDeleteData();
    return message;
  },
};

function createBaseReqAdminMenuPermissions(): ReqAdminMenuPermissions {
  return { menuId: 0 };
}

export const ReqAdminMenuPermissions: MessageFns<ReqAdminMenuPermissions> = {
  encode(message: ReqAdminMenuPermissions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.menuId !== undefined && message.menuId !== 0) {
      writer.uint32(8).int32(message.menuId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqAdminMenuPermissions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqAdminMenuPermissions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.menuId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqAdminMenuPermissions {
    return { menuId: isSet(object.menuId) ? globalThis.Number(object.menuId) : 0 };
  },

  toJSON(message: ReqAdminMenuPermissions): unknown {
    const obj: any = {};
    if (message.menuId !== undefined && message.menuId !== 0) {
      obj.menuId = Math.round(message.menuId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqAdminMenuPermissions>, I>>(base?: I): ReqAdminMenuPermissions {
    return ReqAdminMenuPermissions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqAdminMenuPermissions>, I>>(object: I): ReqAdminMenuPermissions {
    const message = createBaseReqAdminMenuPermissions();
    message.menuId = object.menuId ?? 0;
    return message;
  },
};

function createBaseRespAdminMenuPermissionsData(): RespAdminMenuPermissionsData {
  return { menuInfo: undefined, permissions: [] };
}

export const RespAdminMenuPermissionsData: MessageFns<RespAdminMenuPermissionsData> = {
  encode(message: RespAdminMenuPermissionsData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.menuInfo !== undefined) {
      AdminMenuModel.encode(message.menuInfo, writer.uint32(10).fork()).join();
    }
    if (message.permissions !== undefined && message.permissions.length !== 0) {
      for (const v of message.permissions) {
        MenuPermissionItem.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespAdminMenuPermissionsData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespAdminMenuPermissionsData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.menuInfo = AdminMenuModel.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const el = MenuPermissionItem.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.permissions!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RespAdminMenuPermissionsData {
    return {
      menuInfo: isSet(object.menuInfo) ? AdminMenuModel.fromJSON(object.menuInfo) : undefined,
      permissions: globalThis.Array.isArray(object?.permissions)
        ? object.permissions.map((e: any) => MenuPermissionItem.fromJSON(e))
        : [],
    };
  },

  toJSON(message: RespAdminMenuPermissionsData): unknown {
    const obj: any = {};
    if (message.menuInfo !== undefined) {
      obj.menuInfo = AdminMenuModel.toJSON(message.menuInfo);
    }
    if (message.permissions?.length) {
      obj.permissions = message.permissions.map((e) => MenuPermissionItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RespAdminMenuPermissionsData>, I>>(base?: I): RespAdminMenuPermissionsData {
    return RespAdminMenuPermissionsData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespAdminMenuPermissionsData>, I>>(object: I): RespAdminMenuPermissionsData {
    const message = createBaseRespAdminMenuPermissionsData();
    message.menuInfo = (object.menuInfo !== undefined && object.menuInfo !== null)
      ? AdminMenuModel.fromPartial(object.menuInfo)
      : undefined;
    message.permissions = object.permissions?.map((e) => MenuPermissionItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReqAdminMenuPages(): ReqAdminMenuPages {
  return { all: false };
}

export const ReqAdminMenuPages: MessageFns<ReqAdminMenuPages> = {
  encode(message: ReqAdminMenuPages, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.all !== undefined && message.all !== false) {
      writer.uint32(8).bool(message.all);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqAdminMenuPages {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqAdminMenuPages();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.all = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqAdminMenuPages {
    return { all: isSet(object.all) ? globalThis.Boolean(object.all) : false };
  },

  toJSON(message: ReqAdminMenuPages): unknown {
    const obj: any = {};
    if (message.all !== undefined && message.all !== false) {
      obj.all = message.all;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqAdminMenuPages>, I>>(base?: I): ReqAdminMenuPages {
    return ReqAdminMenuPages.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqAdminMenuPages>, I>>(object: I): ReqAdminMenuPages {
    const message = createBaseReqAdminMenuPages();
    message.all = object.all ?? false;
    return message;
  },
};

function createBaseReqAdminMenuMode(): ReqAdminMenuMode {
  return {};
}

export const ReqAdminMenuMode: MessageFns<ReqAdminMenuMode> = {
  encode(_: ReqAdminMenuMode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqAdminMenuMode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqAdminMenuMode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ReqAdminMenuMode {
    return {};
  },

  toJSON(_: ReqAdminMenuMode): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqAdminMenuMode>, I>>(base?: I): ReqAdminMenuMode {
    return ReqAdminMenuMode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqAdminMenuMode>, I>>(_: I): ReqAdminMenuMode {
    const message = createBaseReqAdminMenuMode();
    return message;
  },
};

function createBaseRespAdminMenuModeData(): RespAdminMenuModeData {
  return { modes: [] };
}

export const RespAdminMenuModeData: MessageFns<RespAdminMenuModeData> = {
  encode(message: RespAdminMenuModeData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.modes !== undefined && message.modes.length !== 0) {
      for (const v of message.modes) {
        MenuModeItem.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespAdminMenuModeData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespAdminMenuModeData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const el = MenuModeItem.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.modes!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RespAdminMenuModeData {
    return {
      modes: globalThis.Array.isArray(object?.modes) ? object.modes.map((e: any) => MenuModeItem.fromJSON(e)) : [],
    };
  },

  toJSON(message: RespAdminMenuModeData): unknown {
    const obj: any = {};
    if (message.modes?.length) {
      obj.modes = message.modes.map((e) => MenuModeItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RespAdminMenuModeData>, I>>(base?: I): RespAdminMenuModeData {
    return RespAdminMenuModeData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespAdminMenuModeData>, I>>(object: I): RespAdminMenuModeData {
    const message = createBaseRespAdminMenuModeData();
    message.modes = object.modes?.map((e) => MenuModeItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMenuItem(): MenuItem {
  return {
    key: "",
    path: "",
    name: "",
    icon: "",
    component: "",
    authority: "",
    hideInMenu: false,
    hideChildrenInMenu: false,
    routes: [],
  };
}

export const MenuItem: MessageFns<MenuItem> = {
  encode(message: MenuItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.path !== undefined && message.path !== "") {
      writer.uint32(18).string(message.path);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.icon !== undefined && message.icon !== "") {
      writer.uint32(34).string(message.icon);
    }
    if (message.component !== undefined && message.component !== "") {
      writer.uint32(42).string(message.component);
    }
    if (message.authority !== undefined && message.authority !== "") {
      writer.uint32(50).string(message.authority);
    }
    if (message.hideInMenu !== undefined && message.hideInMenu !== false) {
      writer.uint32(56).bool(message.hideInMenu);
    }
    if (message.hideChildrenInMenu !== undefined && message.hideChildrenInMenu !== false) {
      writer.uint32(64).bool(message.hideChildrenInMenu);
    }
    if (message.routes !== undefined && message.routes.length !== 0) {
      for (const v of message.routes) {
        MenuItem.encode(v!, writer.uint32(74).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MenuItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMenuItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.icon = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.component = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.hideInMenu = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.hideChildrenInMenu = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          const el = MenuItem.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.routes!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MenuItem {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      icon: isSet(object.icon) ? globalThis.String(object.icon) : "",
      component: isSet(object.component) ? globalThis.String(object.component) : "",
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      hideInMenu: isSet(object.hideInMenu) ? globalThis.Boolean(object.hideInMenu) : false,
      hideChildrenInMenu: isSet(object.hideChildrenInMenu) ? globalThis.Boolean(object.hideChildrenInMenu) : false,
      routes: globalThis.Array.isArray(object?.routes) ? object.routes.map((e: any) => MenuItem.fromJSON(e)) : [],
    };
  },

  toJSON(message: MenuItem): unknown {
    const obj: any = {};
    if (message.key !== undefined && message.key !== "") {
      obj.key = message.key;
    }
    if (message.path !== undefined && message.path !== "") {
      obj.path = message.path;
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.icon !== undefined && message.icon !== "") {
      obj.icon = message.icon;
    }
    if (message.component !== undefined && message.component !== "") {
      obj.component = message.component;
    }
    if (message.authority !== undefined && message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.hideInMenu !== undefined && message.hideInMenu !== false) {
      obj.hideInMenu = message.hideInMenu;
    }
    if (message.hideChildrenInMenu !== undefined && message.hideChildrenInMenu !== false) {
      obj.hideChildrenInMenu = message.hideChildrenInMenu;
    }
    if (message.routes?.length) {
      obj.routes = message.routes.map((e) => MenuItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MenuItem>, I>>(base?: I): MenuItem {
    return MenuItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MenuItem>, I>>(object: I): MenuItem {
    const message = createBaseMenuItem();
    message.key = object.key ?? "";
    message.path = object.path ?? "";
    message.name = object.name ?? "";
    message.icon = object.icon ?? "";
    message.component = object.component ?? "";
    message.authority = object.authority ?? "";
    message.hideInMenu = object.hideInMenu ?? false;
    message.hideChildrenInMenu = object.hideChildrenInMenu ?? false;
    message.routes = object.routes?.map((e) => MenuItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMenuTreeItem(): MenuTreeItem {
  return {
    level: 0,
    id: 0,
    key: "",
    name: "",
    parentId: 0,
    describe: "",
    path: "",
    redirect: "",
    component: "",
    sort: 0,
    icon: "",
    hideChildrenInMenu: false,
    hideInMenu: false,
    enabled: false,
    createTime: 0,
    modifyTime: 0,
    children: [],
  };
}

export const MenuTreeItem: MessageFns<MenuTreeItem> = {
  encode(message: MenuTreeItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.level !== undefined && message.level !== 0) {
      writer.uint32(8).int32(message.level);
    }
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(16).int32(message.id);
    }
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(26).string(message.key);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.parentId !== undefined && message.parentId !== 0) {
      writer.uint32(40).int32(message.parentId);
    }
    if (message.describe !== undefined && message.describe !== "") {
      writer.uint32(50).string(message.describe);
    }
    if (message.path !== undefined && message.path !== "") {
      writer.uint32(58).string(message.path);
    }
    if (message.redirect !== undefined && message.redirect !== "") {
      writer.uint32(66).string(message.redirect);
    }
    if (message.component !== undefined && message.component !== "") {
      writer.uint32(74).string(message.component);
    }
    if (message.sort !== undefined && message.sort !== 0) {
      writer.uint32(80).int32(message.sort);
    }
    if (message.icon !== undefined && message.icon !== "") {
      writer.uint32(90).string(message.icon);
    }
    if (message.hideChildrenInMenu !== undefined && message.hideChildrenInMenu !== false) {
      writer.uint32(96).bool(message.hideChildrenInMenu);
    }
    if (message.hideInMenu !== undefined && message.hideInMenu !== false) {
      writer.uint32(104).bool(message.hideInMenu);
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      writer.uint32(112).bool(message.enabled);
    }
    if (message.createTime !== undefined && message.createTime !== 0) {
      writer.uint32(120).int64(message.createTime);
    }
    if (message.modifyTime !== undefined && message.modifyTime !== 0) {
      writer.uint32(128).int64(message.modifyTime);
    }
    if (message.children !== undefined && message.children.length !== 0) {
      for (const v of message.children) {
        MenuTreeItem.encode(v!, writer.uint32(138).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MenuTreeItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMenuTreeItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.level = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.parentId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.describe = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.redirect = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.component = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.sort = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.icon = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.hideChildrenInMenu = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.hideInMenu = reader.bool();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.createTime = longToNumber(reader.int64());
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.modifyTime = longToNumber(reader.int64());
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          const el = MenuTreeItem.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.children!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MenuTreeItem {
    return {
      level: isSet(object.level) ? globalThis.Number(object.level) : 0,
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      parentId: isSet(object.parentId) ? globalThis.Number(object.parentId) : 0,
      describe: isSet(object.describe) ? globalThis.String(object.describe) : "",
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      redirect: isSet(object.redirect) ? globalThis.String(object.redirect) : "",
      component: isSet(object.component) ? globalThis.String(object.component) : "",
      sort: isSet(object.sort) ? globalThis.Number(object.sort) : 0,
      icon: isSet(object.icon) ? globalThis.String(object.icon) : "",
      hideChildrenInMenu: isSet(object.hideChildrenInMenu) ? globalThis.Boolean(object.hideChildrenInMenu) : false,
      hideInMenu: isSet(object.hideInMenu) ? globalThis.Boolean(object.hideInMenu) : false,
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
      createTime: isSet(object.createTime) ? globalThis.Number(object.createTime) : 0,
      modifyTime: isSet(object.modifyTime) ? globalThis.Number(object.modifyTime) : 0,
      children: globalThis.Array.isArray(object?.children)
        ? object.children.map((e: any) => MenuTreeItem.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MenuTreeItem): unknown {
    const obj: any = {};
    if (message.level !== undefined && message.level !== 0) {
      obj.level = Math.round(message.level);
    }
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.key !== undefined && message.key !== "") {
      obj.key = message.key;
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.parentId !== undefined && message.parentId !== 0) {
      obj.parentId = Math.round(message.parentId);
    }
    if (message.describe !== undefined && message.describe !== "") {
      obj.describe = message.describe;
    }
    if (message.path !== undefined && message.path !== "") {
      obj.path = message.path;
    }
    if (message.redirect !== undefined && message.redirect !== "") {
      obj.redirect = message.redirect;
    }
    if (message.component !== undefined && message.component !== "") {
      obj.component = message.component;
    }
    if (message.sort !== undefined && message.sort !== 0) {
      obj.sort = Math.round(message.sort);
    }
    if (message.icon !== undefined && message.icon !== "") {
      obj.icon = message.icon;
    }
    if (message.hideChildrenInMenu !== undefined && message.hideChildrenInMenu !== false) {
      obj.hideChildrenInMenu = message.hideChildrenInMenu;
    }
    if (message.hideInMenu !== undefined && message.hideInMenu !== false) {
      obj.hideInMenu = message.hideInMenu;
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    if (message.createTime !== undefined && message.createTime !== 0) {
      obj.createTime = Math.round(message.createTime);
    }
    if (message.modifyTime !== undefined && message.modifyTime !== 0) {
      obj.modifyTime = Math.round(message.modifyTime);
    }
    if (message.children?.length) {
      obj.children = message.children.map((e) => MenuTreeItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MenuTreeItem>, I>>(base?: I): MenuTreeItem {
    return MenuTreeItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MenuTreeItem>, I>>(object: I): MenuTreeItem {
    const message = createBaseMenuTreeItem();
    message.level = object.level ?? 0;
    message.id = object.id ?? 0;
    message.key = object.key ?? "";
    message.name = object.name ?? "";
    message.parentId = object.parentId ?? 0;
    message.describe = object.describe ?? "";
    message.path = object.path ?? "";
    message.redirect = object.redirect ?? "";
    message.component = object.component ?? "";
    message.sort = object.sort ?? 0;
    message.icon = object.icon ?? "";
    message.hideChildrenInMenu = object.hideChildrenInMenu ?? false;
    message.hideInMenu = object.hideInMenu ?? false;
    message.enabled = object.enabled ?? false;
    message.createTime = object.createTime ?? 0;
    message.modifyTime = object.modifyTime ?? 0;
    message.children = object.children?.map((e) => MenuTreeItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMenuModeItem(): MenuModeItem {
  return { modelId: 0, modelName: "", pages: [] };
}

export const MenuModeItem: MessageFns<MenuModeItem> = {
  encode(message: MenuModeItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.modelId !== undefined && message.modelId !== 0) {
      writer.uint32(8).int32(message.modelId);
    }
    if (message.modelName !== undefined && message.modelName !== "") {
      writer.uint32(18).string(message.modelName);
    }
    if (message.pages !== undefined && message.pages.length !== 0) {
      for (const v of message.pages) {
        MenuPageItem.encode(v!, writer.uint32(26).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MenuModeItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMenuModeItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.modelId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.modelName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const el = MenuPageItem.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.pages!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MenuModeItem {
    return {
      modelId: isSet(object.modelId) ? globalThis.Number(object.modelId) : 0,
      modelName: isSet(object.modelName) ? globalThis.String(object.modelName) : "",
      pages: globalThis.Array.isArray(object?.pages) ? object.pages.map((e: any) => MenuPageItem.fromJSON(e)) : [],
    };
  },

  toJSON(message: MenuModeItem): unknown {
    const obj: any = {};
    if (message.modelId !== undefined && message.modelId !== 0) {
      obj.modelId = Math.round(message.modelId);
    }
    if (message.modelName !== undefined && message.modelName !== "") {
      obj.modelName = message.modelName;
    }
    if (message.pages?.length) {
      obj.pages = message.pages.map((e) => MenuPageItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MenuModeItem>, I>>(base?: I): MenuModeItem {
    return MenuModeItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MenuModeItem>, I>>(object: I): MenuModeItem {
    const message = createBaseMenuModeItem();
    message.modelId = object.modelId ?? 0;
    message.modelName = object.modelName ?? "";
    message.pages = object.pages?.map((e) => MenuPageItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMenuPageItem(): MenuPageItem {
  return { pageId: 0, pageName: "", permissions: [] };
}

export const MenuPageItem: MessageFns<MenuPageItem> = {
  encode(message: MenuPageItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageId !== undefined && message.pageId !== 0) {
      writer.uint32(8).int32(message.pageId);
    }
    if (message.pageName !== undefined && message.pageName !== "") {
      writer.uint32(18).string(message.pageName);
    }
    if (message.permissions !== undefined && message.permissions.length !== 0) {
      for (const v of message.permissions) {
        MenuPagePermissions.encode(v!, writer.uint32(26).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MenuPageItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMenuPageItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pageId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pageName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const el = MenuPagePermissions.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.permissions!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MenuPageItem {
    return {
      pageId: isSet(object.pageId) ? globalThis.Number(object.pageId) : 0,
      pageName: isSet(object.pageName) ? globalThis.String(object.pageName) : "",
      permissions: globalThis.Array.isArray(object?.permissions)
        ? object.permissions.map((e: any) => MenuPagePermissions.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MenuPageItem): unknown {
    const obj: any = {};
    if (message.pageId !== undefined && message.pageId !== 0) {
      obj.pageId = Math.round(message.pageId);
    }
    if (message.pageName !== undefined && message.pageName !== "") {
      obj.pageName = message.pageName;
    }
    if (message.permissions?.length) {
      obj.permissions = message.permissions.map((e) => MenuPagePermissions.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MenuPageItem>, I>>(base?: I): MenuPageItem {
    return MenuPageItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MenuPageItem>, I>>(object: I): MenuPageItem {
    const message = createBaseMenuPageItem();
    message.pageId = object.pageId ?? 0;
    message.pageName = object.pageName ?? "";
    message.permissions = object.permissions?.map((e) => MenuPagePermissions.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMenuPagePermissions(): MenuPagePermissions {
  return { permissionId: 0, permissionName: "", permissionType: "", permissionTypeName: "" };
}

export const MenuPagePermissions: MessageFns<MenuPagePermissions> = {
  encode(message: MenuPagePermissions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.permissionId !== undefined && message.permissionId !== 0) {
      writer.uint32(8).int32(message.permissionId);
    }
    if (message.permissionName !== undefined && message.permissionName !== "") {
      writer.uint32(18).string(message.permissionName);
    }
    if (message.permissionType !== undefined && message.permissionType !== "") {
      writer.uint32(26).string(message.permissionType);
    }
    if (message.permissionTypeName !== undefined && message.permissionTypeName !== "") {
      writer.uint32(34).string(message.permissionTypeName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MenuPagePermissions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMenuPagePermissions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.permissionId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.permissionName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.permissionType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.permissionTypeName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MenuPagePermissions {
    return {
      permissionId: isSet(object.permissionId) ? globalThis.Number(object.permissionId) : 0,
      permissionName: isSet(object.permissionName) ? globalThis.String(object.permissionName) : "",
      permissionType: isSet(object.permissionType) ? globalThis.String(object.permissionType) : "",
      permissionTypeName: isSet(object.permissionTypeName) ? globalThis.String(object.permissionTypeName) : "",
    };
  },

  toJSON(message: MenuPagePermissions): unknown {
    const obj: any = {};
    if (message.permissionId !== undefined && message.permissionId !== 0) {
      obj.permissionId = Math.round(message.permissionId);
    }
    if (message.permissionName !== undefined && message.permissionName !== "") {
      obj.permissionName = message.permissionName;
    }
    if (message.permissionType !== undefined && message.permissionType !== "") {
      obj.permissionType = message.permissionType;
    }
    if (message.permissionTypeName !== undefined && message.permissionTypeName !== "") {
      obj.permissionTypeName = message.permissionTypeName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MenuPagePermissions>, I>>(base?: I): MenuPagePermissions {
    return MenuPagePermissions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MenuPagePermissions>, I>>(object: I): MenuPagePermissions {
    const message = createBaseMenuPagePermissions();
    message.permissionId = object.permissionId ?? 0;
    message.permissionName = object.permissionName ?? "";
    message.permissionType = object.permissionType ?? "";
    message.permissionTypeName = object.permissionTypeName ?? "";
    return message;
  },
};

function createBaseMenuPermissionItem(): MenuPermissionItem {
  return { id: 0, name: "", key: "", type: "", typeName: "", Describe: "", enabled: false, menuId: 0 };
}

export const MenuPermissionItem: MessageFns<MenuPermissionItem> = {
  encode(message: MenuPermissionItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(26).string(message.key);
    }
    if (message.type !== undefined && message.type !== "") {
      writer.uint32(34).string(message.type);
    }
    if (message.typeName !== undefined && message.typeName !== "") {
      writer.uint32(42).string(message.typeName);
    }
    if (message.Describe !== undefined && message.Describe !== "") {
      writer.uint32(50).string(message.Describe);
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      writer.uint32(56).bool(message.enabled);
    }
    if (message.menuId !== undefined && message.menuId !== 0) {
      writer.uint32(64).int32(message.menuId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MenuPermissionItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMenuPermissionItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.typeName = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.Describe = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.menuId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MenuPermissionItem {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      typeName: isSet(object.typeName) ? globalThis.String(object.typeName) : "",
      Describe: isSet(object.Describe) ? globalThis.String(object.Describe) : "",
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
      menuId: isSet(object.menuId) ? globalThis.Number(object.menuId) : 0,
    };
  },

  toJSON(message: MenuPermissionItem): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.key !== undefined && message.key !== "") {
      obj.key = message.key;
    }
    if (message.type !== undefined && message.type !== "") {
      obj.type = message.type;
    }
    if (message.typeName !== undefined && message.typeName !== "") {
      obj.typeName = message.typeName;
    }
    if (message.Describe !== undefined && message.Describe !== "") {
      obj.Describe = message.Describe;
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    if (message.menuId !== undefined && message.menuId !== 0) {
      obj.menuId = Math.round(message.menuId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MenuPermissionItem>, I>>(base?: I): MenuPermissionItem {
    return MenuPermissionItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MenuPermissionItem>, I>>(object: I): MenuPermissionItem {
    const message = createBaseMenuPermissionItem();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.key = object.key ?? "";
    message.type = object.type ?? "";
    message.typeName = object.typeName ?? "";
    message.Describe = object.Describe ?? "";
    message.enabled = object.enabled ?? false;
    message.menuId = object.menuId ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
