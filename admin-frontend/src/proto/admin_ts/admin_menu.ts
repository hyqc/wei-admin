// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v3.21.12
// source: admin_menu.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PermissionApiItem } from "./admin_permission";
import { ReqListBase } from "./common";

export const protobufPackage = "admin";

/** 菜单列表 */
export interface ReqMenuList {
  base?:
    | ReqListBase
    | undefined;
  /** 菜单键名 */
  key?:
    | string
    | undefined;
  /** 菜单路由 */
  path?:
    | string
    | undefined;
  /** 菜单名称 */
  name?:
    | string
    | undefined;
  /** 父级菜单 */
  parentId?: number | undefined;
}

export interface RespMenuListData {
  total?: number | undefined;
  list?: MenuItem[] | undefined;
}

/** 创建菜单 */
export interface ReqMenuAdd {
  /** 菜单键名 */
  key?:
    | string
    | undefined;
  /** 菜单路由 */
  path?:
    | string
    | undefined;
  /** 菜单名称 */
  name?:
    | string
    | undefined;
  /** 父级菜单 */
  parentId?:
    | number
    | undefined;
  /** 菜单描述 */
  describe?:
    | string
    | undefined;
  /** 菜单重定向路由 */
  redirect?:
    | string
    | undefined;
  /** 菜单图标 */
  icon?:
    | string
    | undefined;
  /** 是否隐藏子菜单 */
  hideChildrenInMenu?:
    | boolean
    | undefined;
  /** 是否隐藏菜单 */
  hideInMenu?:
    | boolean
    | undefined;
  /** 是否启用菜单 */
  enabled?:
    | boolean
    | undefined;
  /** 菜单排序值 */
  sort?:
    | number
    | undefined;
  /** 菜单组件 */
  component?: string | undefined;
}

export interface RespMenuAddData {
}

/** 菜单想去 */
export interface ReqMenuInfo {
  /** 菜单ID */
  menuId?: number | undefined;
}

export interface RespMenuInfoData {
  data?: MenuItem | undefined;
}

/** 便捷菜单 */
export interface ReqMenuEdit {
  /** 菜单ID */
  menuId?:
    | number
    | undefined;
  /** 菜单键名 */
  key?:
    | string
    | undefined;
  /** 菜单路由 */
  path?:
    | string
    | undefined;
  /** 菜单名称 */
  name?:
    | string
    | undefined;
  /** 父级菜单 */
  parentId?:
    | number
    | undefined;
  /** 菜单描述 */
  describe?:
    | string
    | undefined;
  /** 菜单重定向路由 */
  redirect?:
    | string
    | undefined;
  /** 菜单图标 */
  icon?:
    | string
    | undefined;
  /** 是否隐藏子菜单 */
  hideChildrenInMenu?:
    | boolean
    | undefined;
  /** 是否隐藏菜单 */
  hideInMenu?:
    | boolean
    | undefined;
  /** 是否启用菜单 */
  enabled?:
    | boolean
    | undefined;
  /** 菜单排序值 */
  sort?:
    | number
    | undefined;
  /** 菜单组件 */
  component?: string | undefined;
}

export interface RespMenuEditData {
}

/** 启用禁用菜单 */
export interface ReqMenuEnable {
  /** 菜单ID */
  menuId?:
    | number
    | undefined;
  /** 是否启用菜单 */
  enabled?: boolean | undefined;
}

export interface RespMenuEnableData {
}

/** 删除菜单 */
export interface ReqMenuDelete {
  /** 菜单ID */
  menuId?: number | undefined;
}

export interface RespMenuDeleteData {
}

/** 菜单权限列表 */
export interface ReqMenuPermissions {
  /** 菜单ID */
  menuId?: number | undefined;
}

export interface RespMenuPermissionsData {
  list?: MenuPermissions[] | undefined;
}

/** 页面菜单列表 */
export interface ReqMenuPages {
  /** 是否顶部插入全部 */
  all?: boolean | undefined;
}

/** 页面模块权限列表 */
export interface ReqMenuMode {
}

export interface RespMenuModeData {
  modes?: MenuModeItem[] | undefined;
}

/**
 * ////////////////////////////////
 * 菜单
 */
export interface MenuItem {
  /** 菜单唯一键 */
  key?:
    | string
    | undefined;
  /** 菜单路由 */
  path?:
    | string
    | undefined;
  /** 菜单名称 */
  name?:
    | string
    | undefined;
  /** 菜单图标 */
  icon?: string | undefined;
  component?: string | undefined;
  authority?: string | undefined;
  hideInMenu?: boolean | undefined;
  hideChildrenInMenu?: boolean | undefined;
  routes?: MenuItem[] | undefined;
}

/** 有效菜单树 */
export interface MenuTreeItem {
  /** 菜单层级 */
  level?:
    | number
    | undefined;
  /** 菜单自增ID */
  id?:
    | number
    | undefined;
  /** 菜单唯一键 */
  key?:
    | string
    | undefined;
  /** 菜单名称 */
  name?:
    | string
    | undefined;
  /** 父级菜单ID */
  parentId?:
    | number
    | undefined;
  /** 菜单描述 */
  describe?:
    | string
    | undefined;
  /** 菜单路径 */
  path?:
    | string
    | undefined;
  /** 重定向地址 */
  redirect?:
    | string
    | undefined;
  /** 组件名称 */
  component?:
    | string
    | undefined;
  /** 菜单排序 */
  sort?:
    | number
    | undefined;
  /** 菜单图标 */
  icon?:
    | string
    | undefined;
  /** 是否在菜单中隐藏子菜单 */
  hideChildrenInMenu?:
    | boolean
    | undefined;
  /** 是否隐藏菜单 */
  hideInMenu?:
    | boolean
    | undefined;
  /** 是否启用 */
  enabled?: boolean | undefined;
  createTime?: number | undefined;
  modifyTime?: number | undefined;
  children?: MenuTreeItem[] | undefined;
}

/** 菜单权限 */
export interface MenuPermissions {
  menu?: MenuTreeItem | undefined;
  permissions?: PermissionApiItem[] | undefined;
}

/** 菜单模块 */
export interface MenuModeItem {
  /** 模块菜单ID */
  modelId?:
    | number
    | undefined;
  /** 模块菜单名称 */
  modelName?:
    | string
    | undefined;
  /** 模块下面的页面列表 */
  pages?: MenuPageItem[] | undefined;
}

/** 模块页面 */
export interface MenuPageItem {
  /** 页面菜单ID */
  pageId?:
    | number
    | undefined;
  /** 页面菜单名称 */
  pageName?:
    | string
    | undefined;
  /** 页面菜单权限 */
  permissions?: MenuPagePermissions[] | undefined;
}

/** 模块页面权限 */
export interface MenuPagePermissions {
  /** 权限ID */
  permissionId?:
    | number
    | undefined;
  /** 权限名称 */
  permissionName?:
    | string
    | undefined;
  /** 权限类型 */
  permissionType?:
    | string
    | undefined;
  /** 权限类型名称 */
  permissionTypeName?: string | undefined;
}

function createBaseReqMenuList(): ReqMenuList {
  return { base: undefined, key: "", path: "", name: "", parentId: 0 };
}

export const ReqMenuList: MessageFns<ReqMenuList> = {
  encode(message: ReqMenuList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.base !== undefined) {
      ReqListBase.encode(message.base, writer.uint32(10).fork()).join();
    }
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(18).string(message.key);
    }
    if (message.path !== undefined && message.path !== "") {
      writer.uint32(26).string(message.path);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.parentId !== undefined && message.parentId !== 0) {
      writer.uint32(40).int32(message.parentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqMenuList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqMenuList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.base = ReqListBase.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.parentId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqMenuList {
    return {
      base: isSet(object.base) ? ReqListBase.fromJSON(object.base) : undefined,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      parentId: isSet(object.parentId) ? globalThis.Number(object.parentId) : 0,
    };
  },

  toJSON(message: ReqMenuList): unknown {
    const obj: any = {};
    if (message.base !== undefined) {
      obj.base = ReqListBase.toJSON(message.base);
    }
    if (message.key !== undefined && message.key !== "") {
      obj.key = message.key;
    }
    if (message.path !== undefined && message.path !== "") {
      obj.path = message.path;
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.parentId !== undefined && message.parentId !== 0) {
      obj.parentId = Math.round(message.parentId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqMenuList>, I>>(base?: I): ReqMenuList {
    return ReqMenuList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqMenuList>, I>>(object: I): ReqMenuList {
    const message = createBaseReqMenuList();
    message.base = (object.base !== undefined && object.base !== null)
      ? ReqListBase.fromPartial(object.base)
      : undefined;
    message.key = object.key ?? "";
    message.path = object.path ?? "";
    message.name = object.name ?? "";
    message.parentId = object.parentId ?? 0;
    return message;
  },
};

function createBaseRespMenuListData(): RespMenuListData {
  return { total: 0, list: [] };
}

export const RespMenuListData: MessageFns<RespMenuListData> = {
  encode(message: RespMenuListData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.total !== undefined && message.total !== 0) {
      writer.uint32(8).int64(message.total);
    }
    if (message.list !== undefined && message.list.length !== 0) {
      for (const v of message.list) {
        MenuItem.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespMenuListData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespMenuListData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.total = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const el = MenuItem.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.list!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RespMenuListData {
    return {
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      list: globalThis.Array.isArray(object?.list) ? object.list.map((e: any) => MenuItem.fromJSON(e)) : [],
    };
  },

  toJSON(message: RespMenuListData): unknown {
    const obj: any = {};
    if (message.total !== undefined && message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    if (message.list?.length) {
      obj.list = message.list.map((e) => MenuItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RespMenuListData>, I>>(base?: I): RespMenuListData {
    return RespMenuListData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespMenuListData>, I>>(object: I): RespMenuListData {
    const message = createBaseRespMenuListData();
    message.total = object.total ?? 0;
    message.list = object.list?.map((e) => MenuItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReqMenuAdd(): ReqMenuAdd {
  return {
    key: "",
    path: "",
    name: "",
    parentId: 0,
    describe: "",
    redirect: "",
    icon: "",
    hideChildrenInMenu: false,
    hideInMenu: false,
    enabled: false,
    sort: 0,
    component: "",
  };
}

export const ReqMenuAdd: MessageFns<ReqMenuAdd> = {
  encode(message: ReqMenuAdd, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.path !== undefined && message.path !== "") {
      writer.uint32(18).string(message.path);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.parentId !== undefined && message.parentId !== 0) {
      writer.uint32(32).int32(message.parentId);
    }
    if (message.describe !== undefined && message.describe !== "") {
      writer.uint32(42).string(message.describe);
    }
    if (message.redirect !== undefined && message.redirect !== "") {
      writer.uint32(50).string(message.redirect);
    }
    if (message.icon !== undefined && message.icon !== "") {
      writer.uint32(58).string(message.icon);
    }
    if (message.hideChildrenInMenu !== undefined && message.hideChildrenInMenu !== false) {
      writer.uint32(64).bool(message.hideChildrenInMenu);
    }
    if (message.hideInMenu !== undefined && message.hideInMenu !== false) {
      writer.uint32(72).bool(message.hideInMenu);
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      writer.uint32(80).bool(message.enabled);
    }
    if (message.sort !== undefined && message.sort !== 0) {
      writer.uint32(88).int32(message.sort);
    }
    if (message.component !== undefined && message.component !== "") {
      writer.uint32(98).string(message.component);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqMenuAdd {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqMenuAdd();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.parentId = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.describe = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.redirect = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.icon = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.hideChildrenInMenu = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.hideInMenu = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.sort = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.component = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqMenuAdd {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      parentId: isSet(object.parentId) ? globalThis.Number(object.parentId) : 0,
      describe: isSet(object.describe) ? globalThis.String(object.describe) : "",
      redirect: isSet(object.redirect) ? globalThis.String(object.redirect) : "",
      icon: isSet(object.icon) ? globalThis.String(object.icon) : "",
      hideChildrenInMenu: isSet(object.hideChildrenInMenu) ? globalThis.Boolean(object.hideChildrenInMenu) : false,
      hideInMenu: isSet(object.hideInMenu) ? globalThis.Boolean(object.hideInMenu) : false,
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
      sort: isSet(object.sort) ? globalThis.Number(object.sort) : 0,
      component: isSet(object.component) ? globalThis.String(object.component) : "",
    };
  },

  toJSON(message: ReqMenuAdd): unknown {
    const obj: any = {};
    if (message.key !== undefined && message.key !== "") {
      obj.key = message.key;
    }
    if (message.path !== undefined && message.path !== "") {
      obj.path = message.path;
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.parentId !== undefined && message.parentId !== 0) {
      obj.parentId = Math.round(message.parentId);
    }
    if (message.describe !== undefined && message.describe !== "") {
      obj.describe = message.describe;
    }
    if (message.redirect !== undefined && message.redirect !== "") {
      obj.redirect = message.redirect;
    }
    if (message.icon !== undefined && message.icon !== "") {
      obj.icon = message.icon;
    }
    if (message.hideChildrenInMenu !== undefined && message.hideChildrenInMenu !== false) {
      obj.hideChildrenInMenu = message.hideChildrenInMenu;
    }
    if (message.hideInMenu !== undefined && message.hideInMenu !== false) {
      obj.hideInMenu = message.hideInMenu;
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    if (message.sort !== undefined && message.sort !== 0) {
      obj.sort = Math.round(message.sort);
    }
    if (message.component !== undefined && message.component !== "") {
      obj.component = message.component;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqMenuAdd>, I>>(base?: I): ReqMenuAdd {
    return ReqMenuAdd.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqMenuAdd>, I>>(object: I): ReqMenuAdd {
    const message = createBaseReqMenuAdd();
    message.key = object.key ?? "";
    message.path = object.path ?? "";
    message.name = object.name ?? "";
    message.parentId = object.parentId ?? 0;
    message.describe = object.describe ?? "";
    message.redirect = object.redirect ?? "";
    message.icon = object.icon ?? "";
    message.hideChildrenInMenu = object.hideChildrenInMenu ?? false;
    message.hideInMenu = object.hideInMenu ?? false;
    message.enabled = object.enabled ?? false;
    message.sort = object.sort ?? 0;
    message.component = object.component ?? "";
    return message;
  },
};

function createBaseRespMenuAddData(): RespMenuAddData {
  return {};
}

export const RespMenuAddData: MessageFns<RespMenuAddData> = {
  encode(_: RespMenuAddData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespMenuAddData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespMenuAddData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespMenuAddData {
    return {};
  },

  toJSON(_: RespMenuAddData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespMenuAddData>, I>>(base?: I): RespMenuAddData {
    return RespMenuAddData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespMenuAddData>, I>>(_: I): RespMenuAddData {
    const message = createBaseRespMenuAddData();
    return message;
  },
};

function createBaseReqMenuInfo(): ReqMenuInfo {
  return { menuId: 0 };
}

export const ReqMenuInfo: MessageFns<ReqMenuInfo> = {
  encode(message: ReqMenuInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.menuId !== undefined && message.menuId !== 0) {
      writer.uint32(8).int32(message.menuId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqMenuInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqMenuInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.menuId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqMenuInfo {
    return { menuId: isSet(object.menuId) ? globalThis.Number(object.menuId) : 0 };
  },

  toJSON(message: ReqMenuInfo): unknown {
    const obj: any = {};
    if (message.menuId !== undefined && message.menuId !== 0) {
      obj.menuId = Math.round(message.menuId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqMenuInfo>, I>>(base?: I): ReqMenuInfo {
    return ReqMenuInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqMenuInfo>, I>>(object: I): ReqMenuInfo {
    const message = createBaseReqMenuInfo();
    message.menuId = object.menuId ?? 0;
    return message;
  },
};

function createBaseRespMenuInfoData(): RespMenuInfoData {
  return { data: undefined };
}

export const RespMenuInfoData: MessageFns<RespMenuInfoData> = {
  encode(message: RespMenuInfoData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      MenuItem.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespMenuInfoData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespMenuInfoData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = MenuItem.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RespMenuInfoData {
    return { data: isSet(object.data) ? MenuItem.fromJSON(object.data) : undefined };
  },

  toJSON(message: RespMenuInfoData): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = MenuItem.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RespMenuInfoData>, I>>(base?: I): RespMenuInfoData {
    return RespMenuInfoData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespMenuInfoData>, I>>(object: I): RespMenuInfoData {
    const message = createBaseRespMenuInfoData();
    message.data = (object.data !== undefined && object.data !== null) ? MenuItem.fromPartial(object.data) : undefined;
    return message;
  },
};

function createBaseReqMenuEdit(): ReqMenuEdit {
  return {
    menuId: 0,
    key: "",
    path: "",
    name: "",
    parentId: 0,
    describe: "",
    redirect: "",
    icon: "",
    hideChildrenInMenu: false,
    hideInMenu: false,
    enabled: false,
    sort: 0,
    component: "",
  };
}

export const ReqMenuEdit: MessageFns<ReqMenuEdit> = {
  encode(message: ReqMenuEdit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.menuId !== undefined && message.menuId !== 0) {
      writer.uint32(8).int32(message.menuId);
    }
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(18).string(message.key);
    }
    if (message.path !== undefined && message.path !== "") {
      writer.uint32(26).string(message.path);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.parentId !== undefined && message.parentId !== 0) {
      writer.uint32(40).int32(message.parentId);
    }
    if (message.describe !== undefined && message.describe !== "") {
      writer.uint32(50).string(message.describe);
    }
    if (message.redirect !== undefined && message.redirect !== "") {
      writer.uint32(58).string(message.redirect);
    }
    if (message.icon !== undefined && message.icon !== "") {
      writer.uint32(66).string(message.icon);
    }
    if (message.hideChildrenInMenu !== undefined && message.hideChildrenInMenu !== false) {
      writer.uint32(72).bool(message.hideChildrenInMenu);
    }
    if (message.hideInMenu !== undefined && message.hideInMenu !== false) {
      writer.uint32(80).bool(message.hideInMenu);
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      writer.uint32(88).bool(message.enabled);
    }
    if (message.sort !== undefined && message.sort !== 0) {
      writer.uint32(96).int32(message.sort);
    }
    if (message.component !== undefined && message.component !== "") {
      writer.uint32(106).string(message.component);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqMenuEdit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqMenuEdit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.menuId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.parentId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.describe = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.redirect = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.icon = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.hideChildrenInMenu = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.hideInMenu = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.sort = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.component = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqMenuEdit {
    return {
      menuId: isSet(object.menuId) ? globalThis.Number(object.menuId) : 0,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      parentId: isSet(object.parentId) ? globalThis.Number(object.parentId) : 0,
      describe: isSet(object.describe) ? globalThis.String(object.describe) : "",
      redirect: isSet(object.redirect) ? globalThis.String(object.redirect) : "",
      icon: isSet(object.icon) ? globalThis.String(object.icon) : "",
      hideChildrenInMenu: isSet(object.hideChildrenInMenu) ? globalThis.Boolean(object.hideChildrenInMenu) : false,
      hideInMenu: isSet(object.hideInMenu) ? globalThis.Boolean(object.hideInMenu) : false,
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
      sort: isSet(object.sort) ? globalThis.Number(object.sort) : 0,
      component: isSet(object.component) ? globalThis.String(object.component) : "",
    };
  },

  toJSON(message: ReqMenuEdit): unknown {
    const obj: any = {};
    if (message.menuId !== undefined && message.menuId !== 0) {
      obj.menuId = Math.round(message.menuId);
    }
    if (message.key !== undefined && message.key !== "") {
      obj.key = message.key;
    }
    if (message.path !== undefined && message.path !== "") {
      obj.path = message.path;
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.parentId !== undefined && message.parentId !== 0) {
      obj.parentId = Math.round(message.parentId);
    }
    if (message.describe !== undefined && message.describe !== "") {
      obj.describe = message.describe;
    }
    if (message.redirect !== undefined && message.redirect !== "") {
      obj.redirect = message.redirect;
    }
    if (message.icon !== undefined && message.icon !== "") {
      obj.icon = message.icon;
    }
    if (message.hideChildrenInMenu !== undefined && message.hideChildrenInMenu !== false) {
      obj.hideChildrenInMenu = message.hideChildrenInMenu;
    }
    if (message.hideInMenu !== undefined && message.hideInMenu !== false) {
      obj.hideInMenu = message.hideInMenu;
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    if (message.sort !== undefined && message.sort !== 0) {
      obj.sort = Math.round(message.sort);
    }
    if (message.component !== undefined && message.component !== "") {
      obj.component = message.component;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqMenuEdit>, I>>(base?: I): ReqMenuEdit {
    return ReqMenuEdit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqMenuEdit>, I>>(object: I): ReqMenuEdit {
    const message = createBaseReqMenuEdit();
    message.menuId = object.menuId ?? 0;
    message.key = object.key ?? "";
    message.path = object.path ?? "";
    message.name = object.name ?? "";
    message.parentId = object.parentId ?? 0;
    message.describe = object.describe ?? "";
    message.redirect = object.redirect ?? "";
    message.icon = object.icon ?? "";
    message.hideChildrenInMenu = object.hideChildrenInMenu ?? false;
    message.hideInMenu = object.hideInMenu ?? false;
    message.enabled = object.enabled ?? false;
    message.sort = object.sort ?? 0;
    message.component = object.component ?? "";
    return message;
  },
};

function createBaseRespMenuEditData(): RespMenuEditData {
  return {};
}

export const RespMenuEditData: MessageFns<RespMenuEditData> = {
  encode(_: RespMenuEditData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespMenuEditData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespMenuEditData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespMenuEditData {
    return {};
  },

  toJSON(_: RespMenuEditData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespMenuEditData>, I>>(base?: I): RespMenuEditData {
    return RespMenuEditData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespMenuEditData>, I>>(_: I): RespMenuEditData {
    const message = createBaseRespMenuEditData();
    return message;
  },
};

function createBaseReqMenuEnable(): ReqMenuEnable {
  return { menuId: 0, enabled: false };
}

export const ReqMenuEnable: MessageFns<ReqMenuEnable> = {
  encode(message: ReqMenuEnable, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.menuId !== undefined && message.menuId !== 0) {
      writer.uint32(8).int32(message.menuId);
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      writer.uint32(16).bool(message.enabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqMenuEnable {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqMenuEnable();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.menuId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqMenuEnable {
    return {
      menuId: isSet(object.menuId) ? globalThis.Number(object.menuId) : 0,
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
    };
  },

  toJSON(message: ReqMenuEnable): unknown {
    const obj: any = {};
    if (message.menuId !== undefined && message.menuId !== 0) {
      obj.menuId = Math.round(message.menuId);
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqMenuEnable>, I>>(base?: I): ReqMenuEnable {
    return ReqMenuEnable.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqMenuEnable>, I>>(object: I): ReqMenuEnable {
    const message = createBaseReqMenuEnable();
    message.menuId = object.menuId ?? 0;
    message.enabled = object.enabled ?? false;
    return message;
  },
};

function createBaseRespMenuEnableData(): RespMenuEnableData {
  return {};
}

export const RespMenuEnableData: MessageFns<RespMenuEnableData> = {
  encode(_: RespMenuEnableData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespMenuEnableData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespMenuEnableData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespMenuEnableData {
    return {};
  },

  toJSON(_: RespMenuEnableData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespMenuEnableData>, I>>(base?: I): RespMenuEnableData {
    return RespMenuEnableData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespMenuEnableData>, I>>(_: I): RespMenuEnableData {
    const message = createBaseRespMenuEnableData();
    return message;
  },
};

function createBaseReqMenuDelete(): ReqMenuDelete {
  return { menuId: 0 };
}

export const ReqMenuDelete: MessageFns<ReqMenuDelete> = {
  encode(message: ReqMenuDelete, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.menuId !== undefined && message.menuId !== 0) {
      writer.uint32(8).int32(message.menuId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqMenuDelete {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqMenuDelete();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.menuId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqMenuDelete {
    return { menuId: isSet(object.menuId) ? globalThis.Number(object.menuId) : 0 };
  },

  toJSON(message: ReqMenuDelete): unknown {
    const obj: any = {};
    if (message.menuId !== undefined && message.menuId !== 0) {
      obj.menuId = Math.round(message.menuId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqMenuDelete>, I>>(base?: I): ReqMenuDelete {
    return ReqMenuDelete.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqMenuDelete>, I>>(object: I): ReqMenuDelete {
    const message = createBaseReqMenuDelete();
    message.menuId = object.menuId ?? 0;
    return message;
  },
};

function createBaseRespMenuDeleteData(): RespMenuDeleteData {
  return {};
}

export const RespMenuDeleteData: MessageFns<RespMenuDeleteData> = {
  encode(_: RespMenuDeleteData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespMenuDeleteData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespMenuDeleteData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespMenuDeleteData {
    return {};
  },

  toJSON(_: RespMenuDeleteData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespMenuDeleteData>, I>>(base?: I): RespMenuDeleteData {
    return RespMenuDeleteData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespMenuDeleteData>, I>>(_: I): RespMenuDeleteData {
    const message = createBaseRespMenuDeleteData();
    return message;
  },
};

function createBaseReqMenuPermissions(): ReqMenuPermissions {
  return { menuId: 0 };
}

export const ReqMenuPermissions: MessageFns<ReqMenuPermissions> = {
  encode(message: ReqMenuPermissions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.menuId !== undefined && message.menuId !== 0) {
      writer.uint32(8).int32(message.menuId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqMenuPermissions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqMenuPermissions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.menuId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqMenuPermissions {
    return { menuId: isSet(object.menuId) ? globalThis.Number(object.menuId) : 0 };
  },

  toJSON(message: ReqMenuPermissions): unknown {
    const obj: any = {};
    if (message.menuId !== undefined && message.menuId !== 0) {
      obj.menuId = Math.round(message.menuId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqMenuPermissions>, I>>(base?: I): ReqMenuPermissions {
    return ReqMenuPermissions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqMenuPermissions>, I>>(object: I): ReqMenuPermissions {
    const message = createBaseReqMenuPermissions();
    message.menuId = object.menuId ?? 0;
    return message;
  },
};

function createBaseRespMenuPermissionsData(): RespMenuPermissionsData {
  return { list: [] };
}

export const RespMenuPermissionsData: MessageFns<RespMenuPermissionsData> = {
  encode(message: RespMenuPermissionsData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.list !== undefined && message.list.length !== 0) {
      for (const v of message.list) {
        MenuPermissions.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespMenuPermissionsData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespMenuPermissionsData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const el = MenuPermissions.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.list!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RespMenuPermissionsData {
    return {
      list: globalThis.Array.isArray(object?.list) ? object.list.map((e: any) => MenuPermissions.fromJSON(e)) : [],
    };
  },

  toJSON(message: RespMenuPermissionsData): unknown {
    const obj: any = {};
    if (message.list?.length) {
      obj.list = message.list.map((e) => MenuPermissions.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RespMenuPermissionsData>, I>>(base?: I): RespMenuPermissionsData {
    return RespMenuPermissionsData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespMenuPermissionsData>, I>>(object: I): RespMenuPermissionsData {
    const message = createBaseRespMenuPermissionsData();
    message.list = object.list?.map((e) => MenuPermissions.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReqMenuPages(): ReqMenuPages {
  return { all: false };
}

export const ReqMenuPages: MessageFns<ReqMenuPages> = {
  encode(message: ReqMenuPages, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.all !== undefined && message.all !== false) {
      writer.uint32(8).bool(message.all);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqMenuPages {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqMenuPages();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.all = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqMenuPages {
    return { all: isSet(object.all) ? globalThis.Boolean(object.all) : false };
  },

  toJSON(message: ReqMenuPages): unknown {
    const obj: any = {};
    if (message.all !== undefined && message.all !== false) {
      obj.all = message.all;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqMenuPages>, I>>(base?: I): ReqMenuPages {
    return ReqMenuPages.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqMenuPages>, I>>(object: I): ReqMenuPages {
    const message = createBaseReqMenuPages();
    message.all = object.all ?? false;
    return message;
  },
};

function createBaseReqMenuMode(): ReqMenuMode {
  return {};
}

export const ReqMenuMode: MessageFns<ReqMenuMode> = {
  encode(_: ReqMenuMode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqMenuMode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqMenuMode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ReqMenuMode {
    return {};
  },

  toJSON(_: ReqMenuMode): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqMenuMode>, I>>(base?: I): ReqMenuMode {
    return ReqMenuMode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqMenuMode>, I>>(_: I): ReqMenuMode {
    const message = createBaseReqMenuMode();
    return message;
  },
};

function createBaseRespMenuModeData(): RespMenuModeData {
  return { modes: [] };
}

export const RespMenuModeData: MessageFns<RespMenuModeData> = {
  encode(message: RespMenuModeData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.modes !== undefined && message.modes.length !== 0) {
      for (const v of message.modes) {
        MenuModeItem.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespMenuModeData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespMenuModeData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const el = MenuModeItem.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.modes!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RespMenuModeData {
    return {
      modes: globalThis.Array.isArray(object?.modes) ? object.modes.map((e: any) => MenuModeItem.fromJSON(e)) : [],
    };
  },

  toJSON(message: RespMenuModeData): unknown {
    const obj: any = {};
    if (message.modes?.length) {
      obj.modes = message.modes.map((e) => MenuModeItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RespMenuModeData>, I>>(base?: I): RespMenuModeData {
    return RespMenuModeData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespMenuModeData>, I>>(object: I): RespMenuModeData {
    const message = createBaseRespMenuModeData();
    message.modes = object.modes?.map((e) => MenuModeItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMenuItem(): MenuItem {
  return {
    key: "",
    path: "",
    name: "",
    icon: "",
    component: "",
    authority: "",
    hideInMenu: false,
    hideChildrenInMenu: false,
    routes: [],
  };
}

export const MenuItem: MessageFns<MenuItem> = {
  encode(message: MenuItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.path !== undefined && message.path !== "") {
      writer.uint32(18).string(message.path);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.icon !== undefined && message.icon !== "") {
      writer.uint32(34).string(message.icon);
    }
    if (message.component !== undefined && message.component !== "") {
      writer.uint32(42).string(message.component);
    }
    if (message.authority !== undefined && message.authority !== "") {
      writer.uint32(50).string(message.authority);
    }
    if (message.hideInMenu !== undefined && message.hideInMenu !== false) {
      writer.uint32(56).bool(message.hideInMenu);
    }
    if (message.hideChildrenInMenu !== undefined && message.hideChildrenInMenu !== false) {
      writer.uint32(64).bool(message.hideChildrenInMenu);
    }
    if (message.routes !== undefined && message.routes.length !== 0) {
      for (const v of message.routes) {
        MenuItem.encode(v!, writer.uint32(74).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MenuItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMenuItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.icon = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.component = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.hideInMenu = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.hideChildrenInMenu = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          const el = MenuItem.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.routes!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MenuItem {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      icon: isSet(object.icon) ? globalThis.String(object.icon) : "",
      component: isSet(object.component) ? globalThis.String(object.component) : "",
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      hideInMenu: isSet(object.hideInMenu) ? globalThis.Boolean(object.hideInMenu) : false,
      hideChildrenInMenu: isSet(object.hideChildrenInMenu) ? globalThis.Boolean(object.hideChildrenInMenu) : false,
      routes: globalThis.Array.isArray(object?.routes) ? object.routes.map((e: any) => MenuItem.fromJSON(e)) : [],
    };
  },

  toJSON(message: MenuItem): unknown {
    const obj: any = {};
    if (message.key !== undefined && message.key !== "") {
      obj.key = message.key;
    }
    if (message.path !== undefined && message.path !== "") {
      obj.path = message.path;
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.icon !== undefined && message.icon !== "") {
      obj.icon = message.icon;
    }
    if (message.component !== undefined && message.component !== "") {
      obj.component = message.component;
    }
    if (message.authority !== undefined && message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.hideInMenu !== undefined && message.hideInMenu !== false) {
      obj.hideInMenu = message.hideInMenu;
    }
    if (message.hideChildrenInMenu !== undefined && message.hideChildrenInMenu !== false) {
      obj.hideChildrenInMenu = message.hideChildrenInMenu;
    }
    if (message.routes?.length) {
      obj.routes = message.routes.map((e) => MenuItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MenuItem>, I>>(base?: I): MenuItem {
    return MenuItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MenuItem>, I>>(object: I): MenuItem {
    const message = createBaseMenuItem();
    message.key = object.key ?? "";
    message.path = object.path ?? "";
    message.name = object.name ?? "";
    message.icon = object.icon ?? "";
    message.component = object.component ?? "";
    message.authority = object.authority ?? "";
    message.hideInMenu = object.hideInMenu ?? false;
    message.hideChildrenInMenu = object.hideChildrenInMenu ?? false;
    message.routes = object.routes?.map((e) => MenuItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMenuTreeItem(): MenuTreeItem {
  return {
    level: 0,
    id: 0,
    key: "",
    name: "",
    parentId: 0,
    describe: "",
    path: "",
    redirect: "",
    component: "",
    sort: 0,
    icon: "",
    hideChildrenInMenu: false,
    hideInMenu: false,
    enabled: false,
    createTime: 0,
    modifyTime: 0,
    children: [],
  };
}

export const MenuTreeItem: MessageFns<MenuTreeItem> = {
  encode(message: MenuTreeItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.level !== undefined && message.level !== 0) {
      writer.uint32(8).int32(message.level);
    }
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(16).int32(message.id);
    }
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(26).string(message.key);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.parentId !== undefined && message.parentId !== 0) {
      writer.uint32(40).int32(message.parentId);
    }
    if (message.describe !== undefined && message.describe !== "") {
      writer.uint32(50).string(message.describe);
    }
    if (message.path !== undefined && message.path !== "") {
      writer.uint32(58).string(message.path);
    }
    if (message.redirect !== undefined && message.redirect !== "") {
      writer.uint32(66).string(message.redirect);
    }
    if (message.component !== undefined && message.component !== "") {
      writer.uint32(74).string(message.component);
    }
    if (message.sort !== undefined && message.sort !== 0) {
      writer.uint32(80).int32(message.sort);
    }
    if (message.icon !== undefined && message.icon !== "") {
      writer.uint32(90).string(message.icon);
    }
    if (message.hideChildrenInMenu !== undefined && message.hideChildrenInMenu !== false) {
      writer.uint32(96).bool(message.hideChildrenInMenu);
    }
    if (message.hideInMenu !== undefined && message.hideInMenu !== false) {
      writer.uint32(104).bool(message.hideInMenu);
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      writer.uint32(112).bool(message.enabled);
    }
    if (message.createTime !== undefined && message.createTime !== 0) {
      writer.uint32(120).int64(message.createTime);
    }
    if (message.modifyTime !== undefined && message.modifyTime !== 0) {
      writer.uint32(128).int64(message.modifyTime);
    }
    if (message.children !== undefined && message.children.length !== 0) {
      for (const v of message.children) {
        MenuTreeItem.encode(v!, writer.uint32(138).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MenuTreeItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMenuTreeItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.level = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.parentId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.describe = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.redirect = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.component = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.sort = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.icon = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.hideChildrenInMenu = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.hideInMenu = reader.bool();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.createTime = longToNumber(reader.int64());
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.modifyTime = longToNumber(reader.int64());
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          const el = MenuTreeItem.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.children!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MenuTreeItem {
    return {
      level: isSet(object.level) ? globalThis.Number(object.level) : 0,
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      parentId: isSet(object.parentId) ? globalThis.Number(object.parentId) : 0,
      describe: isSet(object.describe) ? globalThis.String(object.describe) : "",
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      redirect: isSet(object.redirect) ? globalThis.String(object.redirect) : "",
      component: isSet(object.component) ? globalThis.String(object.component) : "",
      sort: isSet(object.sort) ? globalThis.Number(object.sort) : 0,
      icon: isSet(object.icon) ? globalThis.String(object.icon) : "",
      hideChildrenInMenu: isSet(object.hideChildrenInMenu) ? globalThis.Boolean(object.hideChildrenInMenu) : false,
      hideInMenu: isSet(object.hideInMenu) ? globalThis.Boolean(object.hideInMenu) : false,
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
      createTime: isSet(object.createTime) ? globalThis.Number(object.createTime) : 0,
      modifyTime: isSet(object.modifyTime) ? globalThis.Number(object.modifyTime) : 0,
      children: globalThis.Array.isArray(object?.children)
        ? object.children.map((e: any) => MenuTreeItem.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MenuTreeItem): unknown {
    const obj: any = {};
    if (message.level !== undefined && message.level !== 0) {
      obj.level = Math.round(message.level);
    }
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.key !== undefined && message.key !== "") {
      obj.key = message.key;
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.parentId !== undefined && message.parentId !== 0) {
      obj.parentId = Math.round(message.parentId);
    }
    if (message.describe !== undefined && message.describe !== "") {
      obj.describe = message.describe;
    }
    if (message.path !== undefined && message.path !== "") {
      obj.path = message.path;
    }
    if (message.redirect !== undefined && message.redirect !== "") {
      obj.redirect = message.redirect;
    }
    if (message.component !== undefined && message.component !== "") {
      obj.component = message.component;
    }
    if (message.sort !== undefined && message.sort !== 0) {
      obj.sort = Math.round(message.sort);
    }
    if (message.icon !== undefined && message.icon !== "") {
      obj.icon = message.icon;
    }
    if (message.hideChildrenInMenu !== undefined && message.hideChildrenInMenu !== false) {
      obj.hideChildrenInMenu = message.hideChildrenInMenu;
    }
    if (message.hideInMenu !== undefined && message.hideInMenu !== false) {
      obj.hideInMenu = message.hideInMenu;
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    if (message.createTime !== undefined && message.createTime !== 0) {
      obj.createTime = Math.round(message.createTime);
    }
    if (message.modifyTime !== undefined && message.modifyTime !== 0) {
      obj.modifyTime = Math.round(message.modifyTime);
    }
    if (message.children?.length) {
      obj.children = message.children.map((e) => MenuTreeItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MenuTreeItem>, I>>(base?: I): MenuTreeItem {
    return MenuTreeItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MenuTreeItem>, I>>(object: I): MenuTreeItem {
    const message = createBaseMenuTreeItem();
    message.level = object.level ?? 0;
    message.id = object.id ?? 0;
    message.key = object.key ?? "";
    message.name = object.name ?? "";
    message.parentId = object.parentId ?? 0;
    message.describe = object.describe ?? "";
    message.path = object.path ?? "";
    message.redirect = object.redirect ?? "";
    message.component = object.component ?? "";
    message.sort = object.sort ?? 0;
    message.icon = object.icon ?? "";
    message.hideChildrenInMenu = object.hideChildrenInMenu ?? false;
    message.hideInMenu = object.hideInMenu ?? false;
    message.enabled = object.enabled ?? false;
    message.createTime = object.createTime ?? 0;
    message.modifyTime = object.modifyTime ?? 0;
    message.children = object.children?.map((e) => MenuTreeItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMenuPermissions(): MenuPermissions {
  return { menu: undefined, permissions: [] };
}

export const MenuPermissions: MessageFns<MenuPermissions> = {
  encode(message: MenuPermissions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.menu !== undefined) {
      MenuTreeItem.encode(message.menu, writer.uint32(10).fork()).join();
    }
    if (message.permissions !== undefined && message.permissions.length !== 0) {
      for (const v of message.permissions) {
        PermissionApiItem.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MenuPermissions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMenuPermissions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.menu = MenuTreeItem.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const el = PermissionApiItem.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.permissions!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MenuPermissions {
    return {
      menu: isSet(object.menu) ? MenuTreeItem.fromJSON(object.menu) : undefined,
      permissions: globalThis.Array.isArray(object?.permissions)
        ? object.permissions.map((e: any) => PermissionApiItem.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MenuPermissions): unknown {
    const obj: any = {};
    if (message.menu !== undefined) {
      obj.menu = MenuTreeItem.toJSON(message.menu);
    }
    if (message.permissions?.length) {
      obj.permissions = message.permissions.map((e) => PermissionApiItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MenuPermissions>, I>>(base?: I): MenuPermissions {
    return MenuPermissions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MenuPermissions>, I>>(object: I): MenuPermissions {
    const message = createBaseMenuPermissions();
    message.menu = (object.menu !== undefined && object.menu !== null)
      ? MenuTreeItem.fromPartial(object.menu)
      : undefined;
    message.permissions = object.permissions?.map((e) => PermissionApiItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMenuModeItem(): MenuModeItem {
  return { modelId: 0, modelName: "", pages: [] };
}

export const MenuModeItem: MessageFns<MenuModeItem> = {
  encode(message: MenuModeItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.modelId !== undefined && message.modelId !== 0) {
      writer.uint32(8).int32(message.modelId);
    }
    if (message.modelName !== undefined && message.modelName !== "") {
      writer.uint32(18).string(message.modelName);
    }
    if (message.pages !== undefined && message.pages.length !== 0) {
      for (const v of message.pages) {
        MenuPageItem.encode(v!, writer.uint32(26).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MenuModeItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMenuModeItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.modelId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.modelName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const el = MenuPageItem.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.pages!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MenuModeItem {
    return {
      modelId: isSet(object.modelId) ? globalThis.Number(object.modelId) : 0,
      modelName: isSet(object.modelName) ? globalThis.String(object.modelName) : "",
      pages: globalThis.Array.isArray(object?.pages) ? object.pages.map((e: any) => MenuPageItem.fromJSON(e)) : [],
    };
  },

  toJSON(message: MenuModeItem): unknown {
    const obj: any = {};
    if (message.modelId !== undefined && message.modelId !== 0) {
      obj.modelId = Math.round(message.modelId);
    }
    if (message.modelName !== undefined && message.modelName !== "") {
      obj.modelName = message.modelName;
    }
    if (message.pages?.length) {
      obj.pages = message.pages.map((e) => MenuPageItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MenuModeItem>, I>>(base?: I): MenuModeItem {
    return MenuModeItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MenuModeItem>, I>>(object: I): MenuModeItem {
    const message = createBaseMenuModeItem();
    message.modelId = object.modelId ?? 0;
    message.modelName = object.modelName ?? "";
    message.pages = object.pages?.map((e) => MenuPageItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMenuPageItem(): MenuPageItem {
  return { pageId: 0, pageName: "", permissions: [] };
}

export const MenuPageItem: MessageFns<MenuPageItem> = {
  encode(message: MenuPageItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageId !== undefined && message.pageId !== 0) {
      writer.uint32(8).int32(message.pageId);
    }
    if (message.pageName !== undefined && message.pageName !== "") {
      writer.uint32(18).string(message.pageName);
    }
    if (message.permissions !== undefined && message.permissions.length !== 0) {
      for (const v of message.permissions) {
        MenuPagePermissions.encode(v!, writer.uint32(26).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MenuPageItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMenuPageItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pageId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pageName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const el = MenuPagePermissions.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.permissions!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MenuPageItem {
    return {
      pageId: isSet(object.pageId) ? globalThis.Number(object.pageId) : 0,
      pageName: isSet(object.pageName) ? globalThis.String(object.pageName) : "",
      permissions: globalThis.Array.isArray(object?.permissions)
        ? object.permissions.map((e: any) => MenuPagePermissions.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MenuPageItem): unknown {
    const obj: any = {};
    if (message.pageId !== undefined && message.pageId !== 0) {
      obj.pageId = Math.round(message.pageId);
    }
    if (message.pageName !== undefined && message.pageName !== "") {
      obj.pageName = message.pageName;
    }
    if (message.permissions?.length) {
      obj.permissions = message.permissions.map((e) => MenuPagePermissions.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MenuPageItem>, I>>(base?: I): MenuPageItem {
    return MenuPageItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MenuPageItem>, I>>(object: I): MenuPageItem {
    const message = createBaseMenuPageItem();
    message.pageId = object.pageId ?? 0;
    message.pageName = object.pageName ?? "";
    message.permissions = object.permissions?.map((e) => MenuPagePermissions.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMenuPagePermissions(): MenuPagePermissions {
  return { permissionId: 0, permissionName: "", permissionType: "", permissionTypeName: "" };
}

export const MenuPagePermissions: MessageFns<MenuPagePermissions> = {
  encode(message: MenuPagePermissions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.permissionId !== undefined && message.permissionId !== 0) {
      writer.uint32(8).int32(message.permissionId);
    }
    if (message.permissionName !== undefined && message.permissionName !== "") {
      writer.uint32(18).string(message.permissionName);
    }
    if (message.permissionType !== undefined && message.permissionType !== "") {
      writer.uint32(26).string(message.permissionType);
    }
    if (message.permissionTypeName !== undefined && message.permissionTypeName !== "") {
      writer.uint32(34).string(message.permissionTypeName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MenuPagePermissions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMenuPagePermissions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.permissionId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.permissionName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.permissionType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.permissionTypeName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MenuPagePermissions {
    return {
      permissionId: isSet(object.permissionId) ? globalThis.Number(object.permissionId) : 0,
      permissionName: isSet(object.permissionName) ? globalThis.String(object.permissionName) : "",
      permissionType: isSet(object.permissionType) ? globalThis.String(object.permissionType) : "",
      permissionTypeName: isSet(object.permissionTypeName) ? globalThis.String(object.permissionTypeName) : "",
    };
  },

  toJSON(message: MenuPagePermissions): unknown {
    const obj: any = {};
    if (message.permissionId !== undefined && message.permissionId !== 0) {
      obj.permissionId = Math.round(message.permissionId);
    }
    if (message.permissionName !== undefined && message.permissionName !== "") {
      obj.permissionName = message.permissionName;
    }
    if (message.permissionType !== undefined && message.permissionType !== "") {
      obj.permissionType = message.permissionType;
    }
    if (message.permissionTypeName !== undefined && message.permissionTypeName !== "") {
      obj.permissionTypeName = message.permissionTypeName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MenuPagePermissions>, I>>(base?: I): MenuPagePermissions {
    return MenuPagePermissions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MenuPagePermissions>, I>>(object: I): MenuPagePermissions {
    const message = createBaseMenuPagePermissions();
    message.permissionId = object.permissionId ?? 0;
    message.permissionName = object.permissionName ?? "";
    message.permissionType = object.permissionType ?? "";
    message.permissionTypeName = object.permissionTypeName ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
