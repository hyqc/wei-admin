/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: admin_menu.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./common";
import * as dependency_2 from "./admin_permission";
import * as pb_1 from "google-protobuf";
export class MenuItem extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        key?: string;
        path?: string;
        name?: string;
        icon?: string;
        component?: string;
        authority?: string;
        routes?: RouteItem[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("key" in data && data.key != undefined) {
                this.key = data.key;
            }
            if ("path" in data && data.path != undefined) {
                this.path = data.path;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("icon" in data && data.icon != undefined) {
                this.icon = data.icon;
            }
            if ("component" in data && data.component != undefined) {
                this.component = data.component;
            }
            if ("authority" in data && data.authority != undefined) {
                this.authority = data.authority;
            }
            if ("routes" in data && data.routes != undefined) {
                this.routes = data.routes;
            }
        }
    }
    get key() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set key(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get path() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set path(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get icon() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set icon(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get component() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set component(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get authority() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set authority(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get routes() {
        return pb_1.Message.getRepeatedWrapperField(this, RouteItem, 7) as RouteItem[];
    }
    set routes(value: RouteItem[]) {
        pb_1.Message.setRepeatedWrapperField(this, 7, value);
    }
    static fromObject(data: {
        key?: string;
        path?: string;
        name?: string;
        icon?: string;
        component?: string;
        authority?: string;
        routes?: ReturnType<typeof RouteItem.prototype.toObject>[];
    }): MenuItem {
        const message = new MenuItem({});
        if (data.key != null) {
            message.key = data.key;
        }
        if (data.path != null) {
            message.path = data.path;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.icon != null) {
            message.icon = data.icon;
        }
        if (data.component != null) {
            message.component = data.component;
        }
        if (data.authority != null) {
            message.authority = data.authority;
        }
        if (data.routes != null) {
            message.routes = data.routes.map(item => RouteItem.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            key?: string;
            path?: string;
            name?: string;
            icon?: string;
            component?: string;
            authority?: string;
            routes?: ReturnType<typeof RouteItem.prototype.toObject>[];
        } = {};
        if (this.key != null) {
            data.key = this.key;
        }
        if (this.path != null) {
            data.path = this.path;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.icon != null) {
            data.icon = this.icon;
        }
        if (this.component != null) {
            data.component = this.component;
        }
        if (this.authority != null) {
            data.authority = this.authority;
        }
        if (this.routes != null) {
            data.routes = this.routes.map((item: RouteItem) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.key.length)
            writer.writeString(1, this.key);
        if (this.path.length)
            writer.writeString(2, this.path);
        if (this.name.length)
            writer.writeString(3, this.name);
        if (this.icon.length)
            writer.writeString(4, this.icon);
        if (this.component.length)
            writer.writeString(5, this.component);
        if (this.authority.length)
            writer.writeString(6, this.authority);
        if (this.routes.length)
            writer.writeRepeatedMessage(7, this.routes, (item: RouteItem) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MenuItem {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MenuItem();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.key = reader.readString();
                    break;
                case 2:
                    message.path = reader.readString();
                    break;
                case 3:
                    message.name = reader.readString();
                    break;
                case 4:
                    message.icon = reader.readString();
                    break;
                case 5:
                    message.component = reader.readString();
                    break;
                case 6:
                    message.authority = reader.readString();
                    break;
                case 7:
                    reader.readMessage(message.routes, () => pb_1.Message.addToRepeatedWrapperField(message, 7, RouteItem.deserialize(reader), RouteItem));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MenuItem {
        return MenuItem.deserialize(bytes);
    }
}
export class RouteItem extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        key?: string;
        path?: string;
        name?: string;
        icon?: string;
        component?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("key" in data && data.key != undefined) {
                this.key = data.key;
            }
            if ("path" in data && data.path != undefined) {
                this.path = data.path;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("icon" in data && data.icon != undefined) {
                this.icon = data.icon;
            }
            if ("component" in data && data.component != undefined) {
                this.component = data.component;
            }
        }
    }
    get key() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set key(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get path() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set path(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get icon() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set icon(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get component() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set component(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        key?: string;
        path?: string;
        name?: string;
        icon?: string;
        component?: string;
    }): RouteItem {
        const message = new RouteItem({});
        if (data.key != null) {
            message.key = data.key;
        }
        if (data.path != null) {
            message.path = data.path;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.icon != null) {
            message.icon = data.icon;
        }
        if (data.component != null) {
            message.component = data.component;
        }
        return message;
    }
    toObject() {
        const data: {
            key?: string;
            path?: string;
            name?: string;
            icon?: string;
            component?: string;
        } = {};
        if (this.key != null) {
            data.key = this.key;
        }
        if (this.path != null) {
            data.path = this.path;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.icon != null) {
            data.icon = this.icon;
        }
        if (this.component != null) {
            data.component = this.component;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.key.length)
            writer.writeString(1, this.key);
        if (this.path.length)
            writer.writeString(2, this.path);
        if (this.name.length)
            writer.writeString(3, this.name);
        if (this.icon.length)
            writer.writeString(4, this.icon);
        if (this.component.length)
            writer.writeString(5, this.component);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RouteItem {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RouteItem();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.key = reader.readString();
                    break;
                case 2:
                    message.path = reader.readString();
                    break;
                case 3:
                    message.name = reader.readString();
                    break;
                case 4:
                    message.icon = reader.readString();
                    break;
                case 5:
                    message.component = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RouteItem {
        return RouteItem.deserialize(bytes);
    }
}
export class MenuListReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        base?: dependency_1.ListBaseReq;
        key?: string;
        path?: string;
        name?: string;
        parentId?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("base" in data && data.base != undefined) {
                this.base = data.base;
            }
            if ("key" in data && data.key != undefined) {
                this.key = data.key;
            }
            if ("path" in data && data.path != undefined) {
                this.path = data.path;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("parentId" in data && data.parentId != undefined) {
                this.parentId = data.parentId;
            }
        }
    }
    get base() {
        return pb_1.Message.getWrapperField(this, dependency_1.ListBaseReq, 1) as dependency_1.ListBaseReq;
    }
    set base(value: dependency_1.ListBaseReq) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasBase() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get key() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set key(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get path() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set path(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get parentId() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set parentId(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        base?: ReturnType<typeof dependency_1.ListBaseReq.prototype.toObject>;
        key?: string;
        path?: string;
        name?: string;
        parentId?: number;
    }): MenuListReq {
        const message = new MenuListReq({});
        if (data.base != null) {
            message.base = dependency_1.ListBaseReq.fromObject(data.base);
        }
        if (data.key != null) {
            message.key = data.key;
        }
        if (data.path != null) {
            message.path = data.path;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.parentId != null) {
            message.parentId = data.parentId;
        }
        return message;
    }
    toObject() {
        const data: {
            base?: ReturnType<typeof dependency_1.ListBaseReq.prototype.toObject>;
            key?: string;
            path?: string;
            name?: string;
            parentId?: number;
        } = {};
        if (this.base != null) {
            data.base = this.base.toObject();
        }
        if (this.key != null) {
            data.key = this.key;
        }
        if (this.path != null) {
            data.path = this.path;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.parentId != null) {
            data.parentId = this.parentId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasBase)
            writer.writeMessage(1, this.base, () => this.base.serialize(writer));
        if (this.key.length)
            writer.writeString(2, this.key);
        if (this.path.length)
            writer.writeString(3, this.path);
        if (this.name.length)
            writer.writeString(4, this.name);
        if (this.parentId != 0)
            writer.writeInt32(5, this.parentId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MenuListReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MenuListReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.base, () => message.base = dependency_1.ListBaseReq.deserialize(reader));
                    break;
                case 2:
                    message.key = reader.readString();
                    break;
                case 3:
                    message.path = reader.readString();
                    break;
                case 4:
                    message.name = reader.readString();
                    break;
                case 5:
                    message.parentId = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MenuListReq {
        return MenuListReq.deserialize(bytes);
    }
}
export class MenuListRespData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        total?: number;
        rows?: MenuItem[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("total" in data && data.total != undefined) {
                this.total = data.total;
            }
            if ("rows" in data && data.rows != undefined) {
                this.rows = data.rows;
            }
        }
    }
    get total() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set total(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get rows() {
        return pb_1.Message.getRepeatedWrapperField(this, MenuItem, 2) as MenuItem[];
    }
    set rows(value: MenuItem[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        total?: number;
        rows?: ReturnType<typeof MenuItem.prototype.toObject>[];
    }): MenuListRespData {
        const message = new MenuListRespData({});
        if (data.total != null) {
            message.total = data.total;
        }
        if (data.rows != null) {
            message.rows = data.rows.map(item => MenuItem.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            total?: number;
            rows?: ReturnType<typeof MenuItem.prototype.toObject>[];
        } = {};
        if (this.total != null) {
            data.total = this.total;
        }
        if (this.rows != null) {
            data.rows = this.rows.map((item: MenuItem) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.total != 0)
            writer.writeInt64(1, this.total);
        if (this.rows.length)
            writer.writeRepeatedMessage(2, this.rows, (item: MenuItem) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MenuListRespData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MenuListRespData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.total = reader.readInt64();
                    break;
                case 2:
                    reader.readMessage(message.rows, () => pb_1.Message.addToRepeatedWrapperField(message, 2, MenuItem.deserialize(reader), MenuItem));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MenuListRespData {
        return MenuListRespData.deserialize(bytes);
    }
}
export class MenuTreeItem extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        level?: number;
        id?: number;
        key?: string;
        name?: string;
        parentId?: number;
        describe?: string;
        path?: string;
        redirect?: string;
        component?: string;
        sort?: number;
        icon?: string;
        hideChildrenInMenu?: boolean;
        hideInMenu?: boolean;
        enabled?: boolean;
        createTime?: number;
        modifyTime?: number;
        children?: MenuTreeItem[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [17], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("level" in data && data.level != undefined) {
                this.level = data.level;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("key" in data && data.key != undefined) {
                this.key = data.key;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("parentId" in data && data.parentId != undefined) {
                this.parentId = data.parentId;
            }
            if ("describe" in data && data.describe != undefined) {
                this.describe = data.describe;
            }
            if ("path" in data && data.path != undefined) {
                this.path = data.path;
            }
            if ("redirect" in data && data.redirect != undefined) {
                this.redirect = data.redirect;
            }
            if ("component" in data && data.component != undefined) {
                this.component = data.component;
            }
            if ("sort" in data && data.sort != undefined) {
                this.sort = data.sort;
            }
            if ("icon" in data && data.icon != undefined) {
                this.icon = data.icon;
            }
            if ("hideChildrenInMenu" in data && data.hideChildrenInMenu != undefined) {
                this.hideChildrenInMenu = data.hideChildrenInMenu;
            }
            if ("hideInMenu" in data && data.hideInMenu != undefined) {
                this.hideInMenu = data.hideInMenu;
            }
            if ("enabled" in data && data.enabled != undefined) {
                this.enabled = data.enabled;
            }
            if ("createTime" in data && data.createTime != undefined) {
                this.createTime = data.createTime;
            }
            if ("modifyTime" in data && data.modifyTime != undefined) {
                this.modifyTime = data.modifyTime;
            }
            if ("children" in data && data.children != undefined) {
                this.children = data.children;
            }
        }
    }
    get level() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set level(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get key() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set key(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get parentId() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set parentId(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get describe() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set describe(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get path() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set path(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get redirect() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set redirect(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get component() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set component(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get sort() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set sort(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get icon() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set icon(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    get hideChildrenInMenu() {
        return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
    }
    set hideChildrenInMenu(value: boolean) {
        pb_1.Message.setField(this, 12, value);
    }
    get hideInMenu() {
        return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
    }
    set hideInMenu(value: boolean) {
        pb_1.Message.setField(this, 13, value);
    }
    get enabled() {
        return pb_1.Message.getFieldWithDefault(this, 14, false) as boolean;
    }
    set enabled(value: boolean) {
        pb_1.Message.setField(this, 14, value);
    }
    get createTime() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set createTime(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get modifyTime() {
        return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
    }
    set modifyTime(value: number) {
        pb_1.Message.setField(this, 16, value);
    }
    get children() {
        return pb_1.Message.getRepeatedWrapperField(this, MenuTreeItem, 17) as MenuTreeItem[];
    }
    set children(value: MenuTreeItem[]) {
        pb_1.Message.setRepeatedWrapperField(this, 17, value);
    }
    static fromObject(data: {
        level?: number;
        id?: number;
        key?: string;
        name?: string;
        parentId?: number;
        describe?: string;
        path?: string;
        redirect?: string;
        component?: string;
        sort?: number;
        icon?: string;
        hideChildrenInMenu?: boolean;
        hideInMenu?: boolean;
        enabled?: boolean;
        createTime?: number;
        modifyTime?: number;
        children?: ReturnType<typeof MenuTreeItem.prototype.toObject>[];
    }): MenuTreeItem {
        const message = new MenuTreeItem({});
        if (data.level != null) {
            message.level = data.level;
        }
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.key != null) {
            message.key = data.key;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.parentId != null) {
            message.parentId = data.parentId;
        }
        if (data.describe != null) {
            message.describe = data.describe;
        }
        if (data.path != null) {
            message.path = data.path;
        }
        if (data.redirect != null) {
            message.redirect = data.redirect;
        }
        if (data.component != null) {
            message.component = data.component;
        }
        if (data.sort != null) {
            message.sort = data.sort;
        }
        if (data.icon != null) {
            message.icon = data.icon;
        }
        if (data.hideChildrenInMenu != null) {
            message.hideChildrenInMenu = data.hideChildrenInMenu;
        }
        if (data.hideInMenu != null) {
            message.hideInMenu = data.hideInMenu;
        }
        if (data.enabled != null) {
            message.enabled = data.enabled;
        }
        if (data.createTime != null) {
            message.createTime = data.createTime;
        }
        if (data.modifyTime != null) {
            message.modifyTime = data.modifyTime;
        }
        if (data.children != null) {
            message.children = data.children.map(item => MenuTreeItem.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            level?: number;
            id?: number;
            key?: string;
            name?: string;
            parentId?: number;
            describe?: string;
            path?: string;
            redirect?: string;
            component?: string;
            sort?: number;
            icon?: string;
            hideChildrenInMenu?: boolean;
            hideInMenu?: boolean;
            enabled?: boolean;
            createTime?: number;
            modifyTime?: number;
            children?: ReturnType<typeof MenuTreeItem.prototype.toObject>[];
        } = {};
        if (this.level != null) {
            data.level = this.level;
        }
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.key != null) {
            data.key = this.key;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.parentId != null) {
            data.parentId = this.parentId;
        }
        if (this.describe != null) {
            data.describe = this.describe;
        }
        if (this.path != null) {
            data.path = this.path;
        }
        if (this.redirect != null) {
            data.redirect = this.redirect;
        }
        if (this.component != null) {
            data.component = this.component;
        }
        if (this.sort != null) {
            data.sort = this.sort;
        }
        if (this.icon != null) {
            data.icon = this.icon;
        }
        if (this.hideChildrenInMenu != null) {
            data.hideChildrenInMenu = this.hideChildrenInMenu;
        }
        if (this.hideInMenu != null) {
            data.hideInMenu = this.hideInMenu;
        }
        if (this.enabled != null) {
            data.enabled = this.enabled;
        }
        if (this.createTime != null) {
            data.createTime = this.createTime;
        }
        if (this.modifyTime != null) {
            data.modifyTime = this.modifyTime;
        }
        if (this.children != null) {
            data.children = this.children.map((item: MenuTreeItem) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.level != 0)
            writer.writeInt32(1, this.level);
        if (this.id != 0)
            writer.writeInt32(2, this.id);
        if (this.key.length)
            writer.writeString(3, this.key);
        if (this.name.length)
            writer.writeString(4, this.name);
        if (this.parentId != 0)
            writer.writeInt32(5, this.parentId);
        if (this.describe.length)
            writer.writeString(6, this.describe);
        if (this.path.length)
            writer.writeString(7, this.path);
        if (this.redirect.length)
            writer.writeString(8, this.redirect);
        if (this.component.length)
            writer.writeString(9, this.component);
        if (this.sort != 0)
            writer.writeInt32(10, this.sort);
        if (this.icon.length)
            writer.writeString(11, this.icon);
        if (this.hideChildrenInMenu != false)
            writer.writeBool(12, this.hideChildrenInMenu);
        if (this.hideInMenu != false)
            writer.writeBool(13, this.hideInMenu);
        if (this.enabled != false)
            writer.writeBool(14, this.enabled);
        if (this.createTime != 0)
            writer.writeInt64(15, this.createTime);
        if (this.modifyTime != 0)
            writer.writeInt64(16, this.modifyTime);
        if (this.children.length)
            writer.writeRepeatedMessage(17, this.children, (item: MenuTreeItem) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MenuTreeItem {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MenuTreeItem();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.level = reader.readInt32();
                    break;
                case 2:
                    message.id = reader.readInt32();
                    break;
                case 3:
                    message.key = reader.readString();
                    break;
                case 4:
                    message.name = reader.readString();
                    break;
                case 5:
                    message.parentId = reader.readInt32();
                    break;
                case 6:
                    message.describe = reader.readString();
                    break;
                case 7:
                    message.path = reader.readString();
                    break;
                case 8:
                    message.redirect = reader.readString();
                    break;
                case 9:
                    message.component = reader.readString();
                    break;
                case 10:
                    message.sort = reader.readInt32();
                    break;
                case 11:
                    message.icon = reader.readString();
                    break;
                case 12:
                    message.hideChildrenInMenu = reader.readBool();
                    break;
                case 13:
                    message.hideInMenu = reader.readBool();
                    break;
                case 14:
                    message.enabled = reader.readBool();
                    break;
                case 15:
                    message.createTime = reader.readInt64();
                    break;
                case 16:
                    message.modifyTime = reader.readInt64();
                    break;
                case 17:
                    reader.readMessage(message.children, () => pb_1.Message.addToRepeatedWrapperField(message, 17, MenuTreeItem.deserialize(reader), MenuTreeItem));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MenuTreeItem {
        return MenuTreeItem.deserialize(bytes);
    }
}
export class MenuTreeRespData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): MenuTreeRespData {
        const message = new MenuTreeRespData({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MenuTreeRespData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MenuTreeRespData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MenuTreeRespData {
        return MenuTreeRespData.deserialize(bytes);
    }
}
export class MenuAddReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        key?: string;
        path?: string;
        name?: string;
        parentId?: number;
        describe?: string;
        redirect?: string;
        icon?: string;
        hideChildrenInMenu?: boolean;
        hideInMenu?: boolean;
        enabled?: boolean;
        sort?: number;
        component?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("key" in data && data.key != undefined) {
                this.key = data.key;
            }
            if ("path" in data && data.path != undefined) {
                this.path = data.path;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("parentId" in data && data.parentId != undefined) {
                this.parentId = data.parentId;
            }
            if ("describe" in data && data.describe != undefined) {
                this.describe = data.describe;
            }
            if ("redirect" in data && data.redirect != undefined) {
                this.redirect = data.redirect;
            }
            if ("icon" in data && data.icon != undefined) {
                this.icon = data.icon;
            }
            if ("hideChildrenInMenu" in data && data.hideChildrenInMenu != undefined) {
                this.hideChildrenInMenu = data.hideChildrenInMenu;
            }
            if ("hideInMenu" in data && data.hideInMenu != undefined) {
                this.hideInMenu = data.hideInMenu;
            }
            if ("enabled" in data && data.enabled != undefined) {
                this.enabled = data.enabled;
            }
            if ("sort" in data && data.sort != undefined) {
                this.sort = data.sort;
            }
            if ("component" in data && data.component != undefined) {
                this.component = data.component;
            }
        }
    }
    get key() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set key(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get path() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set path(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get parentId() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set parentId(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get describe() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set describe(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get redirect() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set redirect(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get icon() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set icon(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get hideChildrenInMenu() {
        return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
    }
    set hideChildrenInMenu(value: boolean) {
        pb_1.Message.setField(this, 8, value);
    }
    get hideInMenu() {
        return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
    }
    set hideInMenu(value: boolean) {
        pb_1.Message.setField(this, 9, value);
    }
    get enabled() {
        return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
    }
    set enabled(value: boolean) {
        pb_1.Message.setField(this, 10, value);
    }
    get sort() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set sort(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get component() {
        return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
    }
    set component(value: string) {
        pb_1.Message.setField(this, 12, value);
    }
    static fromObject(data: {
        key?: string;
        path?: string;
        name?: string;
        parentId?: number;
        describe?: string;
        redirect?: string;
        icon?: string;
        hideChildrenInMenu?: boolean;
        hideInMenu?: boolean;
        enabled?: boolean;
        sort?: number;
        component?: string;
    }): MenuAddReq {
        const message = new MenuAddReq({});
        if (data.key != null) {
            message.key = data.key;
        }
        if (data.path != null) {
            message.path = data.path;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.parentId != null) {
            message.parentId = data.parentId;
        }
        if (data.describe != null) {
            message.describe = data.describe;
        }
        if (data.redirect != null) {
            message.redirect = data.redirect;
        }
        if (data.icon != null) {
            message.icon = data.icon;
        }
        if (data.hideChildrenInMenu != null) {
            message.hideChildrenInMenu = data.hideChildrenInMenu;
        }
        if (data.hideInMenu != null) {
            message.hideInMenu = data.hideInMenu;
        }
        if (data.enabled != null) {
            message.enabled = data.enabled;
        }
        if (data.sort != null) {
            message.sort = data.sort;
        }
        if (data.component != null) {
            message.component = data.component;
        }
        return message;
    }
    toObject() {
        const data: {
            key?: string;
            path?: string;
            name?: string;
            parentId?: number;
            describe?: string;
            redirect?: string;
            icon?: string;
            hideChildrenInMenu?: boolean;
            hideInMenu?: boolean;
            enabled?: boolean;
            sort?: number;
            component?: string;
        } = {};
        if (this.key != null) {
            data.key = this.key;
        }
        if (this.path != null) {
            data.path = this.path;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.parentId != null) {
            data.parentId = this.parentId;
        }
        if (this.describe != null) {
            data.describe = this.describe;
        }
        if (this.redirect != null) {
            data.redirect = this.redirect;
        }
        if (this.icon != null) {
            data.icon = this.icon;
        }
        if (this.hideChildrenInMenu != null) {
            data.hideChildrenInMenu = this.hideChildrenInMenu;
        }
        if (this.hideInMenu != null) {
            data.hideInMenu = this.hideInMenu;
        }
        if (this.enabled != null) {
            data.enabled = this.enabled;
        }
        if (this.sort != null) {
            data.sort = this.sort;
        }
        if (this.component != null) {
            data.component = this.component;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.key.length)
            writer.writeString(1, this.key);
        if (this.path.length)
            writer.writeString(2, this.path);
        if (this.name.length)
            writer.writeString(3, this.name);
        if (this.parentId != 0)
            writer.writeInt32(4, this.parentId);
        if (this.describe.length)
            writer.writeString(5, this.describe);
        if (this.redirect.length)
            writer.writeString(6, this.redirect);
        if (this.icon.length)
            writer.writeString(7, this.icon);
        if (this.hideChildrenInMenu != false)
            writer.writeBool(8, this.hideChildrenInMenu);
        if (this.hideInMenu != false)
            writer.writeBool(9, this.hideInMenu);
        if (this.enabled != false)
            writer.writeBool(10, this.enabled);
        if (this.sort != 0)
            writer.writeInt32(11, this.sort);
        if (this.component.length)
            writer.writeString(12, this.component);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MenuAddReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MenuAddReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.key = reader.readString();
                    break;
                case 2:
                    message.path = reader.readString();
                    break;
                case 3:
                    message.name = reader.readString();
                    break;
                case 4:
                    message.parentId = reader.readInt32();
                    break;
                case 5:
                    message.describe = reader.readString();
                    break;
                case 6:
                    message.redirect = reader.readString();
                    break;
                case 7:
                    message.icon = reader.readString();
                    break;
                case 8:
                    message.hideChildrenInMenu = reader.readBool();
                    break;
                case 9:
                    message.hideInMenu = reader.readBool();
                    break;
                case 10:
                    message.enabled = reader.readBool();
                    break;
                case 11:
                    message.sort = reader.readInt32();
                    break;
                case 12:
                    message.component = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MenuAddReq {
        return MenuAddReq.deserialize(bytes);
    }
}
export class MenuInfoReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        menuId?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("menuId" in data && data.menuId != undefined) {
                this.menuId = data.menuId;
            }
        }
    }
    get menuId() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set menuId(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        menuId?: number;
    }): MenuInfoReq {
        const message = new MenuInfoReq({});
        if (data.menuId != null) {
            message.menuId = data.menuId;
        }
        return message;
    }
    toObject() {
        const data: {
            menuId?: number;
        } = {};
        if (this.menuId != null) {
            data.menuId = this.menuId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.menuId != 0)
            writer.writeInt32(1, this.menuId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MenuInfoReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MenuInfoReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.menuId = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MenuInfoReq {
        return MenuInfoReq.deserialize(bytes);
    }
}
export class MenuInfoRespData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): MenuInfoRespData {
        const message = new MenuInfoRespData({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MenuInfoRespData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MenuInfoRespData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MenuInfoRespData {
        return MenuInfoRespData.deserialize(bytes);
    }
}
export class MenuEditReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        menuId?: number;
        key?: string;
        path?: string;
        name?: string;
        parentId?: number;
        describe?: string;
        redirect?: string;
        icon?: string;
        hideChildrenInMenu?: boolean;
        hideInMenu?: boolean;
        enabled?: boolean;
        sort?: number;
        component?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("menuId" in data && data.menuId != undefined) {
                this.menuId = data.menuId;
            }
            if ("key" in data && data.key != undefined) {
                this.key = data.key;
            }
            if ("path" in data && data.path != undefined) {
                this.path = data.path;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("parentId" in data && data.parentId != undefined) {
                this.parentId = data.parentId;
            }
            if ("describe" in data && data.describe != undefined) {
                this.describe = data.describe;
            }
            if ("redirect" in data && data.redirect != undefined) {
                this.redirect = data.redirect;
            }
            if ("icon" in data && data.icon != undefined) {
                this.icon = data.icon;
            }
            if ("hideChildrenInMenu" in data && data.hideChildrenInMenu != undefined) {
                this.hideChildrenInMenu = data.hideChildrenInMenu;
            }
            if ("hideInMenu" in data && data.hideInMenu != undefined) {
                this.hideInMenu = data.hideInMenu;
            }
            if ("enabled" in data && data.enabled != undefined) {
                this.enabled = data.enabled;
            }
            if ("sort" in data && data.sort != undefined) {
                this.sort = data.sort;
            }
            if ("component" in data && data.component != undefined) {
                this.component = data.component;
            }
        }
    }
    get menuId() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set menuId(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get key() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set key(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get path() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set path(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get parentId() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set parentId(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get describe() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set describe(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get redirect() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set redirect(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get icon() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set icon(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get hideChildrenInMenu() {
        return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
    }
    set hideChildrenInMenu(value: boolean) {
        pb_1.Message.setField(this, 9, value);
    }
    get hideInMenu() {
        return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
    }
    set hideInMenu(value: boolean) {
        pb_1.Message.setField(this, 10, value);
    }
    get enabled() {
        return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
    }
    set enabled(value: boolean) {
        pb_1.Message.setField(this, 11, value);
    }
    get sort() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set sort(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get component() {
        return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
    }
    set component(value: string) {
        pb_1.Message.setField(this, 13, value);
    }
    static fromObject(data: {
        menuId?: number;
        key?: string;
        path?: string;
        name?: string;
        parentId?: number;
        describe?: string;
        redirect?: string;
        icon?: string;
        hideChildrenInMenu?: boolean;
        hideInMenu?: boolean;
        enabled?: boolean;
        sort?: number;
        component?: string;
    }): MenuEditReq {
        const message = new MenuEditReq({});
        if (data.menuId != null) {
            message.menuId = data.menuId;
        }
        if (data.key != null) {
            message.key = data.key;
        }
        if (data.path != null) {
            message.path = data.path;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.parentId != null) {
            message.parentId = data.parentId;
        }
        if (data.describe != null) {
            message.describe = data.describe;
        }
        if (data.redirect != null) {
            message.redirect = data.redirect;
        }
        if (data.icon != null) {
            message.icon = data.icon;
        }
        if (data.hideChildrenInMenu != null) {
            message.hideChildrenInMenu = data.hideChildrenInMenu;
        }
        if (data.hideInMenu != null) {
            message.hideInMenu = data.hideInMenu;
        }
        if (data.enabled != null) {
            message.enabled = data.enabled;
        }
        if (data.sort != null) {
            message.sort = data.sort;
        }
        if (data.component != null) {
            message.component = data.component;
        }
        return message;
    }
    toObject() {
        const data: {
            menuId?: number;
            key?: string;
            path?: string;
            name?: string;
            parentId?: number;
            describe?: string;
            redirect?: string;
            icon?: string;
            hideChildrenInMenu?: boolean;
            hideInMenu?: boolean;
            enabled?: boolean;
            sort?: number;
            component?: string;
        } = {};
        if (this.menuId != null) {
            data.menuId = this.menuId;
        }
        if (this.key != null) {
            data.key = this.key;
        }
        if (this.path != null) {
            data.path = this.path;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.parentId != null) {
            data.parentId = this.parentId;
        }
        if (this.describe != null) {
            data.describe = this.describe;
        }
        if (this.redirect != null) {
            data.redirect = this.redirect;
        }
        if (this.icon != null) {
            data.icon = this.icon;
        }
        if (this.hideChildrenInMenu != null) {
            data.hideChildrenInMenu = this.hideChildrenInMenu;
        }
        if (this.hideInMenu != null) {
            data.hideInMenu = this.hideInMenu;
        }
        if (this.enabled != null) {
            data.enabled = this.enabled;
        }
        if (this.sort != null) {
            data.sort = this.sort;
        }
        if (this.component != null) {
            data.component = this.component;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.menuId != 0)
            writer.writeInt32(1, this.menuId);
        if (this.key.length)
            writer.writeString(2, this.key);
        if (this.path.length)
            writer.writeString(3, this.path);
        if (this.name.length)
            writer.writeString(4, this.name);
        if (this.parentId != 0)
            writer.writeInt32(5, this.parentId);
        if (this.describe.length)
            writer.writeString(6, this.describe);
        if (this.redirect.length)
            writer.writeString(7, this.redirect);
        if (this.icon.length)
            writer.writeString(8, this.icon);
        if (this.hideChildrenInMenu != false)
            writer.writeBool(9, this.hideChildrenInMenu);
        if (this.hideInMenu != false)
            writer.writeBool(10, this.hideInMenu);
        if (this.enabled != false)
            writer.writeBool(11, this.enabled);
        if (this.sort != 0)
            writer.writeInt32(12, this.sort);
        if (this.component.length)
            writer.writeString(13, this.component);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MenuEditReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MenuEditReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.menuId = reader.readInt32();
                    break;
                case 2:
                    message.key = reader.readString();
                    break;
                case 3:
                    message.path = reader.readString();
                    break;
                case 4:
                    message.name = reader.readString();
                    break;
                case 5:
                    message.parentId = reader.readInt32();
                    break;
                case 6:
                    message.describe = reader.readString();
                    break;
                case 7:
                    message.redirect = reader.readString();
                    break;
                case 8:
                    message.icon = reader.readString();
                    break;
                case 9:
                    message.hideChildrenInMenu = reader.readBool();
                    break;
                case 10:
                    message.hideInMenu = reader.readBool();
                    break;
                case 11:
                    message.enabled = reader.readBool();
                    break;
                case 12:
                    message.sort = reader.readInt32();
                    break;
                case 13:
                    message.component = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MenuEditReq {
        return MenuEditReq.deserialize(bytes);
    }
}
export class MenuEnableReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        menuId?: number;
        enabled?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("menuId" in data && data.menuId != undefined) {
                this.menuId = data.menuId;
            }
            if ("enabled" in data && data.enabled != undefined) {
                this.enabled = data.enabled;
            }
        }
    }
    get menuId() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set menuId(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get enabled() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set enabled(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        menuId?: number;
        enabled?: boolean;
    }): MenuEnableReq {
        const message = new MenuEnableReq({});
        if (data.menuId != null) {
            message.menuId = data.menuId;
        }
        if (data.enabled != null) {
            message.enabled = data.enabled;
        }
        return message;
    }
    toObject() {
        const data: {
            menuId?: number;
            enabled?: boolean;
        } = {};
        if (this.menuId != null) {
            data.menuId = this.menuId;
        }
        if (this.enabled != null) {
            data.enabled = this.enabled;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.menuId != 0)
            writer.writeInt32(1, this.menuId);
        if (this.enabled != false)
            writer.writeBool(2, this.enabled);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MenuEnableReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MenuEnableReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.menuId = reader.readInt32();
                    break;
                case 2:
                    message.enabled = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MenuEnableReq {
        return MenuEnableReq.deserialize(bytes);
    }
}
export class MenuDeleteReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        menuId?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("menuId" in data && data.menuId != undefined) {
                this.menuId = data.menuId;
            }
        }
    }
    get menuId() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set menuId(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        menuId?: number;
    }): MenuDeleteReq {
        const message = new MenuDeleteReq({});
        if (data.menuId != null) {
            message.menuId = data.menuId;
        }
        return message;
    }
    toObject() {
        const data: {
            menuId?: number;
        } = {};
        if (this.menuId != null) {
            data.menuId = this.menuId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.menuId != 0)
            writer.writeInt32(1, this.menuId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MenuDeleteReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MenuDeleteReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.menuId = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MenuDeleteReq {
        return MenuDeleteReq.deserialize(bytes);
    }
}
export class MenuPermissionsReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        menuId?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("menuId" in data && data.menuId != undefined) {
                this.menuId = data.menuId;
            }
        }
    }
    get menuId() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set menuId(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        menuId?: number;
    }): MenuPermissionsReq {
        const message = new MenuPermissionsReq({});
        if (data.menuId != null) {
            message.menuId = data.menuId;
        }
        return message;
    }
    toObject() {
        const data: {
            menuId?: number;
        } = {};
        if (this.menuId != null) {
            data.menuId = this.menuId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.menuId != 0)
            writer.writeInt32(1, this.menuId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MenuPermissionsReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MenuPermissionsReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.menuId = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MenuPermissionsReq {
        return MenuPermissionsReq.deserialize(bytes);
    }
}
export class MenuPermissions extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        menu?: MenuTreeItem;
        permissions?: dependency_2.PermissionApiItem[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("menu" in data && data.menu != undefined) {
                this.menu = data.menu;
            }
            if ("permissions" in data && data.permissions != undefined) {
                this.permissions = data.permissions;
            }
        }
    }
    get menu() {
        return pb_1.Message.getWrapperField(this, MenuTreeItem, 1) as MenuTreeItem;
    }
    set menu(value: MenuTreeItem) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMenu() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get permissions() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.PermissionApiItem, 2) as dependency_2.PermissionApiItem[];
    }
    set permissions(value: dependency_2.PermissionApiItem[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        menu?: ReturnType<typeof MenuTreeItem.prototype.toObject>;
        permissions?: ReturnType<typeof dependency_2.PermissionApiItem.prototype.toObject>[];
    }): MenuPermissions {
        const message = new MenuPermissions({});
        if (data.menu != null) {
            message.menu = MenuTreeItem.fromObject(data.menu);
        }
        if (data.permissions != null) {
            message.permissions = data.permissions.map(item => dependency_2.PermissionApiItem.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            menu?: ReturnType<typeof MenuTreeItem.prototype.toObject>;
            permissions?: ReturnType<typeof dependency_2.PermissionApiItem.prototype.toObject>[];
        } = {};
        if (this.menu != null) {
            data.menu = this.menu.toObject();
        }
        if (this.permissions != null) {
            data.permissions = this.permissions.map((item: dependency_2.PermissionApiItem) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMenu)
            writer.writeMessage(1, this.menu, () => this.menu.serialize(writer));
        if (this.permissions.length)
            writer.writeRepeatedMessage(2, this.permissions, (item: dependency_2.PermissionApiItem) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MenuPermissions {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MenuPermissions();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.menu, () => message.menu = MenuTreeItem.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.permissions, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_2.PermissionApiItem.deserialize(reader), dependency_2.PermissionApiItem));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MenuPermissions {
        return MenuPermissions.deserialize(bytes);
    }
}
export class MenuPagesReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        all?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("all" in data && data.all != undefined) {
                this.all = data.all;
            }
        }
    }
    get all() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set all(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        all?: boolean;
    }): MenuPagesReq {
        const message = new MenuPagesReq({});
        if (data.all != null) {
            message.all = data.all;
        }
        return message;
    }
    toObject() {
        const data: {
            all?: boolean;
        } = {};
        if (this.all != null) {
            data.all = this.all;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.all != false)
            writer.writeBool(1, this.all);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MenuPagesReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MenuPagesReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.all = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MenuPagesReq {
        return MenuPagesReq.deserialize(bytes);
    }
}
export class MenuPagesRespData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): MenuPagesRespData {
        const message = new MenuPagesRespData({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MenuPagesRespData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MenuPagesRespData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MenuPagesRespData {
        return MenuPagesRespData.deserialize(bytes);
    }
}
export class MenuModeReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): MenuModeReq {
        const message = new MenuModeReq({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MenuModeReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MenuModeReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MenuModeReq {
        return MenuModeReq.deserialize(bytes);
    }
}
export class MenuModeRespData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): MenuModeRespData {
        const message = new MenuModeRespData({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MenuModeRespData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MenuModeRespData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MenuModeRespData {
        return MenuModeRespData.deserialize(bytes);
    }
}
