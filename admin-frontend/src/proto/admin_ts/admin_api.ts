// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v3.21.12
// source: admin_api.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ApiItem, ReqListBase } from "./common";

export const protobufPackage = "admin";

/** 接口列表请求参数 */
export interface ReqApiList {
  base:
    | ReqListBase
    | undefined;
  /** 接口键名 */
  key: string;
  /** 接口名称 */
  name: string;
  /** 接口路由 */
  path: string;
}

export interface RespApiListData {
  total: number;
  list: ApiItem[];
}

/** 全部接口列表 */
export interface ReqApiAll {
}

export interface RespApiAllData {
  list: ApiItem[];
}

/** 创建接口 */
export interface ReqApiAdd {
  /** 接口路由 */
  path: string;
  /** 接口键名 */
  key: string;
  /** 接口名称 */
  name: string;
  /** 接口描述 */
  describe: string;
  /** 启用状态 */
  enabled: boolean;
}

export interface RespApiAddData {
}

/** 接口详情 */
export interface ReqApiInfo {
  /** 接口ID */
  id: number;
}

export interface RespApiInfoData {
  data: ApiItem | undefined;
}

/** 接口编辑 */
export interface ReqApiEdit {
  /** 接口ID */
  id: number;
  /** 接口路由 */
  path: string;
  /** 接口键名 */
  key: string;
  /** 接口名称 */
  name: string;
  /** 接口描述 */
  describe: string;
  /** 接口状态 */
  enabled: boolean;
}

export interface RespApiEditData {
}

/** 接口禁用启用 */
export interface ReqApiEnable {
  /** 接口ID */
  id: number;
  /** 接口状态 */
  enabled: boolean;
}

export interface RespApiEnableData {
}

/** 删除接口 */
export interface ReqApiDelete {
  /** 接口ID */
  id: number;
}

export interface RespApiDeleteData {
}

function createBaseReqApiList(): ReqApiList {
  return { base: undefined, key: "", name: "", path: "" };
}

export const ReqApiList: MessageFns<ReqApiList> = {
  encode(message: ReqApiList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.base !== undefined) {
      ReqListBase.encode(message.base, writer.uint32(10).fork()).join();
    }
    if (message.key !== "") {
      writer.uint32(18).string(message.key);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.path !== "") {
      writer.uint32(34).string(message.path);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqApiList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqApiList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.base = ReqListBase.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.path = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqApiList {
    return {
      base: isSet(object.base) ? ReqListBase.fromJSON(object.base) : undefined,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      path: isSet(object.path) ? globalThis.String(object.path) : "",
    };
  },

  toJSON(message: ReqApiList): unknown {
    const obj: any = {};
    if (message.base !== undefined) {
      obj.base = ReqListBase.toJSON(message.base);
    }
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.path !== "") {
      obj.path = message.path;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqApiList>, I>>(base?: I): ReqApiList {
    return ReqApiList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqApiList>, I>>(object: I): ReqApiList {
    const message = createBaseReqApiList();
    message.base = (object.base !== undefined && object.base !== null)
      ? ReqListBase.fromPartial(object.base)
      : undefined;
    message.key = object.key ?? "";
    message.name = object.name ?? "";
    message.path = object.path ?? "";
    return message;
  },
};

function createBaseRespApiListData(): RespApiListData {
  return { total: 0, list: [] };
}

export const RespApiListData: MessageFns<RespApiListData> = {
  encode(message: RespApiListData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.total !== 0) {
      writer.uint32(8).int64(message.total);
    }
    for (const v of message.list) {
      ApiItem.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespApiListData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespApiListData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.total = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.list.push(ApiItem.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RespApiListData {
    return {
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      list: globalThis.Array.isArray(object?.list) ? object.list.map((e: any) => ApiItem.fromJSON(e)) : [],
    };
  },

  toJSON(message: RespApiListData): unknown {
    const obj: any = {};
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    if (message.list?.length) {
      obj.list = message.list.map((e) => ApiItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RespApiListData>, I>>(base?: I): RespApiListData {
    return RespApiListData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespApiListData>, I>>(object: I): RespApiListData {
    const message = createBaseRespApiListData();
    message.total = object.total ?? 0;
    message.list = object.list?.map((e) => ApiItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReqApiAll(): ReqApiAll {
  return {};
}

export const ReqApiAll: MessageFns<ReqApiAll> = {
  encode(_: ReqApiAll, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqApiAll {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqApiAll();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ReqApiAll {
    return {};
  },

  toJSON(_: ReqApiAll): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqApiAll>, I>>(base?: I): ReqApiAll {
    return ReqApiAll.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqApiAll>, I>>(_: I): ReqApiAll {
    const message = createBaseReqApiAll();
    return message;
  },
};

function createBaseRespApiAllData(): RespApiAllData {
  return { list: [] };
}

export const RespApiAllData: MessageFns<RespApiAllData> = {
  encode(message: RespApiAllData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.list) {
      ApiItem.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespApiAllData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespApiAllData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.list.push(ApiItem.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RespApiAllData {
    return { list: globalThis.Array.isArray(object?.list) ? object.list.map((e: any) => ApiItem.fromJSON(e)) : [] };
  },

  toJSON(message: RespApiAllData): unknown {
    const obj: any = {};
    if (message.list?.length) {
      obj.list = message.list.map((e) => ApiItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RespApiAllData>, I>>(base?: I): RespApiAllData {
    return RespApiAllData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespApiAllData>, I>>(object: I): RespApiAllData {
    const message = createBaseRespApiAllData();
    message.list = object.list?.map((e) => ApiItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReqApiAdd(): ReqApiAdd {
  return { path: "", key: "", name: "", describe: "", enabled: false };
}

export const ReqApiAdd: MessageFns<ReqApiAdd> = {
  encode(message: ReqApiAdd, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    if (message.key !== "") {
      writer.uint32(18).string(message.key);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.describe !== "") {
      writer.uint32(34).string(message.describe);
    }
    if (message.enabled !== false) {
      writer.uint32(40).bool(message.enabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqApiAdd {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqApiAdd();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.describe = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqApiAdd {
    return {
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      describe: isSet(object.describe) ? globalThis.String(object.describe) : "",
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
    };
  },

  toJSON(message: ReqApiAdd): unknown {
    const obj: any = {};
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.describe !== "") {
      obj.describe = message.describe;
    }
    if (message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqApiAdd>, I>>(base?: I): ReqApiAdd {
    return ReqApiAdd.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqApiAdd>, I>>(object: I): ReqApiAdd {
    const message = createBaseReqApiAdd();
    message.path = object.path ?? "";
    message.key = object.key ?? "";
    message.name = object.name ?? "";
    message.describe = object.describe ?? "";
    message.enabled = object.enabled ?? false;
    return message;
  },
};

function createBaseRespApiAddData(): RespApiAddData {
  return {};
}

export const RespApiAddData: MessageFns<RespApiAddData> = {
  encode(_: RespApiAddData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespApiAddData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespApiAddData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespApiAddData {
    return {};
  },

  toJSON(_: RespApiAddData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespApiAddData>, I>>(base?: I): RespApiAddData {
    return RespApiAddData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespApiAddData>, I>>(_: I): RespApiAddData {
    const message = createBaseRespApiAddData();
    return message;
  },
};

function createBaseReqApiInfo(): ReqApiInfo {
  return { id: 0 };
}

export const ReqApiInfo: MessageFns<ReqApiInfo> = {
  encode(message: ReqApiInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqApiInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqApiInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqApiInfo {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: ReqApiInfo): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqApiInfo>, I>>(base?: I): ReqApiInfo {
    return ReqApiInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqApiInfo>, I>>(object: I): ReqApiInfo {
    const message = createBaseReqApiInfo();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseRespApiInfoData(): RespApiInfoData {
  return { data: undefined };
}

export const RespApiInfoData: MessageFns<RespApiInfoData> = {
  encode(message: RespApiInfoData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ApiItem.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespApiInfoData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespApiInfoData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ApiItem.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RespApiInfoData {
    return { data: isSet(object.data) ? ApiItem.fromJSON(object.data) : undefined };
  },

  toJSON(message: RespApiInfoData): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ApiItem.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RespApiInfoData>, I>>(base?: I): RespApiInfoData {
    return RespApiInfoData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespApiInfoData>, I>>(object: I): RespApiInfoData {
    const message = createBaseRespApiInfoData();
    message.data = (object.data !== undefined && object.data !== null) ? ApiItem.fromPartial(object.data) : undefined;
    return message;
  },
};

function createBaseReqApiEdit(): ReqApiEdit {
  return { id: 0, path: "", key: "", name: "", describe: "", enabled: false };
}

export const ReqApiEdit: MessageFns<ReqApiEdit> = {
  encode(message: ReqApiEdit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.path !== "") {
      writer.uint32(18).string(message.path);
    }
    if (message.key !== "") {
      writer.uint32(26).string(message.key);
    }
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.describe !== "") {
      writer.uint32(42).string(message.describe);
    }
    if (message.enabled !== false) {
      writer.uint32(48).bool(message.enabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqApiEdit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqApiEdit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.describe = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqApiEdit {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      describe: isSet(object.describe) ? globalThis.String(object.describe) : "",
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
    };
  },

  toJSON(message: ReqApiEdit): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.describe !== "") {
      obj.describe = message.describe;
    }
    if (message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqApiEdit>, I>>(base?: I): ReqApiEdit {
    return ReqApiEdit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqApiEdit>, I>>(object: I): ReqApiEdit {
    const message = createBaseReqApiEdit();
    message.id = object.id ?? 0;
    message.path = object.path ?? "";
    message.key = object.key ?? "";
    message.name = object.name ?? "";
    message.describe = object.describe ?? "";
    message.enabled = object.enabled ?? false;
    return message;
  },
};

function createBaseRespApiEditData(): RespApiEditData {
  return {};
}

export const RespApiEditData: MessageFns<RespApiEditData> = {
  encode(_: RespApiEditData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespApiEditData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespApiEditData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespApiEditData {
    return {};
  },

  toJSON(_: RespApiEditData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespApiEditData>, I>>(base?: I): RespApiEditData {
    return RespApiEditData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespApiEditData>, I>>(_: I): RespApiEditData {
    const message = createBaseRespApiEditData();
    return message;
  },
};

function createBaseReqApiEnable(): ReqApiEnable {
  return { id: 0, enabled: false };
}

export const ReqApiEnable: MessageFns<ReqApiEnable> = {
  encode(message: ReqApiEnable, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.enabled !== false) {
      writer.uint32(16).bool(message.enabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqApiEnable {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqApiEnable();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqApiEnable {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
    };
  },

  toJSON(message: ReqApiEnable): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqApiEnable>, I>>(base?: I): ReqApiEnable {
    return ReqApiEnable.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqApiEnable>, I>>(object: I): ReqApiEnable {
    const message = createBaseReqApiEnable();
    message.id = object.id ?? 0;
    message.enabled = object.enabled ?? false;
    return message;
  },
};

function createBaseRespApiEnableData(): RespApiEnableData {
  return {};
}

export const RespApiEnableData: MessageFns<RespApiEnableData> = {
  encode(_: RespApiEnableData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespApiEnableData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespApiEnableData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespApiEnableData {
    return {};
  },

  toJSON(_: RespApiEnableData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespApiEnableData>, I>>(base?: I): RespApiEnableData {
    return RespApiEnableData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespApiEnableData>, I>>(_: I): RespApiEnableData {
    const message = createBaseRespApiEnableData();
    return message;
  },
};

function createBaseReqApiDelete(): ReqApiDelete {
  return { id: 0 };
}

export const ReqApiDelete: MessageFns<ReqApiDelete> = {
  encode(message: ReqApiDelete, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqApiDelete {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqApiDelete();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqApiDelete {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: ReqApiDelete): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqApiDelete>, I>>(base?: I): ReqApiDelete {
    return ReqApiDelete.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqApiDelete>, I>>(object: I): ReqApiDelete {
    const message = createBaseReqApiDelete();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseRespApiDeleteData(): RespApiDeleteData {
  return {};
}

export const RespApiDeleteData: MessageFns<RespApiDeleteData> = {
  encode(_: RespApiDeleteData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespApiDeleteData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespApiDeleteData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespApiDeleteData {
    return {};
  },

  toJSON(_: RespApiDeleteData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespApiDeleteData>, I>>(base?: I): RespApiDeleteData {
    return RespApiDeleteData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespApiDeleteData>, I>>(_: I): RespApiDeleteData {
    const message = createBaseRespApiDeleteData();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
