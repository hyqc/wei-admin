// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v3.21.12
// source: admin_api.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { AdminApiItem, ReqListBase } from "./common";

export const protobufPackage = "admin";

/** 接口列表请求参数 */
export interface ReqAdminApiList {
  base?:
    | ReqListBase
    | undefined;
  /** 接口键名 */
  key?:
    | string
    | undefined;
  /** 接口名称 */
  name?:
    | string
    | undefined;
  /** 接口路由 */
  path?: string | undefined;
}

export interface RespAdminApiListData {
  total?: number | undefined;
  list?: AdminApiItem[] | undefined;
}

/** 全部接口列表 */
export interface ReqAdminApiAll {
}

export interface RespAdminApiAllData {
  list?: AdminApiItem[] | undefined;
}

/** 创建接口 */
export interface ReqAdminApiAdd {
  /** 接口路由 */
  path?:
    | string
    | undefined;
  /** 接口键名 */
  key?:
    | string
    | undefined;
  /** 接口名称 */
  name?:
    | string
    | undefined;
  /** 接口描述 */
  describe?:
    | string
    | undefined;
  /** 启用状态 */
  enabled?: boolean | undefined;
}

export interface RespAdminApiAddData {
}

/** 接口详情 */
export interface ReqAdminApiInfo {
  /** 接口ID */
  id?: number | undefined;
}

export interface RespAdminApiInfoData {
  data?: AdminApiItem | undefined;
}

/** 接口编辑 */
export interface ReqAdminApiEdit {
  /** 接口ID */
  id?:
    | number
    | undefined;
  /** 接口路由 */
  path?:
    | string
    | undefined;
  /** 接口键名 */
  key?:
    | string
    | undefined;
  /** 接口名称 */
  name?:
    | string
    | undefined;
  /** 接口描述 */
  describe?:
    | string
    | undefined;
  /** 接口状态 */
  enabled?: boolean | undefined;
}

export interface RespAdminApiEditData {
}

/** 接口禁用启用 */
export interface ReqAdminApiEnable {
  /** 接口ID */
  id?:
    | number
    | undefined;
  /** 接口状态 */
  enabled?: boolean | undefined;
}

export interface RespAdminApiEnableData {
}

/** 删除接口 */
export interface ReqAdminApiDelete {
  /** 接口ID */
  id?: number | undefined;
}

export interface RespAdminApiDeleteData {
}

function createBaseReqAdminApiList(): ReqAdminApiList {
  return { base: undefined, key: "", name: "", path: "" };
}

export const ReqAdminApiList: MessageFns<ReqAdminApiList> = {
  encode(message: ReqAdminApiList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.base !== undefined) {
      ReqListBase.encode(message.base, writer.uint32(10).fork()).join();
    }
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(18).string(message.key);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.path !== undefined && message.path !== "") {
      writer.uint32(34).string(message.path);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqAdminApiList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqAdminApiList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.base = ReqListBase.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.path = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqAdminApiList {
    return {
      base: isSet(object.base) ? ReqListBase.fromJSON(object.base) : undefined,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      path: isSet(object.path) ? globalThis.String(object.path) : "",
    };
  },

  toJSON(message: ReqAdminApiList): unknown {
    const obj: any = {};
    if (message.base !== undefined) {
      obj.base = ReqListBase.toJSON(message.base);
    }
    if (message.key !== undefined && message.key !== "") {
      obj.key = message.key;
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.path !== undefined && message.path !== "") {
      obj.path = message.path;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqAdminApiList>, I>>(base?: I): ReqAdminApiList {
    return ReqAdminApiList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqAdminApiList>, I>>(object: I): ReqAdminApiList {
    const message = createBaseReqAdminApiList();
    message.base = (object.base !== undefined && object.base !== null)
      ? ReqListBase.fromPartial(object.base)
      : undefined;
    message.key = object.key ?? "";
    message.name = object.name ?? "";
    message.path = object.path ?? "";
    return message;
  },
};

function createBaseRespAdminApiListData(): RespAdminApiListData {
  return { total: 0, list: [] };
}

export const RespAdminApiListData: MessageFns<RespAdminApiListData> = {
  encode(message: RespAdminApiListData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.total !== undefined && message.total !== 0) {
      writer.uint32(8).int64(message.total);
    }
    if (message.list !== undefined && message.list.length !== 0) {
      for (const v of message.list) {
        AdminApiItem.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespAdminApiListData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespAdminApiListData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.total = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const el = AdminApiItem.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.list!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RespAdminApiListData {
    return {
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      list: globalThis.Array.isArray(object?.list) ? object.list.map((e: any) => AdminApiItem.fromJSON(e)) : [],
    };
  },

  toJSON(message: RespAdminApiListData): unknown {
    const obj: any = {};
    if (message.total !== undefined && message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    if (message.list?.length) {
      obj.list = message.list.map((e) => AdminApiItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RespAdminApiListData>, I>>(base?: I): RespAdminApiListData {
    return RespAdminApiListData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespAdminApiListData>, I>>(object: I): RespAdminApiListData {
    const message = createBaseRespAdminApiListData();
    message.total = object.total ?? 0;
    message.list = object.list?.map((e) => AdminApiItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReqAdminApiAll(): ReqAdminApiAll {
  return {};
}

export const ReqAdminApiAll: MessageFns<ReqAdminApiAll> = {
  encode(_: ReqAdminApiAll, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqAdminApiAll {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqAdminApiAll();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ReqAdminApiAll {
    return {};
  },

  toJSON(_: ReqAdminApiAll): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqAdminApiAll>, I>>(base?: I): ReqAdminApiAll {
    return ReqAdminApiAll.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqAdminApiAll>, I>>(_: I): ReqAdminApiAll {
    const message = createBaseReqAdminApiAll();
    return message;
  },
};

function createBaseRespAdminApiAllData(): RespAdminApiAllData {
  return { list: [] };
}

export const RespAdminApiAllData: MessageFns<RespAdminApiAllData> = {
  encode(message: RespAdminApiAllData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.list !== undefined && message.list.length !== 0) {
      for (const v of message.list) {
        AdminApiItem.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespAdminApiAllData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespAdminApiAllData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const el = AdminApiItem.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.list!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RespAdminApiAllData {
    return {
      list: globalThis.Array.isArray(object?.list) ? object.list.map((e: any) => AdminApiItem.fromJSON(e)) : [],
    };
  },

  toJSON(message: RespAdminApiAllData): unknown {
    const obj: any = {};
    if (message.list?.length) {
      obj.list = message.list.map((e) => AdminApiItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RespAdminApiAllData>, I>>(base?: I): RespAdminApiAllData {
    return RespAdminApiAllData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespAdminApiAllData>, I>>(object: I): RespAdminApiAllData {
    const message = createBaseRespAdminApiAllData();
    message.list = object.list?.map((e) => AdminApiItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReqAdminApiAdd(): ReqAdminApiAdd {
  return { path: "", key: "", name: "", describe: "", enabled: false };
}

export const ReqAdminApiAdd: MessageFns<ReqAdminApiAdd> = {
  encode(message: ReqAdminApiAdd, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== undefined && message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(18).string(message.key);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.describe !== undefined && message.describe !== "") {
      writer.uint32(34).string(message.describe);
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      writer.uint32(40).bool(message.enabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqAdminApiAdd {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqAdminApiAdd();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.describe = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqAdminApiAdd {
    return {
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      describe: isSet(object.describe) ? globalThis.String(object.describe) : "",
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
    };
  },

  toJSON(message: ReqAdminApiAdd): unknown {
    const obj: any = {};
    if (message.path !== undefined && message.path !== "") {
      obj.path = message.path;
    }
    if (message.key !== undefined && message.key !== "") {
      obj.key = message.key;
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.describe !== undefined && message.describe !== "") {
      obj.describe = message.describe;
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqAdminApiAdd>, I>>(base?: I): ReqAdminApiAdd {
    return ReqAdminApiAdd.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqAdminApiAdd>, I>>(object: I): ReqAdminApiAdd {
    const message = createBaseReqAdminApiAdd();
    message.path = object.path ?? "";
    message.key = object.key ?? "";
    message.name = object.name ?? "";
    message.describe = object.describe ?? "";
    message.enabled = object.enabled ?? false;
    return message;
  },
};

function createBaseRespAdminApiAddData(): RespAdminApiAddData {
  return {};
}

export const RespAdminApiAddData: MessageFns<RespAdminApiAddData> = {
  encode(_: RespAdminApiAddData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespAdminApiAddData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespAdminApiAddData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespAdminApiAddData {
    return {};
  },

  toJSON(_: RespAdminApiAddData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespAdminApiAddData>, I>>(base?: I): RespAdminApiAddData {
    return RespAdminApiAddData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespAdminApiAddData>, I>>(_: I): RespAdminApiAddData {
    const message = createBaseRespAdminApiAddData();
    return message;
  },
};

function createBaseReqAdminApiInfo(): ReqAdminApiInfo {
  return { id: 0 };
}

export const ReqAdminApiInfo: MessageFns<ReqAdminApiInfo> = {
  encode(message: ReqAdminApiInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqAdminApiInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqAdminApiInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqAdminApiInfo {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: ReqAdminApiInfo): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqAdminApiInfo>, I>>(base?: I): ReqAdminApiInfo {
    return ReqAdminApiInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqAdminApiInfo>, I>>(object: I): ReqAdminApiInfo {
    const message = createBaseReqAdminApiInfo();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseRespAdminApiInfoData(): RespAdminApiInfoData {
  return { data: undefined };
}

export const RespAdminApiInfoData: MessageFns<RespAdminApiInfoData> = {
  encode(message: RespAdminApiInfoData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      AdminApiItem.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespAdminApiInfoData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespAdminApiInfoData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = AdminApiItem.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RespAdminApiInfoData {
    return { data: isSet(object.data) ? AdminApiItem.fromJSON(object.data) : undefined };
  },

  toJSON(message: RespAdminApiInfoData): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = AdminApiItem.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RespAdminApiInfoData>, I>>(base?: I): RespAdminApiInfoData {
    return RespAdminApiInfoData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespAdminApiInfoData>, I>>(object: I): RespAdminApiInfoData {
    const message = createBaseRespAdminApiInfoData();
    message.data = (object.data !== undefined && object.data !== null)
      ? AdminApiItem.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseReqAdminApiEdit(): ReqAdminApiEdit {
  return { id: 0, path: "", key: "", name: "", describe: "", enabled: false };
}

export const ReqAdminApiEdit: MessageFns<ReqAdminApiEdit> = {
  encode(message: ReqAdminApiEdit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.path !== undefined && message.path !== "") {
      writer.uint32(18).string(message.path);
    }
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(26).string(message.key);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.describe !== undefined && message.describe !== "") {
      writer.uint32(42).string(message.describe);
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      writer.uint32(48).bool(message.enabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqAdminApiEdit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqAdminApiEdit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.describe = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqAdminApiEdit {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      describe: isSet(object.describe) ? globalThis.String(object.describe) : "",
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
    };
  },

  toJSON(message: ReqAdminApiEdit): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.path !== undefined && message.path !== "") {
      obj.path = message.path;
    }
    if (message.key !== undefined && message.key !== "") {
      obj.key = message.key;
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.describe !== undefined && message.describe !== "") {
      obj.describe = message.describe;
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqAdminApiEdit>, I>>(base?: I): ReqAdminApiEdit {
    return ReqAdminApiEdit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqAdminApiEdit>, I>>(object: I): ReqAdminApiEdit {
    const message = createBaseReqAdminApiEdit();
    message.id = object.id ?? 0;
    message.path = object.path ?? "";
    message.key = object.key ?? "";
    message.name = object.name ?? "";
    message.describe = object.describe ?? "";
    message.enabled = object.enabled ?? false;
    return message;
  },
};

function createBaseRespAdminApiEditData(): RespAdminApiEditData {
  return {};
}

export const RespAdminApiEditData: MessageFns<RespAdminApiEditData> = {
  encode(_: RespAdminApiEditData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespAdminApiEditData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespAdminApiEditData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespAdminApiEditData {
    return {};
  },

  toJSON(_: RespAdminApiEditData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespAdminApiEditData>, I>>(base?: I): RespAdminApiEditData {
    return RespAdminApiEditData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespAdminApiEditData>, I>>(_: I): RespAdminApiEditData {
    const message = createBaseRespAdminApiEditData();
    return message;
  },
};

function createBaseReqAdminApiEnable(): ReqAdminApiEnable {
  return { id: 0, enabled: false };
}

export const ReqAdminApiEnable: MessageFns<ReqAdminApiEnable> = {
  encode(message: ReqAdminApiEnable, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      writer.uint32(16).bool(message.enabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqAdminApiEnable {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqAdminApiEnable();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqAdminApiEnable {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
    };
  },

  toJSON(message: ReqAdminApiEnable): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.enabled !== undefined && message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqAdminApiEnable>, I>>(base?: I): ReqAdminApiEnable {
    return ReqAdminApiEnable.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqAdminApiEnable>, I>>(object: I): ReqAdminApiEnable {
    const message = createBaseReqAdminApiEnable();
    message.id = object.id ?? 0;
    message.enabled = object.enabled ?? false;
    return message;
  },
};

function createBaseRespAdminApiEnableData(): RespAdminApiEnableData {
  return {};
}

export const RespAdminApiEnableData: MessageFns<RespAdminApiEnableData> = {
  encode(_: RespAdminApiEnableData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespAdminApiEnableData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespAdminApiEnableData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespAdminApiEnableData {
    return {};
  },

  toJSON(_: RespAdminApiEnableData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespAdminApiEnableData>, I>>(base?: I): RespAdminApiEnableData {
    return RespAdminApiEnableData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespAdminApiEnableData>, I>>(_: I): RespAdminApiEnableData {
    const message = createBaseRespAdminApiEnableData();
    return message;
  },
};

function createBaseReqAdminApiDelete(): ReqAdminApiDelete {
  return { id: 0 };
}

export const ReqAdminApiDelete: MessageFns<ReqAdminApiDelete> = {
  encode(message: ReqAdminApiDelete, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqAdminApiDelete {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqAdminApiDelete();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqAdminApiDelete {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: ReqAdminApiDelete): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqAdminApiDelete>, I>>(base?: I): ReqAdminApiDelete {
    return ReqAdminApiDelete.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqAdminApiDelete>, I>>(object: I): ReqAdminApiDelete {
    const message = createBaseReqAdminApiDelete();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseRespAdminApiDeleteData(): RespAdminApiDeleteData {
  return {};
}

export const RespAdminApiDeleteData: MessageFns<RespAdminApiDeleteData> = {
  encode(_: RespAdminApiDeleteData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RespAdminApiDeleteData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespAdminApiDeleteData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespAdminApiDeleteData {
    return {};
  },

  toJSON(_: RespAdminApiDeleteData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespAdminApiDeleteData>, I>>(base?: I): RespAdminApiDeleteData {
    return RespAdminApiDeleteData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RespAdminApiDeleteData>, I>>(_: I): RespAdminApiDeleteData {
    const message = createBaseRespAdminApiDeleteData();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
