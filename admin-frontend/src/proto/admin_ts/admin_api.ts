/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: admin_api.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./common";
import * as pb_1 from "google-protobuf";
export class ReqApiList extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        base?: dependency_1.ReqListBase;
        key?: string;
        name?: string;
        path?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("base" in data && data.base != undefined) {
                this.base = data.base;
            }
            if ("key" in data && data.key != undefined) {
                this.key = data.key;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("path" in data && data.path != undefined) {
                this.path = data.path;
            }
        }
    }
    get base() {
        return pb_1.Message.getWrapperField(this, dependency_1.ReqListBase, 1) as dependency_1.ReqListBase;
    }
    set base(value: dependency_1.ReqListBase) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasBase() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get key() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set key(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get path() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set path(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        base?: ReturnType<typeof dependency_1.ReqListBase.prototype.toObject>;
        key?: string;
        name?: string;
        path?: string;
    }): ReqApiList {
        const message = new ReqApiList({});
        if (data.base != null) {
            message.base = dependency_1.ReqListBase.fromObject(data.base);
        }
        if (data.key != null) {
            message.key = data.key;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.path != null) {
            message.path = data.path;
        }
        return message;
    }
    toObject() {
        const data: {
            base?: ReturnType<typeof dependency_1.ReqListBase.prototype.toObject>;
            key?: string;
            name?: string;
            path?: string;
        } = {};
        if (this.base != null) {
            data.base = this.base.toObject();
        }
        if (this.key != null) {
            data.key = this.key;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.path != null) {
            data.path = this.path;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasBase)
            writer.writeMessage(1, this.base, () => this.base.serialize(writer));
        if (this.key.length)
            writer.writeString(2, this.key);
        if (this.name.length)
            writer.writeString(3, this.name);
        if (this.path.length)
            writer.writeString(4, this.path);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqApiList {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReqApiList();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.base, () => message.base = dependency_1.ReqListBase.deserialize(reader));
                    break;
                case 2:
                    message.key = reader.readString();
                    break;
                case 3:
                    message.name = reader.readString();
                    break;
                case 4:
                    message.path = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReqApiList {
        return ReqApiList.deserialize(bytes);
    }
}
export class RespApiListData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        total?: number;
        list?: dependency_1.ApiItem[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("total" in data && data.total != undefined) {
                this.total = data.total;
            }
            if ("list" in data && data.list != undefined) {
                this.list = data.list;
            }
        }
    }
    get total() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set total(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.ApiItem, 2) as dependency_1.ApiItem[];
    }
    set list(value: dependency_1.ApiItem[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        total?: number;
        list?: ReturnType<typeof dependency_1.ApiItem.prototype.toObject>[];
    }): RespApiListData {
        const message = new RespApiListData({});
        if (data.total != null) {
            message.total = data.total;
        }
        if (data.list != null) {
            message.list = data.list.map(item => dependency_1.ApiItem.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            total?: number;
            list?: ReturnType<typeof dependency_1.ApiItem.prototype.toObject>[];
        } = {};
        if (this.total != null) {
            data.total = this.total;
        }
        if (this.list != null) {
            data.list = this.list.map((item: dependency_1.ApiItem) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.total != 0)
            writer.writeInt64(1, this.total);
        if (this.list.length)
            writer.writeRepeatedMessage(2, this.list, (item: dependency_1.ApiItem) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespApiListData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RespApiListData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.total = reader.readInt64();
                    break;
                case 2:
                    reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.ApiItem.deserialize(reader), dependency_1.ApiItem));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RespApiListData {
        return RespApiListData.deserialize(bytes);
    }
}
export class ReqApiAll extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): ReqApiAll {
        const message = new ReqApiAll({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqApiAll {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReqApiAll();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReqApiAll {
        return ReqApiAll.deserialize(bytes);
    }
}
export class RespApiAllData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        list?: dependency_1.ApiItem[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("list" in data && data.list != undefined) {
                this.list = data.list;
            }
        }
    }
    get list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.ApiItem, 1) as dependency_1.ApiItem[];
    }
    set list(value: dependency_1.ApiItem[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        list?: ReturnType<typeof dependency_1.ApiItem.prototype.toObject>[];
    }): RespApiAllData {
        const message = new RespApiAllData({});
        if (data.list != null) {
            message.list = data.list.map(item => dependency_1.ApiItem.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            list?: ReturnType<typeof dependency_1.ApiItem.prototype.toObject>[];
        } = {};
        if (this.list != null) {
            data.list = this.list.map((item: dependency_1.ApiItem) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.list.length)
            writer.writeRepeatedMessage(1, this.list, (item: dependency_1.ApiItem) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespApiAllData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RespApiAllData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.ApiItem.deserialize(reader), dependency_1.ApiItem));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RespApiAllData {
        return RespApiAllData.deserialize(bytes);
    }
}
export class ReqApiAdd extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        path?: string;
        key?: string;
        name?: string;
        describe?: string;
        enabled?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("path" in data && data.path != undefined) {
                this.path = data.path;
            }
            if ("key" in data && data.key != undefined) {
                this.key = data.key;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("describe" in data && data.describe != undefined) {
                this.describe = data.describe;
            }
            if ("enabled" in data && data.enabled != undefined) {
                this.enabled = data.enabled;
            }
        }
    }
    get path() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set path(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get key() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set key(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get describe() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set describe(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get enabled() {
        return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set enabled(value: boolean) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        path?: string;
        key?: string;
        name?: string;
        describe?: string;
        enabled?: boolean;
    }): ReqApiAdd {
        const message = new ReqApiAdd({});
        if (data.path != null) {
            message.path = data.path;
        }
        if (data.key != null) {
            message.key = data.key;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.describe != null) {
            message.describe = data.describe;
        }
        if (data.enabled != null) {
            message.enabled = data.enabled;
        }
        return message;
    }
    toObject() {
        const data: {
            path?: string;
            key?: string;
            name?: string;
            describe?: string;
            enabled?: boolean;
        } = {};
        if (this.path != null) {
            data.path = this.path;
        }
        if (this.key != null) {
            data.key = this.key;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.describe != null) {
            data.describe = this.describe;
        }
        if (this.enabled != null) {
            data.enabled = this.enabled;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.path.length)
            writer.writeString(1, this.path);
        if (this.key.length)
            writer.writeString(2, this.key);
        if (this.name.length)
            writer.writeString(3, this.name);
        if (this.describe.length)
            writer.writeString(4, this.describe);
        if (this.enabled != false)
            writer.writeBool(5, this.enabled);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqApiAdd {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReqApiAdd();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.path = reader.readString();
                    break;
                case 2:
                    message.key = reader.readString();
                    break;
                case 3:
                    message.name = reader.readString();
                    break;
                case 4:
                    message.describe = reader.readString();
                    break;
                case 5:
                    message.enabled = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReqApiAdd {
        return ReqApiAdd.deserialize(bytes);
    }
}
export class RespApiAddData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): RespApiAddData {
        const message = new RespApiAddData({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespApiAddData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RespApiAddData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RespApiAddData {
        return RespApiAddData.deserialize(bytes);
    }
}
export class ReqApiInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        id?: number;
    }): ReqApiInfo {
        const message = new ReqApiInfo({});
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqApiInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReqApiInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReqApiInfo {
        return ReqApiInfo.deserialize(bytes);
    }
}
export class RespApiInfoData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        data?: dependency_1.ApiItem;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get data() {
        return pb_1.Message.getWrapperField(this, dependency_1.ApiItem, 1) as dependency_1.ApiItem;
    }
    set data(value: dependency_1.ApiItem) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasData() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        data?: ReturnType<typeof dependency_1.ApiItem.prototype.toObject>;
    }): RespApiInfoData {
        const message = new RespApiInfoData({});
        if (data.data != null) {
            message.data = dependency_1.ApiItem.fromObject(data.data);
        }
        return message;
    }
    toObject() {
        const data: {
            data?: ReturnType<typeof dependency_1.ApiItem.prototype.toObject>;
        } = {};
        if (this.data != null) {
            data.data = this.data.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasData)
            writer.writeMessage(1, this.data, () => this.data.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespApiInfoData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RespApiInfoData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.data, () => message.data = dependency_1.ApiItem.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RespApiInfoData {
        return RespApiInfoData.deserialize(bytes);
    }
}
export class ReqApiEdit extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        path?: string;
        key?: string;
        name?: string;
        describe?: string;
        enabled?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("path" in data && data.path != undefined) {
                this.path = data.path;
            }
            if ("key" in data && data.key != undefined) {
                this.key = data.key;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("describe" in data && data.describe != undefined) {
                this.describe = data.describe;
            }
            if ("enabled" in data && data.enabled != undefined) {
                this.enabled = data.enabled;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get path() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set path(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get key() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set key(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get describe() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set describe(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get enabled() {
        return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
    }
    set enabled(value: boolean) {
        pb_1.Message.setField(this, 6, value);
    }
    static fromObject(data: {
        id?: number;
        path?: string;
        key?: string;
        name?: string;
        describe?: string;
        enabled?: boolean;
    }): ReqApiEdit {
        const message = new ReqApiEdit({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.path != null) {
            message.path = data.path;
        }
        if (data.key != null) {
            message.key = data.key;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.describe != null) {
            message.describe = data.describe;
        }
        if (data.enabled != null) {
            message.enabled = data.enabled;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            path?: string;
            key?: string;
            name?: string;
            describe?: string;
            enabled?: boolean;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.path != null) {
            data.path = this.path;
        }
        if (this.key != null) {
            data.key = this.key;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.describe != null) {
            data.describe = this.describe;
        }
        if (this.enabled != null) {
            data.enabled = this.enabled;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (this.path.length)
            writer.writeString(2, this.path);
        if (this.key.length)
            writer.writeString(3, this.key);
        if (this.name.length)
            writer.writeString(4, this.name);
        if (this.describe.length)
            writer.writeString(5, this.describe);
        if (this.enabled != false)
            writer.writeBool(6, this.enabled);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqApiEdit {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReqApiEdit();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                case 2:
                    message.path = reader.readString();
                    break;
                case 3:
                    message.key = reader.readString();
                    break;
                case 4:
                    message.name = reader.readString();
                    break;
                case 5:
                    message.describe = reader.readString();
                    break;
                case 6:
                    message.enabled = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReqApiEdit {
        return ReqApiEdit.deserialize(bytes);
    }
}
export class RespApiEditData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): RespApiEditData {
        const message = new RespApiEditData({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespApiEditData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RespApiEditData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RespApiEditData {
        return RespApiEditData.deserialize(bytes);
    }
}
export class ReqApiEnable extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        enabled?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("enabled" in data && data.enabled != undefined) {
                this.enabled = data.enabled;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get enabled() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set enabled(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        id?: number;
        enabled?: boolean;
    }): ReqApiEnable {
        const message = new ReqApiEnable({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.enabled != null) {
            message.enabled = data.enabled;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            enabled?: boolean;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.enabled != null) {
            data.enabled = this.enabled;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (this.enabled != false)
            writer.writeBool(2, this.enabled);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqApiEnable {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReqApiEnable();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                case 2:
                    message.enabled = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReqApiEnable {
        return ReqApiEnable.deserialize(bytes);
    }
}
export class RespApiEnableData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): RespApiEnableData {
        const message = new RespApiEnableData({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespApiEnableData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RespApiEnableData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RespApiEnableData {
        return RespApiEnableData.deserialize(bytes);
    }
}
export class ReqApiDelete extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        id?: number;
    }): ReqApiDelete {
        const message = new ReqApiDelete({});
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqApiDelete {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReqApiDelete();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReqApiDelete {
        return ReqApiDelete.deserialize(bytes);
    }
}
export class RespApiDeleteData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): RespApiDeleteData {
        const message = new RespApiDeleteData({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespApiDeleteData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RespApiDeleteData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RespApiDeleteData {
        return RespApiDeleteData.deserialize(bytes);
    }
}
