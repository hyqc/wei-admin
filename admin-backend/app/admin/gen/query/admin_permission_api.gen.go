// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"admin/app/admin/gen/model"
)

func newAdminPermissionAPI(db *gorm.DB, opts ...gen.DOOption) adminPermissionAPI {
	_adminPermissionAPI := adminPermissionAPI{}

	_adminPermissionAPI.adminPermissionAPIDo.UseDB(db, opts...)
	_adminPermissionAPI.adminPermissionAPIDo.UseModel(&model.AdminPermissionAPI{})

	tableName := _adminPermissionAPI.adminPermissionAPIDo.TableName()
	_adminPermissionAPI.ALL = field.NewAsterisk(tableName)
	_adminPermissionAPI.PermissionID = field.NewInt32(tableName, "permission_id")
	_adminPermissionAPI.APIID = field.NewInt32(tableName, "api_id")

	_adminPermissionAPI.fillFieldMap()

	return _adminPermissionAPI
}

type adminPermissionAPI struct {
	adminPermissionAPIDo

	ALL          field.Asterisk
	PermissionID field.Int32 // 权限ID
	APIID        field.Int32 // 接口ID

	fieldMap map[string]field.Expr
}

func (a adminPermissionAPI) Table(newTableName string) *adminPermissionAPI {
	a.adminPermissionAPIDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a adminPermissionAPI) As(alias string) *adminPermissionAPI {
	a.adminPermissionAPIDo.DO = *(a.adminPermissionAPIDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *adminPermissionAPI) updateTableName(table string) *adminPermissionAPI {
	a.ALL = field.NewAsterisk(table)
	a.PermissionID = field.NewInt32(table, "permission_id")
	a.APIID = field.NewInt32(table, "api_id")

	a.fillFieldMap()

	return a
}

func (a *adminPermissionAPI) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *adminPermissionAPI) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 2)
	a.fieldMap["permission_id"] = a.PermissionID
	a.fieldMap["api_id"] = a.APIID
}

func (a adminPermissionAPI) clone(db *gorm.DB) adminPermissionAPI {
	a.adminPermissionAPIDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a adminPermissionAPI) replaceDB(db *gorm.DB) adminPermissionAPI {
	a.adminPermissionAPIDo.ReplaceDB(db)
	return a
}

type adminPermissionAPIDo struct{ gen.DO }

type IAdminPermissionAPIDo interface {
	gen.SubQuery
	Debug() IAdminPermissionAPIDo
	WithContext(ctx context.Context) IAdminPermissionAPIDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAdminPermissionAPIDo
	WriteDB() IAdminPermissionAPIDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAdminPermissionAPIDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAdminPermissionAPIDo
	Not(conds ...gen.Condition) IAdminPermissionAPIDo
	Or(conds ...gen.Condition) IAdminPermissionAPIDo
	Select(conds ...field.Expr) IAdminPermissionAPIDo
	Where(conds ...gen.Condition) IAdminPermissionAPIDo
	Order(conds ...field.Expr) IAdminPermissionAPIDo
	Distinct(cols ...field.Expr) IAdminPermissionAPIDo
	Omit(cols ...field.Expr) IAdminPermissionAPIDo
	Join(table schema.Tabler, on ...field.Expr) IAdminPermissionAPIDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAdminPermissionAPIDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAdminPermissionAPIDo
	Group(cols ...field.Expr) IAdminPermissionAPIDo
	Having(conds ...gen.Condition) IAdminPermissionAPIDo
	Limit(limit int) IAdminPermissionAPIDo
	Offset(offset int) IAdminPermissionAPIDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminPermissionAPIDo
	Unscoped() IAdminPermissionAPIDo
	Create(values ...*model.AdminPermissionAPI) error
	CreateInBatches(values []*model.AdminPermissionAPI, batchSize int) error
	Save(values ...*model.AdminPermissionAPI) error
	First() (*model.AdminPermissionAPI, error)
	Take() (*model.AdminPermissionAPI, error)
	Last() (*model.AdminPermissionAPI, error)
	Find() ([]*model.AdminPermissionAPI, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminPermissionAPI, err error)
	FindInBatches(result *[]*model.AdminPermissionAPI, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AdminPermissionAPI) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAdminPermissionAPIDo
	Assign(attrs ...field.AssignExpr) IAdminPermissionAPIDo
	Joins(fields ...field.RelationField) IAdminPermissionAPIDo
	Preload(fields ...field.RelationField) IAdminPermissionAPIDo
	FirstOrInit() (*model.AdminPermissionAPI, error)
	FirstOrCreate() (*model.AdminPermissionAPI, error)
	FindByPage(offset int, limit int) (result []*model.AdminPermissionAPI, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAdminPermissionAPIDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a adminPermissionAPIDo) Debug() IAdminPermissionAPIDo {
	return a.withDO(a.DO.Debug())
}

func (a adminPermissionAPIDo) WithContext(ctx context.Context) IAdminPermissionAPIDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a adminPermissionAPIDo) ReadDB() IAdminPermissionAPIDo {
	return a.Clauses(dbresolver.Read)
}

func (a adminPermissionAPIDo) WriteDB() IAdminPermissionAPIDo {
	return a.Clauses(dbresolver.Write)
}

func (a adminPermissionAPIDo) Session(config *gorm.Session) IAdminPermissionAPIDo {
	return a.withDO(a.DO.Session(config))
}

func (a adminPermissionAPIDo) Clauses(conds ...clause.Expression) IAdminPermissionAPIDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a adminPermissionAPIDo) Returning(value interface{}, columns ...string) IAdminPermissionAPIDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a adminPermissionAPIDo) Not(conds ...gen.Condition) IAdminPermissionAPIDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a adminPermissionAPIDo) Or(conds ...gen.Condition) IAdminPermissionAPIDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a adminPermissionAPIDo) Select(conds ...field.Expr) IAdminPermissionAPIDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a adminPermissionAPIDo) Where(conds ...gen.Condition) IAdminPermissionAPIDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a adminPermissionAPIDo) Order(conds ...field.Expr) IAdminPermissionAPIDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a adminPermissionAPIDo) Distinct(cols ...field.Expr) IAdminPermissionAPIDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a adminPermissionAPIDo) Omit(cols ...field.Expr) IAdminPermissionAPIDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a adminPermissionAPIDo) Join(table schema.Tabler, on ...field.Expr) IAdminPermissionAPIDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a adminPermissionAPIDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAdminPermissionAPIDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a adminPermissionAPIDo) RightJoin(table schema.Tabler, on ...field.Expr) IAdminPermissionAPIDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a adminPermissionAPIDo) Group(cols ...field.Expr) IAdminPermissionAPIDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a adminPermissionAPIDo) Having(conds ...gen.Condition) IAdminPermissionAPIDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a adminPermissionAPIDo) Limit(limit int) IAdminPermissionAPIDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a adminPermissionAPIDo) Offset(offset int) IAdminPermissionAPIDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a adminPermissionAPIDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminPermissionAPIDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a adminPermissionAPIDo) Unscoped() IAdminPermissionAPIDo {
	return a.withDO(a.DO.Unscoped())
}

func (a adminPermissionAPIDo) Create(values ...*model.AdminPermissionAPI) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a adminPermissionAPIDo) CreateInBatches(values []*model.AdminPermissionAPI, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a adminPermissionAPIDo) Save(values ...*model.AdminPermissionAPI) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a adminPermissionAPIDo) First() (*model.AdminPermissionAPI, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminPermissionAPI), nil
	}
}

func (a adminPermissionAPIDo) Take() (*model.AdminPermissionAPI, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminPermissionAPI), nil
	}
}

func (a adminPermissionAPIDo) Last() (*model.AdminPermissionAPI, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminPermissionAPI), nil
	}
}

func (a adminPermissionAPIDo) Find() ([]*model.AdminPermissionAPI, error) {
	result, err := a.DO.Find()
	return result.([]*model.AdminPermissionAPI), err
}

func (a adminPermissionAPIDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminPermissionAPI, err error) {
	buf := make([]*model.AdminPermissionAPI, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a adminPermissionAPIDo) FindInBatches(result *[]*model.AdminPermissionAPI, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a adminPermissionAPIDo) Attrs(attrs ...field.AssignExpr) IAdminPermissionAPIDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a adminPermissionAPIDo) Assign(attrs ...field.AssignExpr) IAdminPermissionAPIDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a adminPermissionAPIDo) Joins(fields ...field.RelationField) IAdminPermissionAPIDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a adminPermissionAPIDo) Preload(fields ...field.RelationField) IAdminPermissionAPIDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a adminPermissionAPIDo) FirstOrInit() (*model.AdminPermissionAPI, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminPermissionAPI), nil
	}
}

func (a adminPermissionAPIDo) FirstOrCreate() (*model.AdminPermissionAPI, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminPermissionAPI), nil
	}
}

func (a adminPermissionAPIDo) FindByPage(offset int, limit int) (result []*model.AdminPermissionAPI, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a adminPermissionAPIDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a adminPermissionAPIDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a adminPermissionAPIDo) Delete(models ...*model.AdminPermissionAPI) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *adminPermissionAPIDo) withDO(do gen.Dao) *adminPermissionAPIDo {
	a.DO = *do.(*gen.DO)
	return a
}
