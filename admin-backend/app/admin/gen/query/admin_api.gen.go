// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"admin/app/admin/gen/model"
)

func newAdminAPI(db *gorm.DB, opts ...gen.DOOption) adminAPI {
	_adminAPI := adminAPI{}

	_adminAPI.adminAPIDo.UseDB(db, opts...)
	_adminAPI.adminAPIDo.UseModel(&model.AdminAPI{})

	tableName := _adminAPI.adminAPIDo.TableName()
	_adminAPI.ALL = field.NewAsterisk(tableName)
	_adminAPI.ID = field.NewInt32(tableName, "id")
	_adminAPI.Path = field.NewString(tableName, "path")
	_adminAPI.Key = field.NewString(tableName, "key")
	_adminAPI.Name = field.NewString(tableName, "name")
	_adminAPI.Describe = field.NewString(tableName, "describe")
	_adminAPI.IsEnabled = field.NewBool(tableName, "is_enabled")
	_adminAPI.CreatedAt = field.NewTime(tableName, "created_at")
	_adminAPI.UpdatedAt = field.NewTime(tableName, "updated_at")

	_adminAPI.fillFieldMap()

	return _adminAPI
}

type adminAPI struct {
	adminAPIDo

	ALL       field.Asterisk
	ID        field.Int32  // 接口ID
	Path      field.String // 接口路由
	Key       field.String // 接口唯一名称
	Name      field.String // 接口名称
	Describe  field.String // 接口描述
	IsEnabled field.Bool   // 接口状态：1：正常，0：禁用
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (a adminAPI) Table(newTableName string) *adminAPI {
	a.adminAPIDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a adminAPI) As(alias string) *adminAPI {
	a.adminAPIDo.DO = *(a.adminAPIDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *adminAPI) updateTableName(table string) *adminAPI {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.Path = field.NewString(table, "path")
	a.Key = field.NewString(table, "key")
	a.Name = field.NewString(table, "name")
	a.Describe = field.NewString(table, "describe")
	a.IsEnabled = field.NewBool(table, "is_enabled")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *adminAPI) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *adminAPI) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 8)
	a.fieldMap["id"] = a.ID
	a.fieldMap["path"] = a.Path
	a.fieldMap["key"] = a.Key
	a.fieldMap["name"] = a.Name
	a.fieldMap["describe"] = a.Describe
	a.fieldMap["is_enabled"] = a.IsEnabled
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a adminAPI) clone(db *gorm.DB) adminAPI {
	a.adminAPIDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a adminAPI) replaceDB(db *gorm.DB) adminAPI {
	a.adminAPIDo.ReplaceDB(db)
	return a
}

type adminAPIDo struct{ gen.DO }

type IAdminAPIDo interface {
	gen.SubQuery
	Debug() IAdminAPIDo
	WithContext(ctx context.Context) IAdminAPIDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAdminAPIDo
	WriteDB() IAdminAPIDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAdminAPIDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAdminAPIDo
	Not(conds ...gen.Condition) IAdminAPIDo
	Or(conds ...gen.Condition) IAdminAPIDo
	Select(conds ...field.Expr) IAdminAPIDo
	Where(conds ...gen.Condition) IAdminAPIDo
	Order(conds ...field.Expr) IAdminAPIDo
	Distinct(cols ...field.Expr) IAdminAPIDo
	Omit(cols ...field.Expr) IAdminAPIDo
	Join(table schema.Tabler, on ...field.Expr) IAdminAPIDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAdminAPIDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAdminAPIDo
	Group(cols ...field.Expr) IAdminAPIDo
	Having(conds ...gen.Condition) IAdminAPIDo
	Limit(limit int) IAdminAPIDo
	Offset(offset int) IAdminAPIDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminAPIDo
	Unscoped() IAdminAPIDo
	Create(values ...*model.AdminAPI) error
	CreateInBatches(values []*model.AdminAPI, batchSize int) error
	Save(values ...*model.AdminAPI) error
	First() (*model.AdminAPI, error)
	Take() (*model.AdminAPI, error)
	Last() (*model.AdminAPI, error)
	Find() ([]*model.AdminAPI, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminAPI, err error)
	FindInBatches(result *[]*model.AdminAPI, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AdminAPI) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAdminAPIDo
	Assign(attrs ...field.AssignExpr) IAdminAPIDo
	Joins(fields ...field.RelationField) IAdminAPIDo
	Preload(fields ...field.RelationField) IAdminAPIDo
	FirstOrInit() (*model.AdminAPI, error)
	FirstOrCreate() (*model.AdminAPI, error)
	FindByPage(offset int, limit int) (result []*model.AdminAPI, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAdminAPIDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a adminAPIDo) Debug() IAdminAPIDo {
	return a.withDO(a.DO.Debug())
}

func (a adminAPIDo) WithContext(ctx context.Context) IAdminAPIDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a adminAPIDo) ReadDB() IAdminAPIDo {
	return a.Clauses(dbresolver.Read)
}

func (a adminAPIDo) WriteDB() IAdminAPIDo {
	return a.Clauses(dbresolver.Write)
}

func (a adminAPIDo) Session(config *gorm.Session) IAdminAPIDo {
	return a.withDO(a.DO.Session(config))
}

func (a adminAPIDo) Clauses(conds ...clause.Expression) IAdminAPIDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a adminAPIDo) Returning(value interface{}, columns ...string) IAdminAPIDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a adminAPIDo) Not(conds ...gen.Condition) IAdminAPIDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a adminAPIDo) Or(conds ...gen.Condition) IAdminAPIDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a adminAPIDo) Select(conds ...field.Expr) IAdminAPIDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a adminAPIDo) Where(conds ...gen.Condition) IAdminAPIDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a adminAPIDo) Order(conds ...field.Expr) IAdminAPIDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a adminAPIDo) Distinct(cols ...field.Expr) IAdminAPIDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a adminAPIDo) Omit(cols ...field.Expr) IAdminAPIDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a adminAPIDo) Join(table schema.Tabler, on ...field.Expr) IAdminAPIDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a adminAPIDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAdminAPIDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a adminAPIDo) RightJoin(table schema.Tabler, on ...field.Expr) IAdminAPIDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a adminAPIDo) Group(cols ...field.Expr) IAdminAPIDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a adminAPIDo) Having(conds ...gen.Condition) IAdminAPIDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a adminAPIDo) Limit(limit int) IAdminAPIDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a adminAPIDo) Offset(offset int) IAdminAPIDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a adminAPIDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminAPIDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a adminAPIDo) Unscoped() IAdminAPIDo {
	return a.withDO(a.DO.Unscoped())
}

func (a adminAPIDo) Create(values ...*model.AdminAPI) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a adminAPIDo) CreateInBatches(values []*model.AdminAPI, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a adminAPIDo) Save(values ...*model.AdminAPI) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a adminAPIDo) First() (*model.AdminAPI, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminAPI), nil
	}
}

func (a adminAPIDo) Take() (*model.AdminAPI, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminAPI), nil
	}
}

func (a adminAPIDo) Last() (*model.AdminAPI, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminAPI), nil
	}
}

func (a adminAPIDo) Find() ([]*model.AdminAPI, error) {
	result, err := a.DO.Find()
	return result.([]*model.AdminAPI), err
}

func (a adminAPIDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminAPI, err error) {
	buf := make([]*model.AdminAPI, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a adminAPIDo) FindInBatches(result *[]*model.AdminAPI, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a adminAPIDo) Attrs(attrs ...field.AssignExpr) IAdminAPIDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a adminAPIDo) Assign(attrs ...field.AssignExpr) IAdminAPIDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a adminAPIDo) Joins(fields ...field.RelationField) IAdminAPIDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a adminAPIDo) Preload(fields ...field.RelationField) IAdminAPIDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a adminAPIDo) FirstOrInit() (*model.AdminAPI, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminAPI), nil
	}
}

func (a adminAPIDo) FirstOrCreate() (*model.AdminAPI, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminAPI), nil
	}
}

func (a adminAPIDo) FindByPage(offset int, limit int) (result []*model.AdminAPI, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a adminAPIDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a adminAPIDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a adminAPIDo) Delete(models ...*model.AdminAPI) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *adminAPIDo) withDO(do gen.Dao) *adminAPIDo {
	a.DO = *do.(*gen.DO)
	return a
}
