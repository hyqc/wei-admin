// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                   = new(Query)
	AdminAPI            *adminAPI
	AdminMenu           *adminMenu
	AdminPermission     *adminPermission
	AdminPermissionAPI  *adminPermissionAPI
	AdminRole           *adminRole
	AdminRolePermission *adminRolePermission
	AdminUser           *adminUser
	AdminUserRole       *adminUserRole
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	AdminAPI = &Q.AdminAPI
	AdminMenu = &Q.AdminMenu
	AdminPermission = &Q.AdminPermission
	AdminPermissionAPI = &Q.AdminPermissionAPI
	AdminRole = &Q.AdminRole
	AdminRolePermission = &Q.AdminRolePermission
	AdminUser = &Q.AdminUser
	AdminUserRole = &Q.AdminUserRole
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                  db,
		AdminAPI:            newAdminAPI(db, opts...),
		AdminMenu:           newAdminMenu(db, opts...),
		AdminPermission:     newAdminPermission(db, opts...),
		AdminPermissionAPI:  newAdminPermissionAPI(db, opts...),
		AdminRole:           newAdminRole(db, opts...),
		AdminRolePermission: newAdminRolePermission(db, opts...),
		AdminUser:           newAdminUser(db, opts...),
		AdminUserRole:       newAdminUserRole(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	AdminAPI            adminAPI
	AdminMenu           adminMenu
	AdminPermission     adminPermission
	AdminPermissionAPI  adminPermissionAPI
	AdminRole           adminRole
	AdminRolePermission adminRolePermission
	AdminUser           adminUser
	AdminUserRole       adminUserRole
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		AdminAPI:            q.AdminAPI.clone(db),
		AdminMenu:           q.AdminMenu.clone(db),
		AdminPermission:     q.AdminPermission.clone(db),
		AdminPermissionAPI:  q.AdminPermissionAPI.clone(db),
		AdminRole:           q.AdminRole.clone(db),
		AdminRolePermission: q.AdminRolePermission.clone(db),
		AdminUser:           q.AdminUser.clone(db),
		AdminUserRole:       q.AdminUserRole.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		AdminAPI:            q.AdminAPI.replaceDB(db),
		AdminMenu:           q.AdminMenu.replaceDB(db),
		AdminPermission:     q.AdminPermission.replaceDB(db),
		AdminPermissionAPI:  q.AdminPermissionAPI.replaceDB(db),
		AdminRole:           q.AdminRole.replaceDB(db),
		AdminRolePermission: q.AdminRolePermission.replaceDB(db),
		AdminUser:           q.AdminUser.replaceDB(db),
		AdminUserRole:       q.AdminUserRole.replaceDB(db),
	}
}

type queryCtx struct {
	AdminAPI            IAdminAPIDo
	AdminMenu           IAdminMenuDo
	AdminPermission     IAdminPermissionDo
	AdminPermissionAPI  IAdminPermissionAPIDo
	AdminRole           IAdminRoleDo
	AdminRolePermission IAdminRolePermissionDo
	AdminUser           IAdminUserDo
	AdminUserRole       IAdminUserRoleDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		AdminAPI:            q.AdminAPI.WithContext(ctx),
		AdminMenu:           q.AdminMenu.WithContext(ctx),
		AdminPermission:     q.AdminPermission.WithContext(ctx),
		AdminPermissionAPI:  q.AdminPermissionAPI.WithContext(ctx),
		AdminRole:           q.AdminRole.WithContext(ctx),
		AdminRolePermission: q.AdminRolePermission.WithContext(ctx),
		AdminUser:           q.AdminUser.WithContext(ctx),
		AdminUserRole:       q.AdminUserRole.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
